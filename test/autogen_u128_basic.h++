// The contents of this file are generated automatically.
// You should not edit it manually.

TEST(u128, autogen_basic_0) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(UINT64_C(0x074b6fa6e09727ba));
  const IMP B = IMP(UINT64_C(0x14057b7f59c0faf7));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x1b50eb263a5822b1)));
  EXPECT_EQ(A - B, IMP(-INT64_C(917058498496942909)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x134e14d9b957dd4d)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0x174f7ffff9d7ffff)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x04016b26408022b2)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x00920cb7176e7d4b), UINT64_C(0xcfc3c2c9c422f876)));
  EXPECT_EQ(-A, IMP(-INT64_C(525636544042051514)));
  EXPECT_EQ(~A, IMP(-INT64_C(525636544042051515)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x074b6fa6e09727ba)));
  EXPECT_EQ(A >> 119, IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A << 119, IMP(UINT64_C(0xdd00000000000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x1b50eb263a5822b1)));
  EXPECT_EQ((T = A, T -= B), IMP(-INT64_C(917058498496942909)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x134e14d9b957dd4d)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0x174f7ffff9d7ffff)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x04016b26408022b2)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x00920cb7176e7d4b), UINT64_C(0xcfc3c2c9c422f876)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x074b6fa6e09727ba)));
  EXPECT_EQ((T = A, T >>= 119), IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T <<= 119), IMP(UINT64_C(0xdd00000000000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 119), IMP(UINT64_C(0x000000000000000e), UINT64_C(0x96df4dc12e4f7400)));
  EXPECT_EQ(rol(A, 119), IMP(UINT64_C(0xdd00000000000000), UINT64_C(0x0003a5b7d3704b93)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0x074b6fa6e09727ba)));
  EXPECT_EQ(T, IMP(UINT64_C(0x074b6fa6e09727bb)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0x074b6fa6e09727ba)));
  EXPECT_EQ(T, IMP(UINT64_C(0x074b6fa6e09727b9)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0x074b6fa6e09727bb)));
  EXPECT_EQ(T, IMP(UINT64_C(0x074b6fa6e09727bb)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0x074b6fa6e09727b9)));
  EXPECT_EQ(T, IMP(UINT64_C(0x074b6fa6e09727b9)));
}

TEST(i128, autogen_basic_1) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(INT64_C(525636544042051514));
  const IMP B = IMP(INT64_C(1442695042538994423));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(INT64_C(1968331586581045937)));
  EXPECT_EQ(A - B, IMP(INT64_C(-917058498496942909)));
  EXPECT_EQ(A ^ B, IMP(INT64_C(1391072260254063949)));
  EXPECT_EQ(A | B, IMP(INT64_C(1679701923417554943)));
  EXPECT_EQ(A & B, IMP(INT64_C(288629663163490994)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x00920cb7176e7d4b), UINT64_C(0xcfc3c2c9c422f876)));
  EXPECT_EQ(-A, IMP(INT64_C(-525636544042051514)));
  EXPECT_EQ(~A, IMP(INT64_C(-525636544042051515)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(INT64_C(0)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(INT64_C(525636544042051514)));
  EXPECT_EQ(A >> 119, IMP(INT64_C(0)));
  EXPECT_EQ(A << 119, IMP(UINT64_C(0xdd00000000000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(INT64_C(1968331586581045937)));
  EXPECT_EQ((T = A, T -= B), IMP(INT64_C(-917058498496942909)));
  EXPECT_EQ((T = A, T ^= B), IMP(INT64_C(1391072260254063949)));
  EXPECT_EQ((T = A, T |= B), IMP(INT64_C(1679701923417554943)));
  EXPECT_EQ((T = A, T &= B), IMP(INT64_C(288629663163490994)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x00920cb7176e7d4b), UINT64_C(0xcfc3c2c9c422f876)));
  EXPECT_EQ((T = A, T /= B), IMP(INT64_C(0)));
  EXPECT_EQ((T = A, T %= B), IMP(INT64_C(525636544042051514)));
  EXPECT_EQ((T = A, T >>= 119), IMP(INT64_C(0)));
  EXPECT_EQ((T = A, T <<= 119), IMP(UINT64_C(0xdd00000000000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 119), IMP(UINT64_C(0x000000000000000e), UINT64_C(0x96df4dc12e4f7400)));
  EXPECT_EQ(rol(A, 119), IMP(UINT64_C(0xdd00000000000000), UINT64_C(0x0003a5b7d3704b93)));
  EXPECT_EQ((T = A, T++), IMP(INT64_C(525636544042051514)));
  EXPECT_EQ(T, IMP(INT64_C(525636544042051515)));
  EXPECT_EQ((T = A, T--), IMP(INT64_C(525636544042051514)));
  EXPECT_EQ(T, IMP(INT64_C(525636544042051513)));
  EXPECT_EQ((T = A, ++T), IMP(INT64_C(525636544042051515)));
  EXPECT_EQ(T, IMP(INT64_C(525636544042051515)));
  EXPECT_EQ((T = A, --T), IMP(INT64_C(525636544042051513)));
  EXPECT_EQ(T, IMP(INT64_C(525636544042051513)));
}

TEST(u128, autogen_basic_2) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(UINT64_C(0xea80f204ff0c477c), UINT64_C(0x64e759114f32961b));
  const IMP B = IMP(UINT64_C(0x5dc2c0b6c5f0c301));
  IMP T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0xea80f204ff0c477c), UINT64_C(0xc2aa19c81523591c)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0xea80f204ff0c477c), UINT64_C(0x0724985a8941d31a)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0xea80f204ff0c477c), UINT64_C(0x392599a78ac2551a)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0xea80f204ff0c477c), UINT64_C(0x7de7d9b7cff2d71b)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x44c2401045308201)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0xc512ef9b1fee5b58), UINT64_C(0x3decac8657d9271b)));
  EXPECT_EQ(-A, IMP(UINT64_C(0x157f0dfb00f3b883), UINT64_C(0x9b18a6eeb0cd69e5)));
  EXPECT_EQ(~A, IMP(UINT64_C(0x157f0dfb00f3b883), UINT64_C(0x9b18a6eeb0cd69e4)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x0000000000000002), UINT64_C(0x8047298f231861be)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x3f25809fc1867a5d)));
  EXPECT_EQ(A >> 1, IMP(UINT64_C(0x754079027f8623be), UINT64_C(0x3273ac88a7994b0d)));
  EXPECT_EQ(A << 1, IMP(UINT64_C(0xd501e409fe188ef8), UINT64_C(0xc9ceb2229e652c36)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0xea80f204ff0c477c), UINT64_C(0xc2aa19c81523591c)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0xea80f204ff0c477c), UINT64_C(0x0724985a8941d31a)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0xea80f204ff0c477c), UINT64_C(0x392599a78ac2551a)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0xea80f204ff0c477c), UINT64_C(0x7de7d9b7cff2d71b)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x44c2401045308201)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0xc512ef9b1fee5b58), UINT64_C(0x3decac8657d9271b)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x0000000000000002), UINT64_C(0x8047298f231861be)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x3f25809fc1867a5d)));
  EXPECT_EQ((T = A, T >>= 1), IMP(UINT64_C(0x754079027f8623be), UINT64_C(0x3273ac88a7994b0d)));
  EXPECT_EQ((T = A, T <<= 1), IMP(UINT64_C(0xd501e409fe188ef8), UINT64_C(0xc9ceb2229e652c36)));
  EXPECT_EQ(ror(A, 1), IMP(UINT64_C(0xf54079027f8623be), UINT64_C(0x3273ac88a7994b0d)));
  EXPECT_EQ(rol(A, 1), IMP(UINT64_C(0xd501e409fe188ef8), UINT64_C(0xc9ceb2229e652c37)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0xea80f204ff0c477c), UINT64_C(0x64e759114f32961b)));
  EXPECT_EQ(T, IMP(UINT64_C(0xea80f204ff0c477c), UINT64_C(0x64e759114f32961c)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0xea80f204ff0c477c), UINT64_C(0x64e759114f32961b)));
  EXPECT_EQ(T, IMP(UINT64_C(0xea80f204ff0c477c), UINT64_C(0x64e759114f32961a)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0xea80f204ff0c477c), UINT64_C(0x64e759114f32961c)));
  EXPECT_EQ(T, IMP(UINT64_C(0xea80f204ff0c477c), UINT64_C(0x64e759114f32961c)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0xea80f204ff0c477c), UINT64_C(0x64e759114f32961a)));
  EXPECT_EQ(T, IMP(UINT64_C(0xea80f204ff0c477c), UINT64_C(0x64e759114f32961a)));
}

TEST(i128, autogen_basic_3) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(UINT64_C(0xea80f204ff0c477c), UINT64_C(0x64e759114f32961b));
  const IMP B = IMP(INT64_C(6756174282246636289));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0xea80f204ff0c477c), UINT64_C(0xc2aa19c81523591c)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0xea80f204ff0c477c), UINT64_C(0x0724985a8941d31a)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0xea80f204ff0c477c), UINT64_C(0x392599a78ac2551a)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0xea80f204ff0c477c), UINT64_C(0x7de7d9b7cff2d71b)));
  EXPECT_EQ(A & B, IMP(INT64_C(4954592978685428225)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0xc512ef9b1fee5b58), UINT64_C(0x3decac8657d9271b)));
  EXPECT_EQ(-A, IMP(UINT64_C(0x157f0dfb00f3b883), UINT64_C(0x9b18a6eeb0cd69e5)));
  EXPECT_EQ(~A, IMP(UINT64_C(0x157f0dfb00f3b883), UINT64_C(0x9b18a6eeb0cd69e4)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(INT64_C(-4229241576181464002)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(INT64_C(-6111007536998819875)));
  EXPECT_EQ(A >> 1, IMP(UINT64_C(0xf54079027f8623be), UINT64_C(0x3273ac88a7994b0d)));
  EXPECT_EQ(A << 1, IMP(UINT64_C(0xd501e409fe188ef8), UINT64_C(0xc9ceb2229e652c36)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0xea80f204ff0c477c), UINT64_C(0xc2aa19c81523591c)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0xea80f204ff0c477c), UINT64_C(0x0724985a8941d31a)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0xea80f204ff0c477c), UINT64_C(0x392599a78ac2551a)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0xea80f204ff0c477c), UINT64_C(0x7de7d9b7cff2d71b)));
  EXPECT_EQ((T = A, T &= B), IMP(INT64_C(4954592978685428225)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0xc512ef9b1fee5b58), UINT64_C(0x3decac8657d9271b)));
  EXPECT_EQ((T = A, T /= B), IMP(INT64_C(-4229241576181464002)));
  EXPECT_EQ((T = A, T %= B), IMP(INT64_C(-6111007536998819875)));
  EXPECT_EQ((T = A, T >>= 1), IMP(UINT64_C(0xf54079027f8623be), UINT64_C(0x3273ac88a7994b0d)));
  EXPECT_EQ((T = A, T <<= 1), IMP(UINT64_C(0xd501e409fe188ef8), UINT64_C(0xc9ceb2229e652c36)));
  EXPECT_EQ(ror(A, 1), IMP(UINT64_C(0xf54079027f8623be), UINT64_C(0x3273ac88a7994b0d)));
  EXPECT_EQ(rol(A, 1), IMP(UINT64_C(0xd501e409fe188ef8), UINT64_C(0xc9ceb2229e652c37)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0xea80f204ff0c477c), UINT64_C(0x64e759114f32961b)));
  EXPECT_EQ(T, IMP(UINT64_C(0xea80f204ff0c477c), UINT64_C(0x64e759114f32961c)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0xea80f204ff0c477c), UINT64_C(0x64e759114f32961b)));
  EXPECT_EQ(T, IMP(UINT64_C(0xea80f204ff0c477c), UINT64_C(0x64e759114f32961a)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0xea80f204ff0c477c), UINT64_C(0x64e759114f32961c)));
  EXPECT_EQ(T, IMP(UINT64_C(0xea80f204ff0c477c), UINT64_C(0x64e759114f32961c)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0xea80f204ff0c477c), UINT64_C(0x64e759114f32961a)));
  EXPECT_EQ(T, IMP(UINT64_C(0xea80f204ff0c477c), UINT64_C(0x64e759114f32961a)));
}

TEST(u128, autogen_basic_4) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(UINT64_C(0x50f5f1ba193760f0));
  const IMP B = IMP(UINT64_C(0x79f6f5945d7a490e), UINT64_C(0xecec2645bd4a4ac5));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x79f6f5945d7a490f), UINT64_C(0x3de217ffd681abb5)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x86090a6ba285b6f1), UINT64_C(0x6409cb745bed162b)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x79f6f5945d7a490e), UINT64_C(0xbc19d7ffa47d2a35)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0x79f6f5945d7a490e), UINT64_C(0xfcfdf7ffbd7f6af5)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x40e42000190240c0)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0xd291906684e2e2a5), UINT64_C(0x4b1cbcc29f02f8b0)));
  EXPECT_EQ(-A, IMP(-INT64_C(5833834673917616368)));
  EXPECT_EQ(~A, IMP(-INT64_C(5833834673917616369)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x50f5f1ba193760f0)));
  EXPECT_EQ(A >> 69, IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A << 69, IMP(UINT64_C(0x1ebe374326ec1e00), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x79f6f5945d7a490f), UINT64_C(0x3de217ffd681abb5)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x86090a6ba285b6f1), UINT64_C(0x6409cb745bed162b)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x79f6f5945d7a490e), UINT64_C(0xbc19d7ffa47d2a35)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0x79f6f5945d7a490e), UINT64_C(0xfcfdf7ffbd7f6af5)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x40e42000190240c0)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0xd291906684e2e2a5), UINT64_C(0x4b1cbcc29f02f8b0)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x50f5f1ba193760f0)));
  EXPECT_EQ((T = A, T >>= 69), IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T <<= 69), IMP(UINT64_C(0x1ebe374326ec1e00), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 69), IMP(UINT64_C(0x0287af8dd0c9bb07), UINT64_C(0x8000000000000000)));
  EXPECT_EQ(rol(A, 69), IMP(UINT64_C(0x1ebe374326ec1e00), UINT64_C(0x000000000000000a)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0x50f5f1ba193760f0)));
  EXPECT_EQ(T, IMP(UINT64_C(0x50f5f1ba193760f1)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0x50f5f1ba193760f0)));
  EXPECT_EQ(T, IMP(UINT64_C(0x50f5f1ba193760ef)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0x50f5f1ba193760f1)));
  EXPECT_EQ(T, IMP(UINT64_C(0x50f5f1ba193760f1)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0x50f5f1ba193760ef)));
  EXPECT_EQ(T, IMP(UINT64_C(0x50f5f1ba193760ef)));
}

TEST(i128, autogen_basic_5) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(INT64_C(5833834673917616368));
  const IMP B = IMP(UINT64_C(0x79f6f5945d7a490e), UINT64_C(0xecec2645bd4a4ac5));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x79f6f5945d7a490f), UINT64_C(0x3de217ffd681abb5)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x86090a6ba285b6f1), UINT64_C(0x6409cb745bed162b)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x79f6f5945d7a490e), UINT64_C(0xbc19d7ffa47d2a35)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0x79f6f5945d7a490e), UINT64_C(0xfcfdf7ffbd7f6af5)));
  EXPECT_EQ(A & B, IMP(INT64_C(4675897497909084352)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0xd291906684e2e2a5), UINT64_C(0x4b1cbcc29f02f8b0)));
  EXPECT_EQ(-A, IMP(INT64_C(-5833834673917616368)));
  EXPECT_EQ(~A, IMP(INT64_C(-5833834673917616369)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(INT64_C(0)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(INT64_C(5833834673917616368)));
  EXPECT_EQ(A >> 69, IMP(INT64_C(0)));
  EXPECT_EQ(A << 69, IMP(UINT64_C(0x1ebe374326ec1e00), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x79f6f5945d7a490f), UINT64_C(0x3de217ffd681abb5)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x86090a6ba285b6f1), UINT64_C(0x6409cb745bed162b)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x79f6f5945d7a490e), UINT64_C(0xbc19d7ffa47d2a35)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0x79f6f5945d7a490e), UINT64_C(0xfcfdf7ffbd7f6af5)));
  EXPECT_EQ((T = A, T &= B), IMP(INT64_C(4675897497909084352)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0xd291906684e2e2a5), UINT64_C(0x4b1cbcc29f02f8b0)));
  EXPECT_EQ((T = A, T /= B), IMP(INT64_C(0)));
  EXPECT_EQ((T = A, T %= B), IMP(INT64_C(5833834673917616368)));
  EXPECT_EQ((T = A, T >>= 69), IMP(INT64_C(0)));
  EXPECT_EQ((T = A, T <<= 69), IMP(UINT64_C(0x1ebe374326ec1e00), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 69), IMP(UINT64_C(0x0287af8dd0c9bb07), UINT64_C(0x8000000000000000)));
  EXPECT_EQ(rol(A, 69), IMP(UINT64_C(0x1ebe374326ec1e00), UINT64_C(0x000000000000000a)));
  EXPECT_EQ((T = A, T++), IMP(INT64_C(5833834673917616368)));
  EXPECT_EQ(T, IMP(INT64_C(5833834673917616369)));
  EXPECT_EQ((T = A, T--), IMP(INT64_C(5833834673917616368)));
  EXPECT_EQ(T, IMP(INT64_C(5833834673917616367)));
  EXPECT_EQ((T = A, ++T), IMP(INT64_C(5833834673917616369)));
  EXPECT_EQ(T, IMP(INT64_C(5833834673917616369)));
  EXPECT_EQ((T = A, --T), IMP(INT64_C(5833834673917616367)));
  EXPECT_EQ(T, IMP(INT64_C(5833834673917616367)));
}

TEST(u128, autogen_basic_6) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(UINT64_C(0x89e10070da47c6c9), UINT64_C(0x77f56bbe50a029a4));
  const IMP B = IMP(UINT64_C(0xa60a33ea8aea9b7f), UINT64_C(0x0ef3d8acfab3d7a2));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x2feb345b65326248), UINT64_C(0x86e9446b4b540146)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0xe3d6cc864f5d2b4a), UINT64_C(0x6901931155ec5202)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x2feb339a50ad5db6), UINT64_C(0x7906b312aa13fe06)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0xafeb33fadaefdfff), UINT64_C(0x7ff7fbbefab3ffa6)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x800000608a428249), UINT64_C(0x06f148ac50a001a0)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x6b161075f1d2c19f), UINT64_C(0x050426fccdff15c8)));
  EXPECT_EQ(-A, IMP(UINT64_C(0x761eff8f25b83936), UINT64_C(0x880a9441af5fd65c)));
  EXPECT_EQ(~A, IMP(UINT64_C(0x761eff8f25b83936), UINT64_C(0x880a9441af5fd65b)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x89e10070da47c6c9), UINT64_C(0x77f56bbe50a029a4)));
  EXPECT_EQ(A >> 34, IMP(UINT64_C(0x000000002278401c), UINT64_C(0x3691f1b25dfd5aef)));
  EXPECT_EQ(A << 34, IMP(UINT64_C(0x691f1b25dfd5aef9), UINT64_C(0x4280a69000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x2feb345b65326248), UINT64_C(0x86e9446b4b540146)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0xe3d6cc864f5d2b4a), UINT64_C(0x6901931155ec5202)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x2feb339a50ad5db6), UINT64_C(0x7906b312aa13fe06)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0xafeb33fadaefdfff), UINT64_C(0x7ff7fbbefab3ffa6)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x800000608a428249), UINT64_C(0x06f148ac50a001a0)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x6b161075f1d2c19f), UINT64_C(0x050426fccdff15c8)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x89e10070da47c6c9), UINT64_C(0x77f56bbe50a029a4)));
  EXPECT_EQ((T = A, T >>= 34), IMP(UINT64_C(0x000000002278401c), UINT64_C(0x3691f1b25dfd5aef)));
  EXPECT_EQ((T = A, T <<= 34), IMP(UINT64_C(0x691f1b25dfd5aef9), UINT64_C(0x4280a69000000000)));
  EXPECT_EQ(ror(A, 34), IMP(UINT64_C(0x94280a692278401c), UINT64_C(0x3691f1b25dfd5aef)));
  EXPECT_EQ(rol(A, 34), IMP(UINT64_C(0x691f1b25dfd5aef9), UINT64_C(0x4280a692278401c3)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0x89e10070da47c6c9), UINT64_C(0x77f56bbe50a029a4)));
  EXPECT_EQ(T, IMP(UINT64_C(0x89e10070da47c6c9), UINT64_C(0x77f56bbe50a029a5)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0x89e10070da47c6c9), UINT64_C(0x77f56bbe50a029a4)));
  EXPECT_EQ(T, IMP(UINT64_C(0x89e10070da47c6c9), UINT64_C(0x77f56bbe50a029a3)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0x89e10070da47c6c9), UINT64_C(0x77f56bbe50a029a5)));
  EXPECT_EQ(T, IMP(UINT64_C(0x89e10070da47c6c9), UINT64_C(0x77f56bbe50a029a5)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0x89e10070da47c6c9), UINT64_C(0x77f56bbe50a029a3)));
  EXPECT_EQ(T, IMP(UINT64_C(0x89e10070da47c6c9), UINT64_C(0x77f56bbe50a029a3)));
}

TEST(i128, autogen_basic_7) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(UINT64_C(0x89e10070da47c6c9), UINT64_C(0x77f56bbe50a029a4));
  const IMP B = IMP(UINT64_C(0xa60a33ea8aea9b7f), UINT64_C(0x0ef3d8acfab3d7a2));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x2feb345b65326248), UINT64_C(0x86e9446b4b540146)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0xe3d6cc864f5d2b4a), UINT64_C(0x6901931155ec5202)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x2feb339a50ad5db6), UINT64_C(0x7906b312aa13fe06)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0xafeb33fadaefdfff), UINT64_C(0x7ff7fbbefab3ffa6)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x800000608a428249), UINT64_C(0x06f148ac50a001a0)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x6b161075f1d2c19f), UINT64_C(0x050426fccdff15c8)));
  EXPECT_EQ(-A, IMP(UINT64_C(0x761eff8f25b83936), UINT64_C(0x880a9441af5fd65c)));
  EXPECT_EQ(~A, IMP(UINT64_C(0x761eff8f25b83936), UINT64_C(0x880a9441af5fd65b)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(INT64_C(1)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0xe3d6cc864f5d2b4a), UINT64_C(0x6901931155ec5202)));
  EXPECT_EQ(A >> 34, IMP(UINT64_C(0xffffffffe278401c), UINT64_C(0x3691f1b25dfd5aef)));
  EXPECT_EQ(A << 34, IMP(UINT64_C(0x691f1b25dfd5aef9), UINT64_C(0x4280a69000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x2feb345b65326248), UINT64_C(0x86e9446b4b540146)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0xe3d6cc864f5d2b4a), UINT64_C(0x6901931155ec5202)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x2feb339a50ad5db6), UINT64_C(0x7906b312aa13fe06)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0xafeb33fadaefdfff), UINT64_C(0x7ff7fbbefab3ffa6)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x800000608a428249), UINT64_C(0x06f148ac50a001a0)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x6b161075f1d2c19f), UINT64_C(0x050426fccdff15c8)));
  EXPECT_EQ((T = A, T /= B), IMP(INT64_C(1)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0xe3d6cc864f5d2b4a), UINT64_C(0x6901931155ec5202)));
  EXPECT_EQ((T = A, T >>= 34), IMP(UINT64_C(0xffffffffe278401c), UINT64_C(0x3691f1b25dfd5aef)));
  EXPECT_EQ((T = A, T <<= 34), IMP(UINT64_C(0x691f1b25dfd5aef9), UINT64_C(0x4280a69000000000)));
  EXPECT_EQ(ror(A, 34), IMP(UINT64_C(0x94280a692278401c), UINT64_C(0x3691f1b25dfd5aef)));
  EXPECT_EQ(rol(A, 34), IMP(UINT64_C(0x691f1b25dfd5aef9), UINT64_C(0x4280a692278401c3)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0x89e10070da47c6c9), UINT64_C(0x77f56bbe50a029a4)));
  EXPECT_EQ(T, IMP(UINT64_C(0x89e10070da47c6c9), UINT64_C(0x77f56bbe50a029a5)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0x89e10070da47c6c9), UINT64_C(0x77f56bbe50a029a4)));
  EXPECT_EQ(T, IMP(UINT64_C(0x89e10070da47c6c9), UINT64_C(0x77f56bbe50a029a3)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0x89e10070da47c6c9), UINT64_C(0x77f56bbe50a029a5)));
  EXPECT_EQ(T, IMP(UINT64_C(0x89e10070da47c6c9), UINT64_C(0x77f56bbe50a029a5)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0x89e10070da47c6c9), UINT64_C(0x77f56bbe50a029a3)));
  EXPECT_EQ(T, IMP(UINT64_C(0x89e10070da47c6c9), UINT64_C(0x77f56bbe50a029a3)));
}

TEST(u128, autogen_basic_8) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(UINT64_C(0xc9dcd5f96aeffb0d), UINT64_C(0x227cd5e1cbb31598));
  const IMP B = IMP(UINT64_C(0x810cf15b84ab2f23), UINT64_C(0x41c6fe2e09402776));
  IMP T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x4ae9c754ef9b2a30), UINT64_C(0x6443d40fd4f33d0e)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x48cfe49de644cbe9), UINT64_C(0xe0b5d7b3c272ee22)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x48d024a2ee44d42e), UINT64_C(0x63ba2bcfc2f332ee)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0xc9dcf5fbeeefff2f), UINT64_C(0x63feffefcbf337fe)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x810cd15900ab2b01), UINT64_C(0x0044d42009000510)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x4fef2e926a57127d), UINT64_C(0xe7e6e5f3ead61c10)));
  EXPECT_EQ(-A, IMP(UINT64_C(0x36232a06951004f2), UINT64_C(0xdd832a1e344cea68)));
  EXPECT_EQ(~A, IMP(UINT64_C(0x36232a06951004f2), UINT64_C(0xdd832a1e344cea67)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x0000000000000001)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x48cfe49de644cbe9), UINT64_C(0xe0b5d7b3c272ee22)));
  EXPECT_EQ(A >> 118, IMP(UINT64_C(0x0000000000000327)));
  EXPECT_EQ(A << 118, IMP(UINT64_C(0x6600000000000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x4ae9c754ef9b2a30), UINT64_C(0x6443d40fd4f33d0e)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x48cfe49de644cbe9), UINT64_C(0xe0b5d7b3c272ee22)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x48d024a2ee44d42e), UINT64_C(0x63ba2bcfc2f332ee)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0xc9dcf5fbeeefff2f), UINT64_C(0x63feffefcbf337fe)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x810cd15900ab2b01), UINT64_C(0x0044d42009000510)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x4fef2e926a57127d), UINT64_C(0xe7e6e5f3ead61c10)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x48cfe49de644cbe9), UINT64_C(0xe0b5d7b3c272ee22)));
  EXPECT_EQ((T = A, T >>= 118), IMP(UINT64_C(0x0000000000000327)));
  EXPECT_EQ((T = A, T <<= 118), IMP(UINT64_C(0x6600000000000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 118), IMP(UINT64_C(0x7357e5abbfec3489), UINT64_C(0xf357872ecc566327)));
  EXPECT_EQ(rol(A, 118), IMP(UINT64_C(0x663277357e5abbfe), UINT64_C(0xc3489f357872ecc5)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0xc9dcd5f96aeffb0d), UINT64_C(0x227cd5e1cbb31598)));
  EXPECT_EQ(T, IMP(UINT64_C(0xc9dcd5f96aeffb0d), UINT64_C(0x227cd5e1cbb31599)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0xc9dcd5f96aeffb0d), UINT64_C(0x227cd5e1cbb31598)));
  EXPECT_EQ(T, IMP(UINT64_C(0xc9dcd5f96aeffb0d), UINT64_C(0x227cd5e1cbb31597)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0xc9dcd5f96aeffb0d), UINT64_C(0x227cd5e1cbb31599)));
  EXPECT_EQ(T, IMP(UINT64_C(0xc9dcd5f96aeffb0d), UINT64_C(0x227cd5e1cbb31599)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0xc9dcd5f96aeffb0d), UINT64_C(0x227cd5e1cbb31597)));
  EXPECT_EQ(T, IMP(UINT64_C(0xc9dcd5f96aeffb0d), UINT64_C(0x227cd5e1cbb31597)));
}

TEST(i128, autogen_basic_9) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(UINT64_C(0xc9dcd5f96aeffb0d), UINT64_C(0x227cd5e1cbb31598));
  const IMP B = IMP(UINT64_C(0x810cf15b84ab2f23), UINT64_C(0x41c6fe2e09402776));
  IMP T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x4ae9c754ef9b2a30), UINT64_C(0x6443d40fd4f33d0e)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x48cfe49de644cbe9), UINT64_C(0xe0b5d7b3c272ee22)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x48d024a2ee44d42e), UINT64_C(0x63ba2bcfc2f332ee)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0xc9dcf5fbeeefff2f), UINT64_C(0x63feffefcbf337fe)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x810cd15900ab2b01), UINT64_C(0x0044d42009000510)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x4fef2e926a57127d), UINT64_C(0xe7e6e5f3ead61c10)));
  EXPECT_EQ(-A, IMP(UINT64_C(0x36232a06951004f2), UINT64_C(0xdd832a1e344cea68)));
  EXPECT_EQ(~A, IMP(UINT64_C(0x36232a06951004f2), UINT64_C(0xdd832a1e344cea67)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(INT64_C(0)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0xc9dcd5f96aeffb0d), UINT64_C(0x227cd5e1cbb31598)));
  EXPECT_EQ(A >> 118, IMP(INT64_C(-217)));
  EXPECT_EQ(A << 118, IMP(UINT64_C(0x6600000000000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x4ae9c754ef9b2a30), UINT64_C(0x6443d40fd4f33d0e)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x48cfe49de644cbe9), UINT64_C(0xe0b5d7b3c272ee22)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x48d024a2ee44d42e), UINT64_C(0x63ba2bcfc2f332ee)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0xc9dcf5fbeeefff2f), UINT64_C(0x63feffefcbf337fe)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x810cd15900ab2b01), UINT64_C(0x0044d42009000510)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x4fef2e926a57127d), UINT64_C(0xe7e6e5f3ead61c10)));
  EXPECT_EQ((T = A, T /= B), IMP(INT64_C(0)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0xc9dcd5f96aeffb0d), UINT64_C(0x227cd5e1cbb31598)));
  EXPECT_EQ((T = A, T >>= 118), IMP(INT64_C(-217)));
  EXPECT_EQ((T = A, T <<= 118), IMP(UINT64_C(0x6600000000000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 118), IMP(UINT64_C(0x7357e5abbfec3489), UINT64_C(0xf357872ecc566327)));
  EXPECT_EQ(rol(A, 118), IMP(UINT64_C(0x663277357e5abbfe), UINT64_C(0xc3489f357872ecc5)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0xc9dcd5f96aeffb0d), UINT64_C(0x227cd5e1cbb31598)));
  EXPECT_EQ(T, IMP(UINT64_C(0xc9dcd5f96aeffb0d), UINT64_C(0x227cd5e1cbb31599)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0xc9dcd5f96aeffb0d), UINT64_C(0x227cd5e1cbb31598)));
  EXPECT_EQ(T, IMP(UINT64_C(0xc9dcd5f96aeffb0d), UINT64_C(0x227cd5e1cbb31597)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0xc9dcd5f96aeffb0d), UINT64_C(0x227cd5e1cbb31599)));
  EXPECT_EQ(T, IMP(UINT64_C(0xc9dcd5f96aeffb0d), UINT64_C(0x227cd5e1cbb31599)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0xc9dcd5f96aeffb0d), UINT64_C(0x227cd5e1cbb31597)));
  EXPECT_EQ(T, IMP(UINT64_C(0xc9dcd5f96aeffb0d), UINT64_C(0x227cd5e1cbb31597)));
}

TEST(u128, autogen_basic_10) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(UINT64_C(0xb0d37869eb2deb91), UINT64_C(0x0000000000000000));
  const IMP B = IMP(UINT64_C(0x2b1e7d9a4f10b507), UINT64_C(0x34ab958a9838cc8a));
  IMP T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0xdbf1f6043a3ea098), UINT64_C(0x34ab958a9838cc8a)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x85b4facf9c1d3689), UINT64_C(0xcb546a7567c73376)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x9bcd05f3a43d5e96), UINT64_C(0x34ab958a9838cc8a)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0xbbdf7dfbef3dff97), UINT64_C(0x34ab958a9838cc8a)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x201278084b00a101), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x5f796794fe30882a), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(-A, IMP(UINT64_C(0x4f2c879614d2146f), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(~A, IMP(UINT64_C(0x4f2c879614d2146e), UINT64_C(0xffffffffffffffff)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x0000000000000004)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x04598200aeeb1774), UINT64_C(0x2d51a9d59f1ccdd8)));
  EXPECT_EQ(A >> 10, IMP(UINT64_C(0x002c34de1a7acb7a), UINT64_C(0xe440000000000000)));
  EXPECT_EQ(A << 10, IMP(UINT64_C(0x4de1a7acb7ae4400), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0xdbf1f6043a3ea098), UINT64_C(0x34ab958a9838cc8a)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x85b4facf9c1d3689), UINT64_C(0xcb546a7567c73376)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x9bcd05f3a43d5e96), UINT64_C(0x34ab958a9838cc8a)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0xbbdf7dfbef3dff97), UINT64_C(0x34ab958a9838cc8a)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x201278084b00a101), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x5f796794fe30882a), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x0000000000000004)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x04598200aeeb1774), UINT64_C(0x2d51a9d59f1ccdd8)));
  EXPECT_EQ((T = A, T >>= 10), IMP(UINT64_C(0x002c34de1a7acb7a), UINT64_C(0xe440000000000000)));
  EXPECT_EQ((T = A, T <<= 10), IMP(UINT64_C(0x4de1a7acb7ae4400), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 10), IMP(UINT64_C(0x002c34de1a7acb7a), UINT64_C(0xe440000000000000)));
  EXPECT_EQ(rol(A, 10), IMP(UINT64_C(0x4de1a7acb7ae4400), UINT64_C(0x00000000000002c3)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0xb0d37869eb2deb91), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, IMP(UINT64_C(0xb0d37869eb2deb91), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0xb0d37869eb2deb91), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, IMP(UINT64_C(0xb0d37869eb2deb90), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0xb0d37869eb2deb91), UINT64_C(0x0000000000000001)));
  EXPECT_EQ(T, IMP(UINT64_C(0xb0d37869eb2deb91), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0xb0d37869eb2deb90), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ(T, IMP(UINT64_C(0xb0d37869eb2deb90), UINT64_C(0xffffffffffffffff)));
}

TEST(i128, autogen_basic_11) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(UINT64_C(0xb0d37869eb2deb91), UINT64_C(0x0000000000000000));
  const IMP B = IMP(UINT64_C(0x2b1e7d9a4f10b507), UINT64_C(0x34ab958a9838cc8a));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0xdbf1f6043a3ea098), UINT64_C(0x34ab958a9838cc8a)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x85b4facf9c1d3689), UINT64_C(0xcb546a7567c73376)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x9bcd05f3a43d5e96), UINT64_C(0x34ab958a9838cc8a)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0xbbdf7dfbef3dff97), UINT64_C(0x34ab958a9838cc8a)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x201278084b00a101), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x5f796794fe30882a), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(-A, IMP(UINT64_C(0x4f2c879614d2146f), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(~A, IMP(UINT64_C(0x4f2c879614d2146e), UINT64_C(0xffffffffffffffff)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(INT64_C(-1)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0xdbf1f6043a3ea098), UINT64_C(0x34ab958a9838cc8a)));
  EXPECT_EQ(A >> 10, IMP(UINT64_C(0xffec34de1a7acb7a), UINT64_C(0xe440000000000000)));
  EXPECT_EQ(A << 10, IMP(UINT64_C(0x4de1a7acb7ae4400), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0xdbf1f6043a3ea098), UINT64_C(0x34ab958a9838cc8a)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x85b4facf9c1d3689), UINT64_C(0xcb546a7567c73376)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x9bcd05f3a43d5e96), UINT64_C(0x34ab958a9838cc8a)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0xbbdf7dfbef3dff97), UINT64_C(0x34ab958a9838cc8a)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x201278084b00a101), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x5f796794fe30882a), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T /= B), IMP(INT64_C(-1)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0xdbf1f6043a3ea098), UINT64_C(0x34ab958a9838cc8a)));
  EXPECT_EQ((T = A, T >>= 10), IMP(UINT64_C(0xffec34de1a7acb7a), UINT64_C(0xe440000000000000)));
  EXPECT_EQ((T = A, T <<= 10), IMP(UINT64_C(0x4de1a7acb7ae4400), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 10), IMP(UINT64_C(0x002c34de1a7acb7a), UINT64_C(0xe440000000000000)));
  EXPECT_EQ(rol(A, 10), IMP(UINT64_C(0x4de1a7acb7ae4400), UINT64_C(0x00000000000002c3)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0xb0d37869eb2deb91), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, IMP(UINT64_C(0xb0d37869eb2deb91), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0xb0d37869eb2deb91), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, IMP(UINT64_C(0xb0d37869eb2deb90), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0xb0d37869eb2deb91), UINT64_C(0x0000000000000001)));
  EXPECT_EQ(T, IMP(UINT64_C(0xb0d37869eb2deb91), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0xb0d37869eb2deb90), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ(T, IMP(UINT64_C(0xb0d37869eb2deb90), UINT64_C(0xffffffffffffffff)));
}

TEST(u128, autogen_basic_12) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(UINT64_C(0x09b2d0bac0b5d12b), UINT64_C(0x8dd6b6678c289ade));
  const IMP B = IMP(UINT64_C(0x15df51ef3dbbd8cc), UINT64_C(0x0000000000000000));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x1f9222a9fe71a9f7), UINT64_C(0x8dd6b6678c289ade)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0xf3d37ecb82f9f85f), UINT64_C(0x8dd6b6678c289ade)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x1c6d8155fd0e09e7), UINT64_C(0x8dd6b6678c289ade)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0x1dffd1fffdbfd9ef), UINT64_C(0x8dd6b6678c289ade)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x019250aa00b1d008), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0xeb549a97f930b8e8), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(-A, IMP(UINT64_C(0xf64d2f453f4a2ed4), UINT64_C(0x7229499873d76522)));
  EXPECT_EQ(~A, IMP(UINT64_C(0xf64d2f453f4a2ed4), UINT64_C(0x7229499873d76521)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x09b2d0bac0b5d12b), UINT64_C(0x8dd6b6678c289ade)));
  EXPECT_EQ(A >> 0, IMP(UINT64_C(0x09b2d0bac0b5d12b), UINT64_C(0x8dd6b6678c289ade)));
  EXPECT_EQ(A << 0, IMP(UINT64_C(0x09b2d0bac0b5d12b), UINT64_C(0x8dd6b6678c289ade)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x1f9222a9fe71a9f7), UINT64_C(0x8dd6b6678c289ade)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0xf3d37ecb82f9f85f), UINT64_C(0x8dd6b6678c289ade)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x1c6d8155fd0e09e7), UINT64_C(0x8dd6b6678c289ade)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0x1dffd1fffdbfd9ef), UINT64_C(0x8dd6b6678c289ade)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x019250aa00b1d008), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0xeb549a97f930b8e8), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x09b2d0bac0b5d12b), UINT64_C(0x8dd6b6678c289ade)));
  EXPECT_EQ((T = A, T >>= 0), IMP(UINT64_C(0x09b2d0bac0b5d12b), UINT64_C(0x8dd6b6678c289ade)));
  EXPECT_EQ((T = A, T <<= 0), IMP(UINT64_C(0x09b2d0bac0b5d12b), UINT64_C(0x8dd6b6678c289ade)));
  EXPECT_EQ(ror(A, 0), IMP(UINT64_C(0x09b2d0bac0b5d12b), UINT64_C(0x8dd6b6678c289ade)));
  EXPECT_EQ(rol(A, 0), IMP(UINT64_C(0x09b2d0bac0b5d12b), UINT64_C(0x8dd6b6678c289ade)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0x09b2d0bac0b5d12b), UINT64_C(0x8dd6b6678c289ade)));
  EXPECT_EQ(T, IMP(UINT64_C(0x09b2d0bac0b5d12b), UINT64_C(0x8dd6b6678c289adf)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0x09b2d0bac0b5d12b), UINT64_C(0x8dd6b6678c289ade)));
  EXPECT_EQ(T, IMP(UINT64_C(0x09b2d0bac0b5d12b), UINT64_C(0x8dd6b6678c289add)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0x09b2d0bac0b5d12b), UINT64_C(0x8dd6b6678c289adf)));
  EXPECT_EQ(T, IMP(UINT64_C(0x09b2d0bac0b5d12b), UINT64_C(0x8dd6b6678c289adf)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0x09b2d0bac0b5d12b), UINT64_C(0x8dd6b6678c289add)));
  EXPECT_EQ(T, IMP(UINT64_C(0x09b2d0bac0b5d12b), UINT64_C(0x8dd6b6678c289add)));
}

TEST(i128, autogen_basic_13) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(UINT64_C(0x09b2d0bac0b5d12b), UINT64_C(0x8dd6b6678c289ade));
  const IMP B = IMP(UINT64_C(0x15df51ef3dbbd8cc), UINT64_C(0x0000000000000000));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x1f9222a9fe71a9f7), UINT64_C(0x8dd6b6678c289ade)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0xf3d37ecb82f9f85f), UINT64_C(0x8dd6b6678c289ade)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x1c6d8155fd0e09e7), UINT64_C(0x8dd6b6678c289ade)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0x1dffd1fffdbfd9ef), UINT64_C(0x8dd6b6678c289ade)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x019250aa00b1d008), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0xeb549a97f930b8e8), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(-A, IMP(UINT64_C(0xf64d2f453f4a2ed4), UINT64_C(0x7229499873d76522)));
  EXPECT_EQ(~A, IMP(UINT64_C(0xf64d2f453f4a2ed4), UINT64_C(0x7229499873d76521)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(INT64_C(0)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x09b2d0bac0b5d12b), UINT64_C(0x8dd6b6678c289ade)));
  EXPECT_EQ(A >> 0, IMP(UINT64_C(0x09b2d0bac0b5d12b), UINT64_C(0x8dd6b6678c289ade)));
  EXPECT_EQ(A << 0, IMP(UINT64_C(0x09b2d0bac0b5d12b), UINT64_C(0x8dd6b6678c289ade)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x1f9222a9fe71a9f7), UINT64_C(0x8dd6b6678c289ade)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0xf3d37ecb82f9f85f), UINT64_C(0x8dd6b6678c289ade)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x1c6d8155fd0e09e7), UINT64_C(0x8dd6b6678c289ade)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0x1dffd1fffdbfd9ef), UINT64_C(0x8dd6b6678c289ade)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x019250aa00b1d008), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0xeb549a97f930b8e8), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T /= B), IMP(INT64_C(0)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x09b2d0bac0b5d12b), UINT64_C(0x8dd6b6678c289ade)));
  EXPECT_EQ((T = A, T >>= 0), IMP(UINT64_C(0x09b2d0bac0b5d12b), UINT64_C(0x8dd6b6678c289ade)));
  EXPECT_EQ((T = A, T <<= 0), IMP(UINT64_C(0x09b2d0bac0b5d12b), UINT64_C(0x8dd6b6678c289ade)));
  EXPECT_EQ(ror(A, 0), IMP(UINT64_C(0x09b2d0bac0b5d12b), UINT64_C(0x8dd6b6678c289ade)));
  EXPECT_EQ(rol(A, 0), IMP(UINT64_C(0x09b2d0bac0b5d12b), UINT64_C(0x8dd6b6678c289ade)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0x09b2d0bac0b5d12b), UINT64_C(0x8dd6b6678c289ade)));
  EXPECT_EQ(T, IMP(UINT64_C(0x09b2d0bac0b5d12b), UINT64_C(0x8dd6b6678c289adf)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0x09b2d0bac0b5d12b), UINT64_C(0x8dd6b6678c289ade)));
  EXPECT_EQ(T, IMP(UINT64_C(0x09b2d0bac0b5d12b), UINT64_C(0x8dd6b6678c289add)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0x09b2d0bac0b5d12b), UINT64_C(0x8dd6b6678c289adf)));
  EXPECT_EQ(T, IMP(UINT64_C(0x09b2d0bac0b5d12b), UINT64_C(0x8dd6b6678c289adf)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0x09b2d0bac0b5d12b), UINT64_C(0x8dd6b6678c289add)));
  EXPECT_EQ(T, IMP(UINT64_C(0x09b2d0bac0b5d12b), UINT64_C(0x8dd6b6678c289add)));
}

TEST(u128, autogen_basic_14) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(UINT64_C(0x0d242fcce6596740), UINT64_C(0x0000000000000000));
  const IMP B = IMP(UINT64_C(0x161e5cdcca94dc55), UINT64_C(0x0000000000000000));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x23428ca9b0ee4395), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0xf705d2f01bc48aeb), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x1b3a73102ccdbb15), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0x1f3e7fdceeddff55), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x04040cccc2104440), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(-A, IMP(UINT64_C(0xf2dbd03319a698c0), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(~A, IMP(UINT64_C(0xf2dbd03319a698bf), UINT64_C(0xffffffffffffffff)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x0d242fcce6596740), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A >> 0, IMP(UINT64_C(0x0d242fcce6596740), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A << 0, IMP(UINT64_C(0x0d242fcce6596740), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x23428ca9b0ee4395), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0xf705d2f01bc48aeb), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x1b3a73102ccdbb15), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0x1f3e7fdceeddff55), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x04040cccc2104440), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x0d242fcce6596740), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T >>= 0), IMP(UINT64_C(0x0d242fcce6596740), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T <<= 0), IMP(UINT64_C(0x0d242fcce6596740), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 0), IMP(UINT64_C(0x0d242fcce6596740), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(rol(A, 0), IMP(UINT64_C(0x0d242fcce6596740), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0x0d242fcce6596740), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, IMP(UINT64_C(0x0d242fcce6596740), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0x0d242fcce6596740), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, IMP(UINT64_C(0x0d242fcce659673f), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0x0d242fcce6596740), UINT64_C(0x0000000000000001)));
  EXPECT_EQ(T, IMP(UINT64_C(0x0d242fcce6596740), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0x0d242fcce659673f), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ(T, IMP(UINT64_C(0x0d242fcce659673f), UINT64_C(0xffffffffffffffff)));
}

TEST(i128, autogen_basic_15) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(UINT64_C(0x0d242fcce6596740), UINT64_C(0x0000000000000000));
  const IMP B = IMP(UINT64_C(0x161e5cdcca94dc55), UINT64_C(0x0000000000000000));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x23428ca9b0ee4395), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0xf705d2f01bc48aeb), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x1b3a73102ccdbb15), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0x1f3e7fdceeddff55), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x04040cccc2104440), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A * B, IMP(INT64_C(0)));
  EXPECT_EQ(-A, IMP(UINT64_C(0xf2dbd03319a698c0), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(~A, IMP(UINT64_C(0xf2dbd03319a698bf), UINT64_C(0xffffffffffffffff)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(INT64_C(0)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x0d242fcce6596740), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A >> 0, IMP(UINT64_C(0x0d242fcce6596740), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A << 0, IMP(UINT64_C(0x0d242fcce6596740), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x23428ca9b0ee4395), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0xf705d2f01bc48aeb), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x1b3a73102ccdbb15), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0x1f3e7fdceeddff55), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x04040cccc2104440), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T *= B), IMP(INT64_C(0)));
  EXPECT_EQ((T = A, T /= B), IMP(INT64_C(0)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x0d242fcce6596740), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T >>= 0), IMP(UINT64_C(0x0d242fcce6596740), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T <<= 0), IMP(UINT64_C(0x0d242fcce6596740), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 0), IMP(UINT64_C(0x0d242fcce6596740), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(rol(A, 0), IMP(UINT64_C(0x0d242fcce6596740), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0x0d242fcce6596740), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, IMP(UINT64_C(0x0d242fcce6596740), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0x0d242fcce6596740), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, IMP(UINT64_C(0x0d242fcce659673f), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0x0d242fcce6596740), UINT64_C(0x0000000000000001)));
  EXPECT_EQ(T, IMP(UINT64_C(0x0d242fcce6596740), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0x0d242fcce659673f), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ(T, IMP(UINT64_C(0x0d242fcce659673f), UINT64_C(0xffffffffffffffff)));
}

TEST(u128, autogen_basic_16) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(UINT64_C(0x2f424311839fa672), UINT64_C(0x0000000000000000));
  const IMP B = IMP(UINT64_C(0x5d1d4bb9e797678f));
  IMP T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x2f424311839fa672), UINT64_C(0x5d1d4bb9e797678f)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x2f424311839fa671), UINT64_C(0xa2e2b44618689871)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x2f424311839fa672), UINT64_C(0x5d1d4bb9e797678f)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0x2f424311839fa672), UINT64_C(0x5d1d4bb9e797678f)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x9525e37bcd63d7ae), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(-A, IMP(UINT64_C(0xd0bdbcee7c60598e), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(~A, IMP(UINT64_C(0xd0bdbcee7c60598d), UINT64_C(0xffffffffffffffff)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x81edd05d468246f3)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x3c39790f14599943)));
  EXPECT_EQ(A >> 15, IMP(UINT64_C(0x00005e848623073f), UINT64_C(0x4ce4000000000000)));
  EXPECT_EQ(A << 15, IMP(UINT64_C(0x2188c1cfd3390000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x2f424311839fa672), UINT64_C(0x5d1d4bb9e797678f)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x2f424311839fa671), UINT64_C(0xa2e2b44618689871)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x2f424311839fa672), UINT64_C(0x5d1d4bb9e797678f)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0x2f424311839fa672), UINT64_C(0x5d1d4bb9e797678f)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x9525e37bcd63d7ae), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x81edd05d468246f3)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x3c39790f14599943)));
  EXPECT_EQ((T = A, T >>= 15), IMP(UINT64_C(0x00005e848623073f), UINT64_C(0x4ce4000000000000)));
  EXPECT_EQ((T = A, T <<= 15), IMP(UINT64_C(0x2188c1cfd3390000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 15), IMP(UINT64_C(0x00005e848623073f), UINT64_C(0x4ce4000000000000)));
  EXPECT_EQ(rol(A, 15), IMP(UINT64_C(0x2188c1cfd3390000), UINT64_C(0x00000000000017a1)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0x2f424311839fa672), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, IMP(UINT64_C(0x2f424311839fa672), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0x2f424311839fa672), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, IMP(UINT64_C(0x2f424311839fa671), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0x2f424311839fa672), UINT64_C(0x0000000000000001)));
  EXPECT_EQ(T, IMP(UINT64_C(0x2f424311839fa672), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0x2f424311839fa671), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ(T, IMP(UINT64_C(0x2f424311839fa671), UINT64_C(0xffffffffffffffff)));
}

TEST(i128, autogen_basic_17) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(UINT64_C(0x2f424311839fa672), UINT64_C(0x0000000000000000));
  const IMP B = IMP(INT64_C(6709602281678399375));
  IMP T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x2f424311839fa672), UINT64_C(0x5d1d4bb9e797678f)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x2f424311839fa671), UINT64_C(0xa2e2b44618689871)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x2f424311839fa672), UINT64_C(0x5d1d4bb9e797678f)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0x2f424311839fa672), UINT64_C(0x5d1d4bb9e797678f)));
  EXPECT_EQ(A & B, IMP(INT64_C(0)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x9525e37bcd63d7ae), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(-A, IMP(UINT64_C(0xd0bdbcee7c60598e), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(~A, IMP(UINT64_C(0xd0bdbcee7c60598d), UINT64_C(0xffffffffffffffff)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x0000000000000000), UINT64_C(0x81edd05d468246f3)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(INT64_C(4339632821621070147)));
  EXPECT_EQ(A >> 15, IMP(UINT64_C(0x00005e848623073f), UINT64_C(0x4ce4000000000000)));
  EXPECT_EQ(A << 15, IMP(UINT64_C(0x2188c1cfd3390000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x2f424311839fa672), UINT64_C(0x5d1d4bb9e797678f)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x2f424311839fa671), UINT64_C(0xa2e2b44618689871)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x2f424311839fa672), UINT64_C(0x5d1d4bb9e797678f)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0x2f424311839fa672), UINT64_C(0x5d1d4bb9e797678f)));
  EXPECT_EQ((T = A, T &= B), IMP(INT64_C(0)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x9525e37bcd63d7ae), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x0000000000000000), UINT64_C(0x81edd05d468246f3)));
  EXPECT_EQ((T = A, T %= B), IMP(INT64_C(4339632821621070147)));
  EXPECT_EQ((T = A, T >>= 15), IMP(UINT64_C(0x00005e848623073f), UINT64_C(0x4ce4000000000000)));
  EXPECT_EQ((T = A, T <<= 15), IMP(UINT64_C(0x2188c1cfd3390000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 15), IMP(UINT64_C(0x00005e848623073f), UINT64_C(0x4ce4000000000000)));
  EXPECT_EQ(rol(A, 15), IMP(UINT64_C(0x2188c1cfd3390000), UINT64_C(0x00000000000017a1)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0x2f424311839fa672), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, IMP(UINT64_C(0x2f424311839fa672), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0x2f424311839fa672), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, IMP(UINT64_C(0x2f424311839fa671), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0x2f424311839fa672), UINT64_C(0x0000000000000001)));
  EXPECT_EQ(T, IMP(UINT64_C(0x2f424311839fa672), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0x2f424311839fa671), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ(T, IMP(UINT64_C(0x2f424311839fa671), UINT64_C(0xffffffffffffffff)));
}

TEST(u128, autogen_basic_18) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(UINT64_C(0x971ff8eda031f4f4));
  const IMP B = IMP(UINT64_C(0xa5fce13f06645159), UINT64_C(0x0000000000000000));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0xa5fce13f06645159), UINT64_C(0x971ff8eda031f4f4)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x5a031ec0f99baea7), UINT64_C(0x971ff8eda031f4f4)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0xa5fce13f06645159), UINT64_C(0x971ff8eda031f4f4)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0xa5fce13f06645159), UINT64_C(0x971ff8eda031f4f4)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x2f3a3599e72f5cd4), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(-A, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x68e007125fce0b0c)));
  EXPECT_EQ(~A, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x68e007125fce0b0b)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x971ff8eda031f4f4)));
  EXPECT_EQ(A >> 0, IMP(UINT64_C(0x971ff8eda031f4f4)));
  EXPECT_EQ(A << 0, IMP(UINT64_C(0x971ff8eda031f4f4)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0xa5fce13f06645159), UINT64_C(0x971ff8eda031f4f4)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x5a031ec0f99baea7), UINT64_C(0x971ff8eda031f4f4)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0xa5fce13f06645159), UINT64_C(0x971ff8eda031f4f4)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0xa5fce13f06645159), UINT64_C(0x971ff8eda031f4f4)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x2f3a3599e72f5cd4), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x971ff8eda031f4f4)));
  EXPECT_EQ((T = A, T >>= 0), IMP(UINT64_C(0x971ff8eda031f4f4)));
  EXPECT_EQ((T = A, T <<= 0), IMP(UINT64_C(0x971ff8eda031f4f4)));
  EXPECT_EQ(ror(A, 0), IMP(UINT64_C(0x971ff8eda031f4f4)));
  EXPECT_EQ(rol(A, 0), IMP(UINT64_C(0x971ff8eda031f4f4)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0x971ff8eda031f4f4)));
  EXPECT_EQ(T, IMP(UINT64_C(0x971ff8eda031f4f5)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0x971ff8eda031f4f4)));
  EXPECT_EQ(T, IMP(UINT64_C(0x971ff8eda031f4f3)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0x971ff8eda031f4f5)));
  EXPECT_EQ(T, IMP(UINT64_C(0x971ff8eda031f4f5)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0x971ff8eda031f4f3)));
  EXPECT_EQ(T, IMP(UINT64_C(0x971ff8eda031f4f3)));
}

TEST(i128, autogen_basic_19) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(UINT64_C(0x0000000000000000), UINT64_C(0x971ff8eda031f4f4));
  const IMP B = IMP(UINT64_C(0xa5fce13f06645159), UINT64_C(0x0000000000000000));
  IMP T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0xa5fce13f06645159), UINT64_C(0x971ff8eda031f4f4)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x5a031ec0f99baea7), UINT64_C(0x971ff8eda031f4f4)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0xa5fce13f06645159), UINT64_C(0x971ff8eda031f4f4)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0xa5fce13f06645159), UINT64_C(0x971ff8eda031f4f4)));
  EXPECT_EQ(A & B, IMP(INT64_C(0)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x2f3a3599e72f5cd4), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(-A, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x68e007125fce0b0c)));
  EXPECT_EQ(~A, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x68e007125fce0b0b)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(INT64_C(0)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x0000000000000000), UINT64_C(0x971ff8eda031f4f4)));
  EXPECT_EQ(A >> 0, IMP(UINT64_C(0x0000000000000000), UINT64_C(0x971ff8eda031f4f4)));
  EXPECT_EQ(A << 0, IMP(UINT64_C(0x0000000000000000), UINT64_C(0x971ff8eda031f4f4)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0xa5fce13f06645159), UINT64_C(0x971ff8eda031f4f4)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x5a031ec0f99baea7), UINT64_C(0x971ff8eda031f4f4)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0xa5fce13f06645159), UINT64_C(0x971ff8eda031f4f4)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0xa5fce13f06645159), UINT64_C(0x971ff8eda031f4f4)));
  EXPECT_EQ((T = A, T &= B), IMP(INT64_C(0)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x2f3a3599e72f5cd4), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T /= B), IMP(INT64_C(0)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x0000000000000000), UINT64_C(0x971ff8eda031f4f4)));
  EXPECT_EQ((T = A, T >>= 0), IMP(UINT64_C(0x0000000000000000), UINT64_C(0x971ff8eda031f4f4)));
  EXPECT_EQ((T = A, T <<= 0), IMP(UINT64_C(0x0000000000000000), UINT64_C(0x971ff8eda031f4f4)));
  EXPECT_EQ(ror(A, 0), IMP(UINT64_C(0x0000000000000000), UINT64_C(0x971ff8eda031f4f4)));
  EXPECT_EQ(rol(A, 0), IMP(UINT64_C(0x0000000000000000), UINT64_C(0x971ff8eda031f4f4)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0x0000000000000000), UINT64_C(0x971ff8eda031f4f4)));
  EXPECT_EQ(T, IMP(UINT64_C(0x0000000000000000), UINT64_C(0x971ff8eda031f4f5)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0x0000000000000000), UINT64_C(0x971ff8eda031f4f4)));
  EXPECT_EQ(T, IMP(UINT64_C(0x0000000000000000), UINT64_C(0x971ff8eda031f4f3)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0x0000000000000000), UINT64_C(0x971ff8eda031f4f5)));
  EXPECT_EQ(T, IMP(UINT64_C(0x0000000000000000), UINT64_C(0x971ff8eda031f4f5)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0x0000000000000000), UINT64_C(0x971ff8eda031f4f3)));
  EXPECT_EQ(T, IMP(UINT64_C(0x0000000000000000), UINT64_C(0x971ff8eda031f4f3)));
}

TEST(u128, autogen_basic_20) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x7b8b31d35bcc0e9d));
  const IMP B = IMP(UINT64_C(0x1673d06ceab89c33), UINT64_C(0x4b51a3dedd074346));
  IMP T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x1673d06ceab89c32), UINT64_C(0xc6dcd5b238d351e3)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0xe98c2f93154763cc), UINT64_C(0x30398df47ec4cb57)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0xe98c2f93154763cc), UINT64_C(0x30da920d86cb4ddb)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x7bdbb3dfdfcf4fdf)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x1673d06ceab89c33), UINT64_C(0x4b0121d259040204)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0xde6e7d27a63d99df), UINT64_C(0x30103f2970ea15ee)));
  EXPECT_EQ(-A, IMP(UINT64_C(0x8474ce2ca433f163)));
  EXPECT_EQ(~A, IMP(UINT64_C(0x8474ce2ca433f162)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x000000000000000b)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x09060b51ea1149cb), UINT64_C(0x3f09273fdc7c2a9b)));
  EXPECT_EQ(A >> 70, IMP(UINT64_C(0x03ffffffffffffff)));
  EXPECT_EQ(A << 70, IMP(UINT64_C(0xe2cc74d6f303a740), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x1673d06ceab89c32), UINT64_C(0xc6dcd5b238d351e3)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0xe98c2f93154763cc), UINT64_C(0x30398df47ec4cb57)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0xe98c2f93154763cc), UINT64_C(0x30da920d86cb4ddb)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x7bdbb3dfdfcf4fdf)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x1673d06ceab89c33), UINT64_C(0x4b0121d259040204)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0xde6e7d27a63d99df), UINT64_C(0x30103f2970ea15ee)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x000000000000000b)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x09060b51ea1149cb), UINT64_C(0x3f09273fdc7c2a9b)));
  EXPECT_EQ((T = A, T >>= 70), IMP(UINT64_C(0x03ffffffffffffff)));
  EXPECT_EQ((T = A, T <<= 70), IMP(UINT64_C(0xe2cc74d6f303a740), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 70), IMP(UINT64_C(0xfdee2cc74d6f303a), UINT64_C(0x77ffffffffffffff)));
  EXPECT_EQ(rol(A, 70), IMP(UINT64_C(0xe2cc74d6f303a77f), UINT64_C(0xffffffffffffffde)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x7b8b31d35bcc0e9d)));
  EXPECT_EQ(T, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x7b8b31d35bcc0e9e)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x7b8b31d35bcc0e9d)));
  EXPECT_EQ(T, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x7b8b31d35bcc0e9c)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x7b8b31d35bcc0e9e)));
  EXPECT_EQ(T, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x7b8b31d35bcc0e9e)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x7b8b31d35bcc0e9c)));
  EXPECT_EQ(T, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x7b8b31d35bcc0e9c)));
}

TEST(i128, autogen_basic_21) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x7b8b31d35bcc0e9d));
  const IMP B = IMP(UINT64_C(0x1673d06ceab89c33), UINT64_C(0x4b51a3dedd074346));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x1673d06ceab89c32), UINT64_C(0xc6dcd5b238d351e3)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0xe98c2f93154763cc), UINT64_C(0x30398df47ec4cb57)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0xe98c2f93154763cc), UINT64_C(0x30da920d86cb4ddb)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x7bdbb3dfdfcf4fdf)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x1673d06ceab89c33), UINT64_C(0x4b0121d259040204)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0xde6e7d27a63d99df), UINT64_C(0x30103f2970ea15ee)));
  EXPECT_EQ(-A, IMP(UINT64_C(0x0000000000000000), UINT64_C(0x8474ce2ca433f163)));
  EXPECT_EQ(~A, IMP(UINT64_C(0x0000000000000000), UINT64_C(0x8474ce2ca433f162)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(INT64_C(0)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x7b8b31d35bcc0e9d)));
  EXPECT_EQ(A >> 70, IMP(INT64_C(-1)));
  EXPECT_EQ(A << 70, IMP(UINT64_C(0xe2cc74d6f303a740), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x1673d06ceab89c32), UINT64_C(0xc6dcd5b238d351e3)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0xe98c2f93154763cc), UINT64_C(0x30398df47ec4cb57)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0xe98c2f93154763cc), UINT64_C(0x30da920d86cb4ddb)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x7bdbb3dfdfcf4fdf)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x1673d06ceab89c33), UINT64_C(0x4b0121d259040204)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0xde6e7d27a63d99df), UINT64_C(0x30103f2970ea15ee)));
  EXPECT_EQ((T = A, T /= B), IMP(INT64_C(0)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x7b8b31d35bcc0e9d)));
  EXPECT_EQ((T = A, T >>= 70), IMP(INT64_C(-1)));
  EXPECT_EQ((T = A, T <<= 70), IMP(UINT64_C(0xe2cc74d6f303a740), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 70), IMP(UINT64_C(0xfdee2cc74d6f303a), UINT64_C(0x77ffffffffffffff)));
  EXPECT_EQ(rol(A, 70), IMP(UINT64_C(0xe2cc74d6f303a77f), UINT64_C(0xffffffffffffffde)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x7b8b31d35bcc0e9d)));
  EXPECT_EQ(T, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x7b8b31d35bcc0e9e)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x7b8b31d35bcc0e9d)));
  EXPECT_EQ(T, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x7b8b31d35bcc0e9c)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x7b8b31d35bcc0e9e)));
  EXPECT_EQ(T, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x7b8b31d35bcc0e9e)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x7b8b31d35bcc0e9c)));
  EXPECT_EQ(T, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x7b8b31d35bcc0e9c)));
}

TEST(u128, autogen_basic_22) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(UINT64_C(0xb8e2a6ddbe06d317), UINT64_C(0x92ca796d71b6055a));
  const IMP B = IMP(-INT64_C(3390278251880974872));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0xb8e2a6ddbe06d317), UINT64_C(0x63bdc951e49cfb42)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0xb8e2a6ddbe06d317), UINT64_C(0xc1d72988fecf0f72)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x471d592241f92ce8), UINT64_C(0x423936890350f0b2)));
  EXPECT_EQ(A | B, IMP(-INT64_C(3243858448760769030)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0xb8e2a6ddbe06d317), UINT64_C(0x90c2496470a60548)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x6e03daaada1ea32b), UINT64_C(0x48dc8b1522effb90)));
  EXPECT_EQ(-A, IMP(UINT64_C(0x471d592241f92ce8), UINT64_C(0x6d3586928e49faa6)));
  EXPECT_EQ(~A, IMP(UINT64_C(0x471d592241f92ce8), UINT64_C(0x6d3586928e49faa5)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0xb8e2a6ddbe06d317), UINT64_C(0x92ca796d71b6055a)));
  EXPECT_EQ(A >> 104, IMP(UINT64_C(0x0000000000b8e2a6)));
  EXPECT_EQ(A << 104, IMP(UINT64_C(0xb6055a0000000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0xb8e2a6ddbe06d317), UINT64_C(0x63bdc951e49cfb42)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0xb8e2a6ddbe06d317), UINT64_C(0xc1d72988fecf0f72)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x471d592241f92ce8), UINT64_C(0x423936890350f0b2)));
  EXPECT_EQ((T = A, T |= B), IMP(-INT64_C(3243858448760769030)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0xb8e2a6ddbe06d317), UINT64_C(0x90c2496470a60548)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x6e03daaada1ea32b), UINT64_C(0x48dc8b1522effb90)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0xb8e2a6ddbe06d317), UINT64_C(0x92ca796d71b6055a)));
  EXPECT_EQ((T = A, T >>= 104), IMP(UINT64_C(0x0000000000b8e2a6)));
  EXPECT_EQ((T = A, T <<= 104), IMP(UINT64_C(0xb6055a0000000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 104), IMP(UINT64_C(0xddbe06d31792ca79), UINT64_C(0x6d71b6055ab8e2a6)));
  EXPECT_EQ(rol(A, 104), IMP(UINT64_C(0xb6055ab8e2a6ddbe), UINT64_C(0x06d31792ca796d71)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0xb8e2a6ddbe06d317), UINT64_C(0x92ca796d71b6055a)));
  EXPECT_EQ(T, IMP(UINT64_C(0xb8e2a6ddbe06d317), UINT64_C(0x92ca796d71b6055b)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0xb8e2a6ddbe06d317), UINT64_C(0x92ca796d71b6055a)));
  EXPECT_EQ(T, IMP(UINT64_C(0xb8e2a6ddbe06d317), UINT64_C(0x92ca796d71b60559)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0xb8e2a6ddbe06d317), UINT64_C(0x92ca796d71b6055b)));
  EXPECT_EQ(T, IMP(UINT64_C(0xb8e2a6ddbe06d317), UINT64_C(0x92ca796d71b6055b)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0xb8e2a6ddbe06d317), UINT64_C(0x92ca796d71b60559)));
  EXPECT_EQ(T, IMP(UINT64_C(0xb8e2a6ddbe06d317), UINT64_C(0x92ca796d71b60559)));
}

TEST(i128, autogen_basic_23) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(UINT64_C(0xb8e2a6ddbe06d317), UINT64_C(0x92ca796d71b6055a));
  const IMP B = IMP(INT64_C(-3390278251880974872));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0xb8e2a6ddbe06d317), UINT64_C(0x63bdc951e49cfb42)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0xb8e2a6ddbe06d317), UINT64_C(0xc1d72988fecf0f72)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x471d592241f92ce8), UINT64_C(0x423936890350f0b2)));
  EXPECT_EQ(A | B, IMP(INT64_C(-3243858448760769030)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0xb8e2a6ddbe06d317), UINT64_C(0x90c2496470a60548)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x6e03daaada1ea32b), UINT64_C(0x48dc8b1522effb90)));
  EXPECT_EQ(-A, IMP(UINT64_C(0x471d592241f92ce8), UINT64_C(0x6d3586928e49faa6)));
  EXPECT_EQ(~A, IMP(UINT64_C(0x471d592241f92ce8), UINT64_C(0x6d3586928e49faa5)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x0000000000000001), UINT64_C(0x82f096b9fa7f01ee)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(INT64_C(-1423668309438529622)));
  EXPECT_EQ(A >> 104, IMP(INT64_C(-4660570)));
  EXPECT_EQ(A << 104, IMP(UINT64_C(0xb6055a0000000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0xb8e2a6ddbe06d317), UINT64_C(0x63bdc951e49cfb42)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0xb8e2a6ddbe06d317), UINT64_C(0xc1d72988fecf0f72)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x471d592241f92ce8), UINT64_C(0x423936890350f0b2)));
  EXPECT_EQ((T = A, T |= B), IMP(INT64_C(-3243858448760769030)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0xb8e2a6ddbe06d317), UINT64_C(0x90c2496470a60548)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x6e03daaada1ea32b), UINT64_C(0x48dc8b1522effb90)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x0000000000000001), UINT64_C(0x82f096b9fa7f01ee)));
  EXPECT_EQ((T = A, T %= B), IMP(INT64_C(-1423668309438529622)));
  EXPECT_EQ((T = A, T >>= 104), IMP(INT64_C(-4660570)));
  EXPECT_EQ((T = A, T <<= 104), IMP(UINT64_C(0xb6055a0000000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 104), IMP(UINT64_C(0xddbe06d31792ca79), UINT64_C(0x6d71b6055ab8e2a6)));
  EXPECT_EQ(rol(A, 104), IMP(UINT64_C(0xb6055ab8e2a6ddbe), UINT64_C(0x06d31792ca796d71)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0xb8e2a6ddbe06d317), UINT64_C(0x92ca796d71b6055a)));
  EXPECT_EQ(T, IMP(UINT64_C(0xb8e2a6ddbe06d317), UINT64_C(0x92ca796d71b6055b)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0xb8e2a6ddbe06d317), UINT64_C(0x92ca796d71b6055a)));
  EXPECT_EQ(T, IMP(UINT64_C(0xb8e2a6ddbe06d317), UINT64_C(0x92ca796d71b60559)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0xb8e2a6ddbe06d317), UINT64_C(0x92ca796d71b6055b)));
  EXPECT_EQ(T, IMP(UINT64_C(0xb8e2a6ddbe06d317), UINT64_C(0x92ca796d71b6055b)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0xb8e2a6ddbe06d317), UINT64_C(0x92ca796d71b60559)));
  EXPECT_EQ(T, IMP(UINT64_C(0xb8e2a6ddbe06d317), UINT64_C(0x92ca796d71b60559)));
}

TEST(u128, autogen_basic_24) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x5eb7762c5c491e1c));
  const IMP B = IMP(-INT64_C(7358300703146633183));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0xfffffffffffffffe), UINT64_C(0xf89986ab72b9363d)));
  EXPECT_EQ(A - B, IMP(-INT64_C(4263389677360708101)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0xc75566534a39063d)));
  EXPECT_EQ(A | B, IMP(-INT64_C(2308245994586169795)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x18a2102c14401800)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x4055c305e04b986d), UINT64_C(0x96f0bcd6547f819c)));
  EXPECT_EQ(-A, IMP(UINT64_C(0xa14889d3a3b6e1e4)));
  EXPECT_EQ(~A, IMP(UINT64_C(0xa14889d3a3b6e1e3)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x5eb7762c5c491e1c)));
  EXPECT_EQ(A >> 33, IMP(UINT64_C(0x000000007fffffff), UINT64_C(0xffffffffaf5bbb16)));
  EXPECT_EQ(A << 33, IMP(UINT64_C(0xfffffffebd6eec58), UINT64_C(0xb8923c3800000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0xfffffffffffffffe), UINT64_C(0xf89986ab72b9363d)));
  EXPECT_EQ((T = A, T -= B), IMP(-INT64_C(4263389677360708101)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0xc75566534a39063d)));
  EXPECT_EQ((T = A, T |= B), IMP(-INT64_C(2308245994586169795)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x18a2102c14401800)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x4055c305e04b986d), UINT64_C(0x96f0bcd6547f819c)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x5eb7762c5c491e1c)));
  EXPECT_EQ((T = A, T >>= 33), IMP(UINT64_C(0x000000007fffffff), UINT64_C(0xffffffffaf5bbb16)));
  EXPECT_EQ((T = A, T <<= 33), IMP(UINT64_C(0xfffffffebd6eec58), UINT64_C(0xb8923c3800000000)));
  EXPECT_EQ(ror(A, 33), IMP(UINT64_C(0x2e248f0e7fffffff), UINT64_C(0xffffffffaf5bbb16)));
  EXPECT_EQ(rol(A, 33), IMP(UINT64_C(0xfffffffebd6eec58), UINT64_C(0xb8923c39ffffffff)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x5eb7762c5c491e1c)));
  EXPECT_EQ(T, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x5eb7762c5c491e1d)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x5eb7762c5c491e1c)));
  EXPECT_EQ(T, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x5eb7762c5c491e1b)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x5eb7762c5c491e1d)));
  EXPECT_EQ(T, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x5eb7762c5c491e1d)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x5eb7762c5c491e1b)));
  EXPECT_EQ(T, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x5eb7762c5c491e1b)));
}

TEST(i128, autogen_basic_25) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x5eb7762c5c491e1c));
  const IMP B = IMP(INT64_C(-7358300703146633183));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0xfffffffffffffffe), UINT64_C(0xf89986ab72b9363d)));
  EXPECT_EQ(A - B, IMP(INT64_C(-4263389677360708101)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x0000000000000000), UINT64_C(0xc75566534a39063d)));
  EXPECT_EQ(A | B, IMP(INT64_C(-2308245994586169795)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x18a2102c14401800)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x4055c305e04b986d), UINT64_C(0x96f0bcd6547f819c)));
  EXPECT_EQ(-A, IMP(UINT64_C(0x0000000000000000), UINT64_C(0xa14889d3a3b6e1e4)));
  EXPECT_EQ(~A, IMP(UINT64_C(0x0000000000000000), UINT64_C(0xa14889d3a3b6e1e3)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(INT64_C(1)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(INT64_C(-4263389677360708101)));
  EXPECT_EQ(A >> 33, IMP(INT64_C(-1352942826)));
  EXPECT_EQ(A << 33, IMP(UINT64_C(0xfffffffebd6eec58), UINT64_C(0xb8923c3800000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0xfffffffffffffffe), UINT64_C(0xf89986ab72b9363d)));
  EXPECT_EQ((T = A, T -= B), IMP(INT64_C(-4263389677360708101)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x0000000000000000), UINT64_C(0xc75566534a39063d)));
  EXPECT_EQ((T = A, T |= B), IMP(INT64_C(-2308245994586169795)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x18a2102c14401800)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x4055c305e04b986d), UINT64_C(0x96f0bcd6547f819c)));
  EXPECT_EQ((T = A, T /= B), IMP(INT64_C(1)));
  EXPECT_EQ((T = A, T %= B), IMP(INT64_C(-4263389677360708101)));
  EXPECT_EQ((T = A, T >>= 33), IMP(INT64_C(-1352942826)));
  EXPECT_EQ((T = A, T <<= 33), IMP(UINT64_C(0xfffffffebd6eec58), UINT64_C(0xb8923c3800000000)));
  EXPECT_EQ(ror(A, 33), IMP(UINT64_C(0x2e248f0e7fffffff), UINT64_C(0xffffffffaf5bbb16)));
  EXPECT_EQ(rol(A, 33), IMP(UINT64_C(0xfffffffebd6eec58), UINT64_C(0xb8923c39ffffffff)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x5eb7762c5c491e1c)));
  EXPECT_EQ(T, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x5eb7762c5c491e1d)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x5eb7762c5c491e1c)));
  EXPECT_EQ(T, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x5eb7762c5c491e1b)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x5eb7762c5c491e1d)));
  EXPECT_EQ(T, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x5eb7762c5c491e1d)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x5eb7762c5c491e1b)));
  EXPECT_EQ(T, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x5eb7762c5c491e1b)));
}

TEST(u128, autogen_basic_26) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(-INT64_C(3058794632746647378));
  const IMP B = IMP(UINT64_C(0xc185a97e4c7db03b));
  IMP T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x9712a3fb26c170e9)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x140750fe8dc61073)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x14095302963e7095)));
  EXPECT_EQ(A | B, IMP(-INT64_C(3058512049597321025)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0xc184a87c4841802a)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0xdfe91efb637b31fa), UINT64_C(0xf367f4c19f0b081a)));
  EXPECT_EQ(-A, IMP(UINT64_C(0x2a73058325bc3f52)));
  EXPECT_EQ(~A, IMP(UINT64_C(0x2a73058325bc3f51)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x0000000000000001), UINT64_C(0x52a60ca029d68e19)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x0294638ee5ead0eb)));
  EXPECT_EQ(A >> 59, IMP(UINT64_C(0x000000000000001f), UINT64_C(0xfffffffffffffffa)));
  EXPECT_EQ(A << 59, IMP(UINT64_C(0xfeac67d3e6d21e05), UINT64_C(0x7000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x9712a3fb26c170e9)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x140750fe8dc61073)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x14095302963e7095)));
  EXPECT_EQ((T = A, T |= B), IMP(-INT64_C(3058512049597321025)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0xc184a87c4841802a)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0xdfe91efb637b31fa), UINT64_C(0xf367f4c19f0b081a)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x0000000000000001), UINT64_C(0x52a60ca029d68e19)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x0294638ee5ead0eb)));
  EXPECT_EQ((T = A, T >>= 59), IMP(UINT64_C(0x000000000000001f), UINT64_C(0xfffffffffffffffa)));
  EXPECT_EQ((T = A, T <<= 59), IMP(UINT64_C(0xfeac67d3e6d21e05), UINT64_C(0x7000000000000000)));
  EXPECT_EQ(ror(A, 59), IMP(UINT64_C(0xb19f4f9b487815df), UINT64_C(0xfffffffffffffffa)));
  EXPECT_EQ(rol(A, 59), IMP(UINT64_C(0xfeac67d3e6d21e05), UINT64_C(0x77ffffffffffffff)));
  EXPECT_EQ((T = A, T++), IMP(-INT64_C(3058794632746647378)));
  EXPECT_EQ(T, IMP(-INT64_C(3058794632746647377)));
  EXPECT_EQ((T = A, T--), IMP(-INT64_C(3058794632746647378)));
  EXPECT_EQ(T, IMP(-INT64_C(3058794632746647379)));
  EXPECT_EQ((T = A, ++T), IMP(-INT64_C(3058794632746647377)));
  EXPECT_EQ(T, IMP(-INT64_C(3058794632746647377)));
  EXPECT_EQ((T = A, --T), IMP(-INT64_C(3058794632746647379)));
  EXPECT_EQ(T, IMP(-INT64_C(3058794632746647379)));
}

TEST(i128, autogen_basic_27) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(INT64_C(-3058794632746647378));
  const IMP B = IMP(UINT64_C(0x0000000000000000), UINT64_C(0xc185a97e4c7db03b));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x0000000000000000), UINT64_C(0x9712a3fb26c170e9)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x140750fe8dc61073)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x14095302963e7095)));
  EXPECT_EQ(A | B, IMP(INT64_C(-3058512049597321025)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x0000000000000000), UINT64_C(0xc184a87c4841802a)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0xdfe91efb637b31fa), UINT64_C(0xf367f4c19f0b081a)));
  EXPECT_EQ(-A, IMP(INT64_C(3058794632746647378)));
  EXPECT_EQ(~A, IMP(INT64_C(3058794632746647377)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(INT64_C(0)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(INT64_C(-3058794632746647378)));
  EXPECT_EQ(A >> 59, IMP(INT64_C(-6)));
  EXPECT_EQ(A << 59, IMP(UINT64_C(0xfeac67d3e6d21e05), UINT64_C(0x7000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x0000000000000000), UINT64_C(0x9712a3fb26c170e9)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x140750fe8dc61073)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x14095302963e7095)));
  EXPECT_EQ((T = A, T |= B), IMP(INT64_C(-3058512049597321025)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x0000000000000000), UINT64_C(0xc184a87c4841802a)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0xdfe91efb637b31fa), UINT64_C(0xf367f4c19f0b081a)));
  EXPECT_EQ((T = A, T /= B), IMP(INT64_C(0)));
  EXPECT_EQ((T = A, T %= B), IMP(INT64_C(-3058794632746647378)));
  EXPECT_EQ((T = A, T >>= 59), IMP(INT64_C(-6)));
  EXPECT_EQ((T = A, T <<= 59), IMP(UINT64_C(0xfeac67d3e6d21e05), UINT64_C(0x7000000000000000)));
  EXPECT_EQ(ror(A, 59), IMP(UINT64_C(0xb19f4f9b487815df), UINT64_C(0xfffffffffffffffa)));
  EXPECT_EQ(rol(A, 59), IMP(UINT64_C(0xfeac67d3e6d21e05), UINT64_C(0x77ffffffffffffff)));
  EXPECT_EQ((T = A, T++), IMP(INT64_C(-3058794632746647378)));
  EXPECT_EQ(T, IMP(INT64_C(-3058794632746647377)));
  EXPECT_EQ((T = A, T--), IMP(INT64_C(-3058794632746647378)));
  EXPECT_EQ(T, IMP(INT64_C(-3058794632746647379)));
  EXPECT_EQ((T = A, ++T), IMP(INT64_C(-3058794632746647377)));
  EXPECT_EQ(T, IMP(INT64_C(-3058794632746647377)));
  EXPECT_EQ((T = A, --T), IMP(INT64_C(-3058794632746647379)));
  EXPECT_EQ(T, IMP(INT64_C(-3058794632746647379)));
}

TEST(u128, autogen_basic_28) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(UINT64_C(0xaf10b6e944cc6190));
  const IMP B = IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x222550f1bf2cb1e5));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(-INT64_C(3371498633794350219)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x0000000000000001), UINT64_C(0x8ceb65f7859fafab)));
  EXPECT_EQ(A ^ B, IMP(-INT64_C(8271452145616629643)));
  EXPECT_EQ(A | B, IMP(-INT64_C(5821475389705489931)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x220010e1040c2180)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x68490626b0aed507), UINT64_C(0x7f8c0fb70f07d5d0)));
  EXPECT_EQ(-A, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x50ef4916bb339e70)));
  EXPECT_EQ(~A, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x50ef4916bb339e6f)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0xaf10b6e944cc6190)));
  EXPECT_EQ(A >> 101, IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A << 101, IMP(UINT64_C(0x998c320000000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(-INT64_C(3371498633794350219)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x0000000000000001), UINT64_C(0x8ceb65f7859fafab)));
  EXPECT_EQ((T = A, T ^= B), IMP(-INT64_C(8271452145616629643)));
  EXPECT_EQ((T = A, T |= B), IMP(-INT64_C(5821475389705489931)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x220010e1040c2180)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x68490626b0aed507), UINT64_C(0x7f8c0fb70f07d5d0)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0xaf10b6e944cc6190)));
  EXPECT_EQ((T = A, T >>= 101), IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T <<= 101), IMP(UINT64_C(0x998c320000000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 101), IMP(UINT64_C(0x00000000057885b7), UINT64_C(0x4a26630c80000000)));
  EXPECT_EQ(rol(A, 101), IMP(UINT64_C(0x998c320000000000), UINT64_C(0x00000015e216dd28)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0xaf10b6e944cc6190)));
  EXPECT_EQ(T, IMP(UINT64_C(0xaf10b6e944cc6191)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0xaf10b6e944cc6190)));
  EXPECT_EQ(T, IMP(UINT64_C(0xaf10b6e944cc618f)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0xaf10b6e944cc6191)));
  EXPECT_EQ(T, IMP(UINT64_C(0xaf10b6e944cc6191)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0xaf10b6e944cc618f)));
  EXPECT_EQ(T, IMP(UINT64_C(0xaf10b6e944cc618f)));
}

TEST(i128, autogen_basic_29) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(UINT64_C(0x0000000000000000), UINT64_C(0xaf10b6e944cc6190));
  const IMP B = IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x222550f1bf2cb1e5));
  IMP T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, IMP(INT64_C(-3371498633794350219)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x0000000000000001), UINT64_C(0x8ceb65f7859fafab)));
  EXPECT_EQ(A ^ B, IMP(INT64_C(-8271452145616629643)));
  EXPECT_EQ(A | B, IMP(INT64_C(-5821475389705489931)));
  EXPECT_EQ(A & B, IMP(INT64_C(2449976755911139712)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x68490626b0aed507), UINT64_C(0x7f8c0fb70f07d5d0)));
  EXPECT_EQ(-A, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x50ef4916bb339e70)));
  EXPECT_EQ(~A, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x50ef4916bb339e6f)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(INT64_C(0)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x0000000000000000), UINT64_C(0xaf10b6e944cc6190)));
  EXPECT_EQ(A >> 101, IMP(INT64_C(0)));
  EXPECT_EQ(A << 101, IMP(UINT64_C(0x998c320000000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(INT64_C(-3371498633794350219)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x0000000000000001), UINT64_C(0x8ceb65f7859fafab)));
  EXPECT_EQ((T = A, T ^= B), IMP(INT64_C(-8271452145616629643)));
  EXPECT_EQ((T = A, T |= B), IMP(INT64_C(-5821475389705489931)));
  EXPECT_EQ((T = A, T &= B), IMP(INT64_C(2449976755911139712)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x68490626b0aed507), UINT64_C(0x7f8c0fb70f07d5d0)));
  EXPECT_EQ((T = A, T /= B), IMP(INT64_C(0)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x0000000000000000), UINT64_C(0xaf10b6e944cc6190)));
  EXPECT_EQ((T = A, T >>= 101), IMP(INT64_C(0)));
  EXPECT_EQ((T = A, T <<= 101), IMP(UINT64_C(0x998c320000000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 101), IMP(UINT64_C(0x00000000057885b7), UINT64_C(0x4a26630c80000000)));
  EXPECT_EQ(rol(A, 101), IMP(UINT64_C(0x998c320000000000), UINT64_C(0x00000015e216dd28)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0x0000000000000000), UINT64_C(0xaf10b6e944cc6190)));
  EXPECT_EQ(T, IMP(UINT64_C(0x0000000000000000), UINT64_C(0xaf10b6e944cc6191)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0x0000000000000000), UINT64_C(0xaf10b6e944cc6190)));
  EXPECT_EQ(T, IMP(UINT64_C(0x0000000000000000), UINT64_C(0xaf10b6e944cc618f)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0x0000000000000000), UINT64_C(0xaf10b6e944cc6191)));
  EXPECT_EQ(T, IMP(UINT64_C(0x0000000000000000), UINT64_C(0xaf10b6e944cc6191)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0x0000000000000000), UINT64_C(0xaf10b6e944cc618f)));
  EXPECT_EQ(T, IMP(UINT64_C(0x0000000000000000), UINT64_C(0xaf10b6e944cc618f)));
}

TEST(u128, autogen_basic_30) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(UINT64_C(0x6920838b501d8942));
  const IMP B = IMP(UINT64_C(0x1e5f79dcfc8b179f));
  IMP T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x877ffd684ca8a0e1)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x4ac109ae539271a3)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x777ffa57ac969edd)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0x7f7ffbdffc9f9fdf)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x0800018850090102)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x0c79048641e9357a), UINT64_C(0x4144f197e8832dfe)));
  EXPECT_EQ(-A, IMP(-INT64_C(7575199207604980034)));
  EXPECT_EQ(~A, IMP(-INT64_C(7575199207604980035)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x0000000000000003)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x0e0215f45a7c4265)));
  EXPECT_EQ(A >> 31, IMP(UINT64_C(0x00000000d2410716)));
  EXPECT_EQ(A << 31, IMP(UINT64_C(0x00000000349041c5), UINT64_C(0xa80ec4a100000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x877ffd684ca8a0e1)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x4ac109ae539271a3)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x777ffa57ac969edd)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0x7f7ffbdffc9f9fdf)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x0800018850090102)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x0c79048641e9357a), UINT64_C(0x4144f197e8832dfe)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x0000000000000003)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x0e0215f45a7c4265)));
  EXPECT_EQ((T = A, T >>= 31), IMP(UINT64_C(0x00000000d2410716)));
  EXPECT_EQ((T = A, T <<= 31), IMP(UINT64_C(0x00000000349041c5), UINT64_C(0xa80ec4a100000000)));
  EXPECT_EQ(ror(A, 31), IMP(UINT64_C(0xa03b128400000000), UINT64_C(0x00000000d2410716)));
  EXPECT_EQ(rol(A, 31), IMP(UINT64_C(0x00000000349041c5), UINT64_C(0xa80ec4a100000000)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0x6920838b501d8942)));
  EXPECT_EQ(T, IMP(UINT64_C(0x6920838b501d8943)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0x6920838b501d8942)));
  EXPECT_EQ(T, IMP(UINT64_C(0x6920838b501d8941)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0x6920838b501d8943)));
  EXPECT_EQ(T, IMP(UINT64_C(0x6920838b501d8943)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0x6920838b501d8941)));
  EXPECT_EQ(T, IMP(UINT64_C(0x6920838b501d8941)));
}

TEST(i128, autogen_basic_31) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(INT64_C(7575199207604980034));
  const IMP B = IMP(INT64_C(2188601933962090399));
  IMP T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x0000000000000000), UINT64_C(0x877ffd684ca8a0e1)));
  EXPECT_EQ(A - B, IMP(INT64_C(5386597273642889635)));
  EXPECT_EQ(A ^ B, IMP(INT64_C(8610876267020328669)));
  EXPECT_EQ(A | B, IMP(INT64_C(9187338704293699551)));
  EXPECT_EQ(A & B, IMP(INT64_C(576462437273370882)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x0c79048641e9357a), UINT64_C(0x4144f197e8832dfe)));
  EXPECT_EQ(-A, IMP(INT64_C(-7575199207604980034)));
  EXPECT_EQ(~A, IMP(INT64_C(-7575199207604980035)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(INT64_C(3)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(INT64_C(1009393405718708837)));
  EXPECT_EQ(A >> 31, IMP(INT64_C(3527477014)));
  EXPECT_EQ(A << 31, IMP(UINT64_C(0x00000000349041c5), UINT64_C(0xa80ec4a100000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x0000000000000000), UINT64_C(0x877ffd684ca8a0e1)));
  EXPECT_EQ((T = A, T -= B), IMP(INT64_C(5386597273642889635)));
  EXPECT_EQ((T = A, T ^= B), IMP(INT64_C(8610876267020328669)));
  EXPECT_EQ((T = A, T |= B), IMP(INT64_C(9187338704293699551)));
  EXPECT_EQ((T = A, T &= B), IMP(INT64_C(576462437273370882)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x0c79048641e9357a), UINT64_C(0x4144f197e8832dfe)));
  EXPECT_EQ((T = A, T /= B), IMP(INT64_C(3)));
  EXPECT_EQ((T = A, T %= B), IMP(INT64_C(1009393405718708837)));
  EXPECT_EQ((T = A, T >>= 31), IMP(INT64_C(3527477014)));
  EXPECT_EQ((T = A, T <<= 31), IMP(UINT64_C(0x00000000349041c5), UINT64_C(0xa80ec4a100000000)));
  EXPECT_EQ(ror(A, 31), IMP(UINT64_C(0xa03b128400000000), UINT64_C(0x00000000d2410716)));
  EXPECT_EQ(rol(A, 31), IMP(UINT64_C(0x00000000349041c5), UINT64_C(0xa80ec4a100000000)));
  EXPECT_EQ((T = A, T++), IMP(INT64_C(7575199207604980034)));
  EXPECT_EQ(T, IMP(INT64_C(7575199207604980035)));
  EXPECT_EQ((T = A, T--), IMP(INT64_C(7575199207604980034)));
  EXPECT_EQ(T, IMP(INT64_C(7575199207604980033)));
  EXPECT_EQ((T = A, ++T), IMP(INT64_C(7575199207604980035)));
  EXPECT_EQ(T, IMP(INT64_C(7575199207604980035)));
  EXPECT_EQ((T = A, --T), IMP(INT64_C(7575199207604980033)));
  EXPECT_EQ(T, IMP(INT64_C(7575199207604980033)));
}

TEST(u128, autogen_basic_32) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(UINT64_C(0xc355b6ce533bf444), UINT64_C(0x0671f76bb2b32d43));
  const IMP B = IMP(UINT64_C(0xf5c326452f1a5fe9));
  IMP T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0xc355b6ce533bf444), UINT64_C(0xfc351db0e1cd8d2c)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0xc355b6ce533bf443), UINT64_C(0x10aed1268398cd5a)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0xc355b6ce533bf444), UINT64_C(0xf3b2d12e9da972aa)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0xc355b6ce533bf444), UINT64_C(0xf7f3f76fbfbb7feb)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x0441264122120d41)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x897d52807dce69a8), UINT64_C(0x6b5658e708ae0efb)));
  EXPECT_EQ(-A, IMP(UINT64_C(0x3caa4931acc40bbb), UINT64_C(0xf98e08944d4cd2bd)));
  EXPECT_EQ(~A, IMP(UINT64_C(0x3caa4931acc40bbb), UINT64_C(0xf98e08944d4cd2bc)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0xcb78cc258407fe6b)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x6a44e7eb1424e8e0)));
  EXPECT_EQ(A >> 105, IMP(UINT64_C(0x000000000061aadb)));
  EXPECT_EQ(A << 105, IMP(UINT64_C(0x665a860000000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0xc355b6ce533bf444), UINT64_C(0xfc351db0e1cd8d2c)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0xc355b6ce533bf443), UINT64_C(0x10aed1268398cd5a)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0xc355b6ce533bf444), UINT64_C(0xf3b2d12e9da972aa)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0xc355b6ce533bf444), UINT64_C(0xf7f3f76fbfbb7feb)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x0441264122120d41)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x897d52807dce69a8), UINT64_C(0x6b5658e708ae0efb)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0xcb78cc258407fe6b)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x6a44e7eb1424e8e0)));
  EXPECT_EQ((T = A, T >>= 105), IMP(UINT64_C(0x000000000061aadb)));
  EXPECT_EQ((T = A, T <<= 105), IMP(UINT64_C(0x665a860000000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 105), IMP(UINT64_C(0x67299dfa220338fb), UINT64_C(0xb5d95996a1e1aadb)));
  EXPECT_EQ(rol(A, 105), IMP(UINT64_C(0x665a8786ab6d9ca6), UINT64_C(0x77e8880ce3eed765)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0xc355b6ce533bf444), UINT64_C(0x0671f76bb2b32d43)));
  EXPECT_EQ(T, IMP(UINT64_C(0xc355b6ce533bf444), UINT64_C(0x0671f76bb2b32d44)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0xc355b6ce533bf444), UINT64_C(0x0671f76bb2b32d43)));
  EXPECT_EQ(T, IMP(UINT64_C(0xc355b6ce533bf444), UINT64_C(0x0671f76bb2b32d42)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0xc355b6ce533bf444), UINT64_C(0x0671f76bb2b32d44)));
  EXPECT_EQ(T, IMP(UINT64_C(0xc355b6ce533bf444), UINT64_C(0x0671f76bb2b32d44)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0xc355b6ce533bf444), UINT64_C(0x0671f76bb2b32d42)));
  EXPECT_EQ(T, IMP(UINT64_C(0xc355b6ce533bf444), UINT64_C(0x0671f76bb2b32d42)));
}

TEST(i128, autogen_basic_33) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(UINT64_C(0xc355b6ce533bf444), UINT64_C(0x0671f76bb2b32d43));
  const IMP B = IMP(UINT64_C(0x0000000000000000), UINT64_C(0xf5c326452f1a5fe9));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0xc355b6ce533bf444), UINT64_C(0xfc351db0e1cd8d2c)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0xc355b6ce533bf443), UINT64_C(0x10aed1268398cd5a)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0xc355b6ce533bf444), UINT64_C(0xf3b2d12e9da972aa)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0xc355b6ce533bf444), UINT64_C(0xf7f3f76fbfbb7feb)));
  EXPECT_EQ(A & B, IMP(INT64_C(306568310824242497)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x897d52807dce69a8), UINT64_C(0x6b5658e708ae0efb)));
  EXPECT_EQ(-A, IMP(UINT64_C(0x3caa4931acc40bbb), UINT64_C(0xf98e08944d4cd2bd)));
  EXPECT_EQ(~A, IMP(UINT64_C(0x3caa4931acc40bbb), UINT64_C(0xf98e08944d4cd2bc)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(INT64_C(-4553485320454234635)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x5b0168d882157e46)));
  EXPECT_EQ(A >> 105, IMP(INT64_C(-1987877)));
  EXPECT_EQ(A << 105, IMP(UINT64_C(0x665a860000000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0xc355b6ce533bf444), UINT64_C(0xfc351db0e1cd8d2c)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0xc355b6ce533bf443), UINT64_C(0x10aed1268398cd5a)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0xc355b6ce533bf444), UINT64_C(0xf3b2d12e9da972aa)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0xc355b6ce533bf444), UINT64_C(0xf7f3f76fbfbb7feb)));
  EXPECT_EQ((T = A, T &= B), IMP(INT64_C(306568310824242497)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x897d52807dce69a8), UINT64_C(0x6b5658e708ae0efb)));
  EXPECT_EQ((T = A, T /= B), IMP(INT64_C(-4553485320454234635)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x5b0168d882157e46)));
  EXPECT_EQ((T = A, T >>= 105), IMP(INT64_C(-1987877)));
  EXPECT_EQ((T = A, T <<= 105), IMP(UINT64_C(0x665a860000000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 105), IMP(UINT64_C(0x67299dfa220338fb), UINT64_C(0xb5d95996a1e1aadb)));
  EXPECT_EQ(rol(A, 105), IMP(UINT64_C(0x665a8786ab6d9ca6), UINT64_C(0x77e8880ce3eed765)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0xc355b6ce533bf444), UINT64_C(0x0671f76bb2b32d43)));
  EXPECT_EQ(T, IMP(UINT64_C(0xc355b6ce533bf444), UINT64_C(0x0671f76bb2b32d44)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0xc355b6ce533bf444), UINT64_C(0x0671f76bb2b32d43)));
  EXPECT_EQ(T, IMP(UINT64_C(0xc355b6ce533bf444), UINT64_C(0x0671f76bb2b32d42)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0xc355b6ce533bf444), UINT64_C(0x0671f76bb2b32d44)));
  EXPECT_EQ(T, IMP(UINT64_C(0xc355b6ce533bf444), UINT64_C(0x0671f76bb2b32d44)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0xc355b6ce533bf444), UINT64_C(0x0671f76bb2b32d42)));
  EXPECT_EQ(T, IMP(UINT64_C(0xc355b6ce533bf444), UINT64_C(0x0671f76bb2b32d42)));
}

TEST(u128, autogen_basic_34) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(UINT64_C(0x9862a2b113ae4a38));
  const IMP B = IMP(UINT64_C(0x455e6b948059b316), UINT64_C(0x18f1d883cad1e62d));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x455e6b948059b316), UINT64_C(0xb1547b34de803065)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0xbaa1946b7fa64cea), UINT64_C(0x7f70ca2d48dc640b)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x455e6b948059b316), UINT64_C(0x80937a32d97fac15)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0x455e6b948059b316), UINT64_C(0x98f3fab3dbffee3d)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x1860808102804228)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0xcad44e0bcb5cd5fb), UINT64_C(0x33218351d4095bd8)));
  EXPECT_EQ(-A, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x679d5d4eec51b5c8)));
  EXPECT_EQ(~A, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x679d5d4eec51b5c7)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x9862a2b113ae4a38)));
  EXPECT_EQ(A >> 45, IMP(UINT64_C(0x000000000004c315)));
  EXPECT_EQ(A << 45, IMP(UINT64_C(0x0000130c54562275), UINT64_C(0xc947000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x455e6b948059b316), UINT64_C(0xb1547b34de803065)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0xbaa1946b7fa64cea), UINT64_C(0x7f70ca2d48dc640b)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x455e6b948059b316), UINT64_C(0x80937a32d97fac15)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0x455e6b948059b316), UINT64_C(0x98f3fab3dbffee3d)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x1860808102804228)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0xcad44e0bcb5cd5fb), UINT64_C(0x33218351d4095bd8)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x9862a2b113ae4a38)));
  EXPECT_EQ((T = A, T >>= 45), IMP(UINT64_C(0x000000000004c315)));
  EXPECT_EQ((T = A, T <<= 45), IMP(UINT64_C(0x0000130c54562275), UINT64_C(0xc947000000000000)));
  EXPECT_EQ(ror(A, 45), IMP(UINT64_C(0x15889d7251c00000), UINT64_C(0x000000000004c315)));
  EXPECT_EQ(rol(A, 45), IMP(UINT64_C(0x0000130c54562275), UINT64_C(0xc947000000000000)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0x9862a2b113ae4a38)));
  EXPECT_EQ(T, IMP(UINT64_C(0x9862a2b113ae4a39)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0x9862a2b113ae4a38)));
  EXPECT_EQ(T, IMP(UINT64_C(0x9862a2b113ae4a37)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0x9862a2b113ae4a39)));
  EXPECT_EQ(T, IMP(UINT64_C(0x9862a2b113ae4a39)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0x9862a2b113ae4a37)));
  EXPECT_EQ(T, IMP(UINT64_C(0x9862a2b113ae4a37)));
}

TEST(i128, autogen_basic_35) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(UINT64_C(0x0000000000000000), UINT64_C(0x9862a2b113ae4a38));
  const IMP B = IMP(UINT64_C(0x455e6b948059b316), UINT64_C(0x18f1d883cad1e62d));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x455e6b948059b316), UINT64_C(0xb1547b34de803065)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0xbaa1946b7fa64cea), UINT64_C(0x7f70ca2d48dc640b)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x455e6b948059b316), UINT64_C(0x80937a32d97fac15)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0x455e6b948059b316), UINT64_C(0x98f3fab3dbffee3d)));
  EXPECT_EQ(A & B, IMP(INT64_C(1756545146255589928)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0xcad44e0bcb5cd5fb), UINT64_C(0x33218351d4095bd8)));
  EXPECT_EQ(-A, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x679d5d4eec51b5c8)));
  EXPECT_EQ(~A, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x679d5d4eec51b5c7)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(INT64_C(0)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x0000000000000000), UINT64_C(0x9862a2b113ae4a38)));
  EXPECT_EQ(A >> 45, IMP(INT64_C(312085)));
  EXPECT_EQ(A << 45, IMP(UINT64_C(0x0000130c54562275), UINT64_C(0xc947000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x455e6b948059b316), UINT64_C(0xb1547b34de803065)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0xbaa1946b7fa64cea), UINT64_C(0x7f70ca2d48dc640b)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x455e6b948059b316), UINT64_C(0x80937a32d97fac15)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0x455e6b948059b316), UINT64_C(0x98f3fab3dbffee3d)));
  EXPECT_EQ((T = A, T &= B), IMP(INT64_C(1756545146255589928)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0xcad44e0bcb5cd5fb), UINT64_C(0x33218351d4095bd8)));
  EXPECT_EQ((T = A, T /= B), IMP(INT64_C(0)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x0000000000000000), UINT64_C(0x9862a2b113ae4a38)));
  EXPECT_EQ((T = A, T >>= 45), IMP(INT64_C(312085)));
  EXPECT_EQ((T = A, T <<= 45), IMP(UINT64_C(0x0000130c54562275), UINT64_C(0xc947000000000000)));
  EXPECT_EQ(ror(A, 45), IMP(UINT64_C(0x15889d7251c00000), UINT64_C(0x000000000004c315)));
  EXPECT_EQ(rol(A, 45), IMP(UINT64_C(0x0000130c54562275), UINT64_C(0xc947000000000000)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0x0000000000000000), UINT64_C(0x9862a2b113ae4a38)));
  EXPECT_EQ(T, IMP(UINT64_C(0x0000000000000000), UINT64_C(0x9862a2b113ae4a39)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0x0000000000000000), UINT64_C(0x9862a2b113ae4a38)));
  EXPECT_EQ(T, IMP(UINT64_C(0x0000000000000000), UINT64_C(0x9862a2b113ae4a37)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0x0000000000000000), UINT64_C(0x9862a2b113ae4a39)));
  EXPECT_EQ(T, IMP(UINT64_C(0x0000000000000000), UINT64_C(0x9862a2b113ae4a39)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0x0000000000000000), UINT64_C(0x9862a2b113ae4a37)));
  EXPECT_EQ(T, IMP(UINT64_C(0x0000000000000000), UINT64_C(0x9862a2b113ae4a37)));
}

TEST(u128, autogen_basic_36) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(UINT64_C(0xe2a19ed6e9f048b1), UINT64_C(0x554afee025b9176c));
  const IMP B = IMP(UINT64_C(0x5f128bb4b6745527), UINT64_C(0x40e28f9ee3cbd22a));
  IMP T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x41b42a8ba0649dd8), UINT64_C(0x962d8e7f0984e996)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x838f1322337bf38a), UINT64_C(0x14686f4141ed4542)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0xbdb315625f841d96), UINT64_C(0x15a8717ec672c546)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0xffb39ff6fff45db7), UINT64_C(0x55eafffee7fbd76e)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x42008a94a0704021), UINT64_C(0x40428e8021891228)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0xe257f04e8d2f0ba7), UINT64_C(0xba3c81ea5c386fb8)));
  EXPECT_EQ(-A, IMP(UINT64_C(0x1d5e6129160fb74e), UINT64_C(0xaab5011fda46e894)));
  EXPECT_EQ(~A, IMP(UINT64_C(0x1d5e6129160fb74e), UINT64_C(0xaab5011fda46e893)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x0000000000000002)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x247c876d7d079e62), UINT64_C(0xd385dfa25e217318)));
  EXPECT_EQ(A >> 42, IMP(UINT64_C(0x000000000038a867), UINT64_C(0xb5ba7c122c5552bf)));
  EXPECT_EQ(A << 42, IMP(UINT64_C(0xc122c5552bfb8096), UINT64_C(0xe45db00000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x41b42a8ba0649dd8), UINT64_C(0x962d8e7f0984e996)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x838f1322337bf38a), UINT64_C(0x14686f4141ed4542)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0xbdb315625f841d96), UINT64_C(0x15a8717ec672c546)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0xffb39ff6fff45db7), UINT64_C(0x55eafffee7fbd76e)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x42008a94a0704021), UINT64_C(0x40428e8021891228)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0xe257f04e8d2f0ba7), UINT64_C(0xba3c81ea5c386fb8)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x0000000000000002)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x247c876d7d079e62), UINT64_C(0xd385dfa25e217318)));
  EXPECT_EQ((T = A, T >>= 42), IMP(UINT64_C(0x000000000038a867), UINT64_C(0xb5ba7c122c5552bf)));
  EXPECT_EQ((T = A, T <<= 42), IMP(UINT64_C(0xc122c5552bfb8096), UINT64_C(0xe45db00000000000)));
  EXPECT_EQ(ror(A, 42), IMP(UINT64_C(0xb8096e45db38a867), UINT64_C(0xb5ba7c122c5552bf)));
  EXPECT_EQ(rol(A, 42), IMP(UINT64_C(0xc122c5552bfb8096), UINT64_C(0xe45db38a867b5ba7)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0xe2a19ed6e9f048b1), UINT64_C(0x554afee025b9176c)));
  EXPECT_EQ(T, IMP(UINT64_C(0xe2a19ed6e9f048b1), UINT64_C(0x554afee025b9176d)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0xe2a19ed6e9f048b1), UINT64_C(0x554afee025b9176c)));
  EXPECT_EQ(T, IMP(UINT64_C(0xe2a19ed6e9f048b1), UINT64_C(0x554afee025b9176b)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0xe2a19ed6e9f048b1), UINT64_C(0x554afee025b9176d)));
  EXPECT_EQ(T, IMP(UINT64_C(0xe2a19ed6e9f048b1), UINT64_C(0x554afee025b9176d)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0xe2a19ed6e9f048b1), UINT64_C(0x554afee025b9176b)));
  EXPECT_EQ(T, IMP(UINT64_C(0xe2a19ed6e9f048b1), UINT64_C(0x554afee025b9176b)));
}

TEST(i128, autogen_basic_37) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(UINT64_C(0xe2a19ed6e9f048b1), UINT64_C(0x554afee025b9176c));
  const IMP B = IMP(UINT64_C(0x5f128bb4b6745527), UINT64_C(0x40e28f9ee3cbd22a));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x41b42a8ba0649dd8), UINT64_C(0x962d8e7f0984e996)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x838f1322337bf38a), UINT64_C(0x14686f4141ed4542)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0xbdb315625f841d96), UINT64_C(0x15a8717ec672c546)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0xffb39ff6fff45db7), UINT64_C(0x55eafffee7fbd76e)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x42008a94a0704021), UINT64_C(0x40428e8021891228)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0xe257f04e8d2f0ba7), UINT64_C(0xba3c81ea5c386fb8)));
  EXPECT_EQ(-A, IMP(UINT64_C(0x1d5e6129160fb74e), UINT64_C(0xaab5011fda46e894)));
  EXPECT_EQ(~A, IMP(UINT64_C(0x1d5e6129160fb74e), UINT64_C(0xaab5011fda46e893)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(INT64_C(0)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0xe2a19ed6e9f048b1), UINT64_C(0x554afee025b9176c)));
  EXPECT_EQ(A >> 42, IMP(UINT64_C(0xfffffffffff8a867), UINT64_C(0xb5ba7c122c5552bf)));
  EXPECT_EQ(A << 42, IMP(UINT64_C(0xc122c5552bfb8096), UINT64_C(0xe45db00000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x41b42a8ba0649dd8), UINT64_C(0x962d8e7f0984e996)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x838f1322337bf38a), UINT64_C(0x14686f4141ed4542)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0xbdb315625f841d96), UINT64_C(0x15a8717ec672c546)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0xffb39ff6fff45db7), UINT64_C(0x55eafffee7fbd76e)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x42008a94a0704021), UINT64_C(0x40428e8021891228)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0xe257f04e8d2f0ba7), UINT64_C(0xba3c81ea5c386fb8)));
  EXPECT_EQ((T = A, T /= B), IMP(INT64_C(0)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0xe2a19ed6e9f048b1), UINT64_C(0x554afee025b9176c)));
  EXPECT_EQ((T = A, T >>= 42), IMP(UINT64_C(0xfffffffffff8a867), UINT64_C(0xb5ba7c122c5552bf)));
  EXPECT_EQ((T = A, T <<= 42), IMP(UINT64_C(0xc122c5552bfb8096), UINT64_C(0xe45db00000000000)));
  EXPECT_EQ(ror(A, 42), IMP(UINT64_C(0xb8096e45db38a867), UINT64_C(0xb5ba7c122c5552bf)));
  EXPECT_EQ(rol(A, 42), IMP(UINT64_C(0xc122c5552bfb8096), UINT64_C(0xe45db38a867b5ba7)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0xe2a19ed6e9f048b1), UINT64_C(0x554afee025b9176c)));
  EXPECT_EQ(T, IMP(UINT64_C(0xe2a19ed6e9f048b1), UINT64_C(0x554afee025b9176d)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0xe2a19ed6e9f048b1), UINT64_C(0x554afee025b9176c)));
  EXPECT_EQ(T, IMP(UINT64_C(0xe2a19ed6e9f048b1), UINT64_C(0x554afee025b9176b)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0xe2a19ed6e9f048b1), UINT64_C(0x554afee025b9176d)));
  EXPECT_EQ(T, IMP(UINT64_C(0xe2a19ed6e9f048b1), UINT64_C(0x554afee025b9176d)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0xe2a19ed6e9f048b1), UINT64_C(0x554afee025b9176b)));
  EXPECT_EQ(T, IMP(UINT64_C(0xe2a19ed6e9f048b1), UINT64_C(0x554afee025b9176b)));
}

TEST(u128, autogen_basic_38) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(UINT64_C(0xfd39ee37aedacb75), UINT64_C(0x6119fc5765e54fe0));
  const IMP B = IMP(UINT64_C(0xbf5671471d6b334b), UINT64_C(0xff001f657058ba7e));
  IMP T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0xbc905f7ecc45fec1), UINT64_C(0x601a1bbcd63e0a5e)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x3de37cf0916f9829), UINT64_C(0x6219dcf1f58c9562)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x426f9f70b3b1f83e), UINT64_C(0x9e19e33215bdf59e)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0xff7fff77bffbfb7f), UINT64_C(0xff19ff7775fdfffe)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0xbd1060070c4a0341), UINT64_C(0x61001c4560400a60)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0xcef9d605215ec0a9), UINT64_C(0xbee5b03237e61040)));
  EXPECT_EQ(-A, IMP(UINT64_C(0x02c611c85125348a), UINT64_C(0x9ee603a89a1ab020)));
  EXPECT_EQ(~A, IMP(UINT64_C(0x02c611c85125348a), UINT64_C(0x9ee603a89a1ab01f)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x0000000000000001)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x3de37cf0916f9829), UINT64_C(0x6219dcf1f58c9562)));
  EXPECT_EQ(A >> 126, IMP(UINT64_C(0x0000000000000003)));
  EXPECT_EQ(A << 126, IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0xbc905f7ecc45fec1), UINT64_C(0x601a1bbcd63e0a5e)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x3de37cf0916f9829), UINT64_C(0x6219dcf1f58c9562)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x426f9f70b3b1f83e), UINT64_C(0x9e19e33215bdf59e)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0xff7fff77bffbfb7f), UINT64_C(0xff19ff7775fdfffe)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0xbd1060070c4a0341), UINT64_C(0x61001c4560400a60)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0xcef9d605215ec0a9), UINT64_C(0xbee5b03237e61040)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x3de37cf0916f9829), UINT64_C(0x6219dcf1f58c9562)));
  EXPECT_EQ((T = A, T >>= 126), IMP(UINT64_C(0x0000000000000003)));
  EXPECT_EQ((T = A, T <<= 126), IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 126), IMP(UINT64_C(0xf4e7b8debb6b2dd5), UINT64_C(0x8467f15d97953f83)));
  EXPECT_EQ(rol(A, 126), IMP(UINT64_C(0x3f4e7b8debb6b2dd), UINT64_C(0x58467f15d97953f8)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0xfd39ee37aedacb75), UINT64_C(0x6119fc5765e54fe0)));
  EXPECT_EQ(T, IMP(UINT64_C(0xfd39ee37aedacb75), UINT64_C(0x6119fc5765e54fe1)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0xfd39ee37aedacb75), UINT64_C(0x6119fc5765e54fe0)));
  EXPECT_EQ(T, IMP(UINT64_C(0xfd39ee37aedacb75), UINT64_C(0x6119fc5765e54fdf)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0xfd39ee37aedacb75), UINT64_C(0x6119fc5765e54fe1)));
  EXPECT_EQ(T, IMP(UINT64_C(0xfd39ee37aedacb75), UINT64_C(0x6119fc5765e54fe1)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0xfd39ee37aedacb75), UINT64_C(0x6119fc5765e54fdf)));
  EXPECT_EQ(T, IMP(UINT64_C(0xfd39ee37aedacb75), UINT64_C(0x6119fc5765e54fdf)));
}

TEST(i128, autogen_basic_39) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(UINT64_C(0xfd39ee37aedacb75), UINT64_C(0x6119fc5765e54fe0));
  const IMP B = IMP(UINT64_C(0xbf5671471d6b334b), UINT64_C(0xff001f657058ba7e));
  IMP T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0xbc905f7ecc45fec1), UINT64_C(0x601a1bbcd63e0a5e)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x3de37cf0916f9829), UINT64_C(0x6219dcf1f58c9562)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x426f9f70b3b1f83e), UINT64_C(0x9e19e33215bdf59e)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0xff7fff77bffbfb7f), UINT64_C(0xff19ff7775fdfffe)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0xbd1060070c4a0341), UINT64_C(0x61001c4560400a60)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0xcef9d605215ec0a9), UINT64_C(0xbee5b03237e61040)));
  EXPECT_EQ(-A, IMP(UINT64_C(0x02c611c85125348a), UINT64_C(0x9ee603a89a1ab020)));
  EXPECT_EQ(~A, IMP(UINT64_C(0x02c611c85125348a), UINT64_C(0x9ee603a89a1ab01f)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(INT64_C(0)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0xfd39ee37aedacb75), UINT64_C(0x6119fc5765e54fe0)));
  EXPECT_EQ(A >> 126, IMP(INT64_C(-1)));
  EXPECT_EQ(A << 126, IMP(INT64_C(0)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0xbc905f7ecc45fec1), UINT64_C(0x601a1bbcd63e0a5e)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x3de37cf0916f9829), UINT64_C(0x6219dcf1f58c9562)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x426f9f70b3b1f83e), UINT64_C(0x9e19e33215bdf59e)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0xff7fff77bffbfb7f), UINT64_C(0xff19ff7775fdfffe)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0xbd1060070c4a0341), UINT64_C(0x61001c4560400a60)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0xcef9d605215ec0a9), UINT64_C(0xbee5b03237e61040)));
  EXPECT_EQ((T = A, T /= B), IMP(INT64_C(0)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0xfd39ee37aedacb75), UINT64_C(0x6119fc5765e54fe0)));
  EXPECT_EQ((T = A, T >>= 126), IMP(INT64_C(-1)));
  EXPECT_EQ((T = A, T <<= 126), IMP(INT64_C(0)));
  EXPECT_EQ(ror(A, 126), IMP(UINT64_C(0xf4e7b8debb6b2dd5), UINT64_C(0x8467f15d97953f83)));
  EXPECT_EQ(rol(A, 126), IMP(UINT64_C(0x3f4e7b8debb6b2dd), UINT64_C(0x58467f15d97953f8)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0xfd39ee37aedacb75), UINT64_C(0x6119fc5765e54fe0)));
  EXPECT_EQ(T, IMP(UINT64_C(0xfd39ee37aedacb75), UINT64_C(0x6119fc5765e54fe1)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0xfd39ee37aedacb75), UINT64_C(0x6119fc5765e54fe0)));
  EXPECT_EQ(T, IMP(UINT64_C(0xfd39ee37aedacb75), UINT64_C(0x6119fc5765e54fdf)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0xfd39ee37aedacb75), UINT64_C(0x6119fc5765e54fe1)));
  EXPECT_EQ(T, IMP(UINT64_C(0xfd39ee37aedacb75), UINT64_C(0x6119fc5765e54fe1)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0xfd39ee37aedacb75), UINT64_C(0x6119fc5765e54fdf)));
  EXPECT_EQ(T, IMP(UINT64_C(0xfd39ee37aedacb75), UINT64_C(0x6119fc5765e54fdf)));
}

TEST(u128, autogen_basic_40) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(UINT64_C(0x942cd098d2c2f279), UINT64_C(0x0000000000000000));
  const IMP B = IMP(UINT64_C(0x9a351ef6a0b6abaf), UINT64_C(0x9d1805a0b78a8012));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x2e61ef8f73799e28), UINT64_C(0x9d1805a0b78a8012)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0xf9f7b1a2320c46c9), UINT64_C(0x62e7fa5f48757fee)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x0e19ce6e727459d6), UINT64_C(0x9d1805a0b78a8012)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0x9e3ddefef2f6fbff), UINT64_C(0x9d1805a0b78a8012)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x902410908082a229), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0xfd69f52b7f2b8c82), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(-A, IMP(UINT64_C(0x6bd32f672d3d0d87), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(~A, IMP(UINT64_C(0x6bd32f672d3d0d86), UINT64_C(0xffffffffffffffff)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x942cd098d2c2f279), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A >> 18, IMP(UINT64_C(0x0000250b342634b0), UINT64_C(0xbc9e400000000000)));
  EXPECT_EQ(A << 18, IMP(UINT64_C(0x42634b0bc9e40000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x2e61ef8f73799e28), UINT64_C(0x9d1805a0b78a8012)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0xf9f7b1a2320c46c9), UINT64_C(0x62e7fa5f48757fee)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x0e19ce6e727459d6), UINT64_C(0x9d1805a0b78a8012)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0x9e3ddefef2f6fbff), UINT64_C(0x9d1805a0b78a8012)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x902410908082a229), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0xfd69f52b7f2b8c82), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x942cd098d2c2f279), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T >>= 18), IMP(UINT64_C(0x0000250b342634b0), UINT64_C(0xbc9e400000000000)));
  EXPECT_EQ((T = A, T <<= 18), IMP(UINT64_C(0x42634b0bc9e40000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 18), IMP(UINT64_C(0x0000250b342634b0), UINT64_C(0xbc9e400000000000)));
  EXPECT_EQ(rol(A, 18), IMP(UINT64_C(0x42634b0bc9e40000), UINT64_C(0x00000000000250b3)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0x942cd098d2c2f279), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, IMP(UINT64_C(0x942cd098d2c2f279), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0x942cd098d2c2f279), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, IMP(UINT64_C(0x942cd098d2c2f278), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0x942cd098d2c2f279), UINT64_C(0x0000000000000001)));
  EXPECT_EQ(T, IMP(UINT64_C(0x942cd098d2c2f279), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0x942cd098d2c2f278), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ(T, IMP(UINT64_C(0x942cd098d2c2f278), UINT64_C(0xffffffffffffffff)));
}

TEST(i128, autogen_basic_41) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(UINT64_C(0x942cd098d2c2f279), UINT64_C(0x0000000000000000));
  const IMP B = IMP(UINT64_C(0x9a351ef6a0b6abaf), UINT64_C(0x9d1805a0b78a8012));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x2e61ef8f73799e28), UINT64_C(0x9d1805a0b78a8012)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0xf9f7b1a2320c46c9), UINT64_C(0x62e7fa5f48757fee)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x0e19ce6e727459d6), UINT64_C(0x9d1805a0b78a8012)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0x9e3ddefef2f6fbff), UINT64_C(0x9d1805a0b78a8012)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x902410908082a229), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0xfd69f52b7f2b8c82), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(-A, IMP(UINT64_C(0x6bd32f672d3d0d87), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(~A, IMP(UINT64_C(0x6bd32f672d3d0d86), UINT64_C(0xffffffffffffffff)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(INT64_C(1)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0xf9f7b1a2320c46c9), UINT64_C(0x62e7fa5f48757fee)));
  EXPECT_EQ(A >> 18, IMP(UINT64_C(0xffffe50b342634b0), UINT64_C(0xbc9e400000000000)));
  EXPECT_EQ(A << 18, IMP(UINT64_C(0x42634b0bc9e40000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x2e61ef8f73799e28), UINT64_C(0x9d1805a0b78a8012)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0xf9f7b1a2320c46c9), UINT64_C(0x62e7fa5f48757fee)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x0e19ce6e727459d6), UINT64_C(0x9d1805a0b78a8012)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0x9e3ddefef2f6fbff), UINT64_C(0x9d1805a0b78a8012)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x902410908082a229), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0xfd69f52b7f2b8c82), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T /= B), IMP(INT64_C(1)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0xf9f7b1a2320c46c9), UINT64_C(0x62e7fa5f48757fee)));
  EXPECT_EQ((T = A, T >>= 18), IMP(UINT64_C(0xffffe50b342634b0), UINT64_C(0xbc9e400000000000)));
  EXPECT_EQ((T = A, T <<= 18), IMP(UINT64_C(0x42634b0bc9e40000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 18), IMP(UINT64_C(0x0000250b342634b0), UINT64_C(0xbc9e400000000000)));
  EXPECT_EQ(rol(A, 18), IMP(UINT64_C(0x42634b0bc9e40000), UINT64_C(0x00000000000250b3)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0x942cd098d2c2f279), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, IMP(UINT64_C(0x942cd098d2c2f279), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0x942cd098d2c2f279), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, IMP(UINT64_C(0x942cd098d2c2f278), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0x942cd098d2c2f279), UINT64_C(0x0000000000000001)));
  EXPECT_EQ(T, IMP(UINT64_C(0x942cd098d2c2f279), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0x942cd098d2c2f278), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ(T, IMP(UINT64_C(0x942cd098d2c2f278), UINT64_C(0xffffffffffffffff)));
}

TEST(u128, autogen_basic_42) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(UINT64_C(0xa036d601009be253), UINT64_C(0x1ff81f7bc66476e6));
  const IMP B = IMP(UINT64_C(0x4e8f75a2c6632794), UINT64_C(0x0000000000000000));
  IMP T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0xeec64ba3c6ff09e7), UINT64_C(0x1ff81f7bc66476e6)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x51a7605e3a38babf), UINT64_C(0x1ff81f7bc66476e6)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0xeeb9a3a3c6f8c5c7), UINT64_C(0x1ff81f7bc66476e6)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0xeebff7a3c6fbe7d7), UINT64_C(0x1ff81f7bc66476e6)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x0006540000032210), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x24f1d723df23c6f8), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(-A, IMP(UINT64_C(0x5fc929feff641dac), UINT64_C(0xe007e084399b891a)));
  EXPECT_EQ(~A, IMP(UINT64_C(0x5fc929feff641dac), UINT64_C(0xe007e084399b8919)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x0000000000000002)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x0317eabb73d5932b), UINT64_C(0x1ff81f7bc66476e6)));
  EXPECT_EQ(A >> 0, IMP(UINT64_C(0xa036d601009be253), UINT64_C(0x1ff81f7bc66476e6)));
  EXPECT_EQ(A << 0, IMP(UINT64_C(0xa036d601009be253), UINT64_C(0x1ff81f7bc66476e6)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0xeec64ba3c6ff09e7), UINT64_C(0x1ff81f7bc66476e6)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x51a7605e3a38babf), UINT64_C(0x1ff81f7bc66476e6)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0xeeb9a3a3c6f8c5c7), UINT64_C(0x1ff81f7bc66476e6)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0xeebff7a3c6fbe7d7), UINT64_C(0x1ff81f7bc66476e6)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x0006540000032210), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x24f1d723df23c6f8), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x0000000000000002)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x0317eabb73d5932b), UINT64_C(0x1ff81f7bc66476e6)));
  EXPECT_EQ((T = A, T >>= 0), IMP(UINT64_C(0xa036d601009be253), UINT64_C(0x1ff81f7bc66476e6)));
  EXPECT_EQ((T = A, T <<= 0), IMP(UINT64_C(0xa036d601009be253), UINT64_C(0x1ff81f7bc66476e6)));
  EXPECT_EQ(ror(A, 0), IMP(UINT64_C(0xa036d601009be253), UINT64_C(0x1ff81f7bc66476e6)));
  EXPECT_EQ(rol(A, 0), IMP(UINT64_C(0xa036d601009be253), UINT64_C(0x1ff81f7bc66476e6)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0xa036d601009be253), UINT64_C(0x1ff81f7bc66476e6)));
  EXPECT_EQ(T, IMP(UINT64_C(0xa036d601009be253), UINT64_C(0x1ff81f7bc66476e7)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0xa036d601009be253), UINT64_C(0x1ff81f7bc66476e6)));
  EXPECT_EQ(T, IMP(UINT64_C(0xa036d601009be253), UINT64_C(0x1ff81f7bc66476e5)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0xa036d601009be253), UINT64_C(0x1ff81f7bc66476e7)));
  EXPECT_EQ(T, IMP(UINT64_C(0xa036d601009be253), UINT64_C(0x1ff81f7bc66476e7)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0xa036d601009be253), UINT64_C(0x1ff81f7bc66476e5)));
  EXPECT_EQ(T, IMP(UINT64_C(0xa036d601009be253), UINT64_C(0x1ff81f7bc66476e5)));
}

TEST(i128, autogen_basic_43) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(UINT64_C(0xa036d601009be253), UINT64_C(0x1ff81f7bc66476e6));
  const IMP B = IMP(UINT64_C(0x4e8f75a2c6632794), UINT64_C(0x0000000000000000));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0xeec64ba3c6ff09e7), UINT64_C(0x1ff81f7bc66476e6)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x51a7605e3a38babf), UINT64_C(0x1ff81f7bc66476e6)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0xeeb9a3a3c6f8c5c7), UINT64_C(0x1ff81f7bc66476e6)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0xeebff7a3c6fbe7d7), UINT64_C(0x1ff81f7bc66476e6)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x0006540000032210), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x24f1d723df23c6f8), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(-A, IMP(UINT64_C(0x5fc929feff641dac), UINT64_C(0xe007e084399b891a)));
  EXPECT_EQ(~A, IMP(UINT64_C(0x5fc929feff641dac), UINT64_C(0xe007e084399b8919)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(INT64_C(-1)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0xeec64ba3c6ff09e7), UINT64_C(0x1ff81f7bc66476e6)));
  EXPECT_EQ(A >> 0, IMP(UINT64_C(0xa036d601009be253), UINT64_C(0x1ff81f7bc66476e6)));
  EXPECT_EQ(A << 0, IMP(UINT64_C(0xa036d601009be253), UINT64_C(0x1ff81f7bc66476e6)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0xeec64ba3c6ff09e7), UINT64_C(0x1ff81f7bc66476e6)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x51a7605e3a38babf), UINT64_C(0x1ff81f7bc66476e6)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0xeeb9a3a3c6f8c5c7), UINT64_C(0x1ff81f7bc66476e6)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0xeebff7a3c6fbe7d7), UINT64_C(0x1ff81f7bc66476e6)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x0006540000032210), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x24f1d723df23c6f8), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T /= B), IMP(INT64_C(-1)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0xeec64ba3c6ff09e7), UINT64_C(0x1ff81f7bc66476e6)));
  EXPECT_EQ((T = A, T >>= 0), IMP(UINT64_C(0xa036d601009be253), UINT64_C(0x1ff81f7bc66476e6)));
  EXPECT_EQ((T = A, T <<= 0), IMP(UINT64_C(0xa036d601009be253), UINT64_C(0x1ff81f7bc66476e6)));
  EXPECT_EQ(ror(A, 0), IMP(UINT64_C(0xa036d601009be253), UINT64_C(0x1ff81f7bc66476e6)));
  EXPECT_EQ(rol(A, 0), IMP(UINT64_C(0xa036d601009be253), UINT64_C(0x1ff81f7bc66476e6)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0xa036d601009be253), UINT64_C(0x1ff81f7bc66476e6)));
  EXPECT_EQ(T, IMP(UINT64_C(0xa036d601009be253), UINT64_C(0x1ff81f7bc66476e7)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0xa036d601009be253), UINT64_C(0x1ff81f7bc66476e6)));
  EXPECT_EQ(T, IMP(UINT64_C(0xa036d601009be253), UINT64_C(0x1ff81f7bc66476e5)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0xa036d601009be253), UINT64_C(0x1ff81f7bc66476e7)));
  EXPECT_EQ(T, IMP(UINT64_C(0xa036d601009be253), UINT64_C(0x1ff81f7bc66476e7)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0xa036d601009be253), UINT64_C(0x1ff81f7bc66476e5)));
  EXPECT_EQ(T, IMP(UINT64_C(0xa036d601009be253), UINT64_C(0x1ff81f7bc66476e5)));
}

TEST(u128, autogen_basic_44) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(UINT64_C(0xb3943eec4afe1288), UINT64_C(0x0000000000000000));
  const IMP B = IMP(UINT64_C(0x2bf3d5e029ea81bd), UINT64_C(0x0000000000000000));
  IMP T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0xdf8814cc74e89445), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x87a0690c211390cb), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x9867eb0c63149335), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0xbbf7ffec6bfe93bd), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x239014e008ea0088), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(-A, IMP(UINT64_C(0x4c6bc113b501ed78), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(~A, IMP(UINT64_C(0x4c6bc113b501ed77), UINT64_C(0xffffffffffffffff)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x0000000000000004)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x03c4e76ba3540b94), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A >> 0, IMP(UINT64_C(0xb3943eec4afe1288), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A << 0, IMP(UINT64_C(0xb3943eec4afe1288), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0xdf8814cc74e89445), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x87a0690c211390cb), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x9867eb0c63149335), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0xbbf7ffec6bfe93bd), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x239014e008ea0088), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x0000000000000004)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x03c4e76ba3540b94), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T >>= 0), IMP(UINT64_C(0xb3943eec4afe1288), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T <<= 0), IMP(UINT64_C(0xb3943eec4afe1288), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 0), IMP(UINT64_C(0xb3943eec4afe1288), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(rol(A, 0), IMP(UINT64_C(0xb3943eec4afe1288), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0xb3943eec4afe1288), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, IMP(UINT64_C(0xb3943eec4afe1288), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0xb3943eec4afe1288), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, IMP(UINT64_C(0xb3943eec4afe1287), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0xb3943eec4afe1288), UINT64_C(0x0000000000000001)));
  EXPECT_EQ(T, IMP(UINT64_C(0xb3943eec4afe1288), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0xb3943eec4afe1287), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ(T, IMP(UINT64_C(0xb3943eec4afe1287), UINT64_C(0xffffffffffffffff)));
}

TEST(i128, autogen_basic_45) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(UINT64_C(0xb3943eec4afe1288), UINT64_C(0x0000000000000000));
  const IMP B = IMP(UINT64_C(0x2bf3d5e029ea81bd), UINT64_C(0x0000000000000000));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0xdf8814cc74e89445), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x87a0690c211390cb), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x9867eb0c63149335), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0xbbf7ffec6bfe93bd), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x239014e008ea0088), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A * B, IMP(INT64_C(0)));
  EXPECT_EQ(-A, IMP(UINT64_C(0x4c6bc113b501ed78), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(~A, IMP(UINT64_C(0x4c6bc113b501ed77), UINT64_C(0xffffffffffffffff)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(INT64_C(-1)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0xdf8814cc74e89445), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A >> 0, IMP(UINT64_C(0xb3943eec4afe1288), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A << 0, IMP(UINT64_C(0xb3943eec4afe1288), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0xdf8814cc74e89445), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x87a0690c211390cb), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x9867eb0c63149335), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0xbbf7ffec6bfe93bd), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x239014e008ea0088), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T *= B), IMP(INT64_C(0)));
  EXPECT_EQ((T = A, T /= B), IMP(INT64_C(-1)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0xdf8814cc74e89445), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T >>= 0), IMP(UINT64_C(0xb3943eec4afe1288), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T <<= 0), IMP(UINT64_C(0xb3943eec4afe1288), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 0), IMP(UINT64_C(0xb3943eec4afe1288), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(rol(A, 0), IMP(UINT64_C(0xb3943eec4afe1288), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0xb3943eec4afe1288), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, IMP(UINT64_C(0xb3943eec4afe1288), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0xb3943eec4afe1288), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, IMP(UINT64_C(0xb3943eec4afe1287), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0xb3943eec4afe1288), UINT64_C(0x0000000000000001)));
  EXPECT_EQ(T, IMP(UINT64_C(0xb3943eec4afe1288), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0xb3943eec4afe1287), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ(T, IMP(UINT64_C(0xb3943eec4afe1287), UINT64_C(0xffffffffffffffff)));
}

TEST(u128, autogen_basic_46) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(UINT64_C(0x3d053dde5a7732fa), UINT64_C(0x0000000000000000));
  const IMP B = IMP(UINT64_C(0xeb71b9855a6a3b37));
  IMP T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x3d053dde5a7732fa), UINT64_C(0xeb71b9855a6a3b37)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x3d053dde5a7732f9), UINT64_C(0x148e467aa595c4c9)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x3d053dde5a7732fa), UINT64_C(0xeb71b9855a6a3b37)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0x3d053dde5a7732fa), UINT64_C(0xeb71b9855a6a3b37)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x3d600cc7e7df91b6), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(-A, IMP(UINT64_C(0xc2fac221a588cd06), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(~A, IMP(UINT64_C(0xc2fac221a588cd05), UINT64_C(0xffffffffffffffff)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x42591307a64422b3)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x655ef7a1473f4a8b)));
  EXPECT_EQ(A >> 55, IMP(UINT64_C(0x000000000000007a), UINT64_C(0x0a7bbcb4ee65f400)));
  EXPECT_EQ(A << 55, IMP(UINT64_C(0x7d00000000000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x3d053dde5a7732fa), UINT64_C(0xeb71b9855a6a3b37)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x3d053dde5a7732f9), UINT64_C(0x148e467aa595c4c9)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x3d053dde5a7732fa), UINT64_C(0xeb71b9855a6a3b37)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0x3d053dde5a7732fa), UINT64_C(0xeb71b9855a6a3b37)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x3d600cc7e7df91b6), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x42591307a64422b3)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x655ef7a1473f4a8b)));
  EXPECT_EQ((T = A, T >>= 55), IMP(UINT64_C(0x000000000000007a), UINT64_C(0x0a7bbcb4ee65f400)));
  EXPECT_EQ((T = A, T <<= 55), IMP(UINT64_C(0x7d00000000000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 55), IMP(UINT64_C(0x000000000000007a), UINT64_C(0x0a7bbcb4ee65f400)));
  EXPECT_EQ(rol(A, 55), IMP(UINT64_C(0x7d00000000000000), UINT64_C(0x001e829eef2d3b99)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0x3d053dde5a7732fa), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, IMP(UINT64_C(0x3d053dde5a7732fa), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0x3d053dde5a7732fa), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, IMP(UINT64_C(0x3d053dde5a7732f9), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0x3d053dde5a7732fa), UINT64_C(0x0000000000000001)));
  EXPECT_EQ(T, IMP(UINT64_C(0x3d053dde5a7732fa), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0x3d053dde5a7732f9), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ(T, IMP(UINT64_C(0x3d053dde5a7732f9), UINT64_C(0xffffffffffffffff)));
}

TEST(i128, autogen_basic_47) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(UINT64_C(0x3d053dde5a7732fa), UINT64_C(0x0000000000000000));
  const IMP B = IMP(UINT64_C(0x0000000000000000), UINT64_C(0xeb71b9855a6a3b37));
  IMP T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x3d053dde5a7732fa), UINT64_C(0xeb71b9855a6a3b37)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x3d053dde5a7732f9), UINT64_C(0x148e467aa595c4c9)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x3d053dde5a7732fa), UINT64_C(0xeb71b9855a6a3b37)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0x3d053dde5a7732fa), UINT64_C(0xeb71b9855a6a3b37)));
  EXPECT_EQ(A & B, IMP(INT64_C(0)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x3d600cc7e7df91b6), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(-A, IMP(UINT64_C(0xc2fac221a588cd06), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(~A, IMP(UINT64_C(0xc2fac221a588cd05), UINT64_C(0xffffffffffffffff)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(INT64_C(4780873403005674163)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(INT64_C(7304547917698648715)));
  EXPECT_EQ(A >> 55, IMP(UINT64_C(0x000000000000007a), UINT64_C(0x0a7bbcb4ee65f400)));
  EXPECT_EQ(A << 55, IMP(UINT64_C(0x7d00000000000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x3d053dde5a7732fa), UINT64_C(0xeb71b9855a6a3b37)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x3d053dde5a7732f9), UINT64_C(0x148e467aa595c4c9)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x3d053dde5a7732fa), UINT64_C(0xeb71b9855a6a3b37)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0x3d053dde5a7732fa), UINT64_C(0xeb71b9855a6a3b37)));
  EXPECT_EQ((T = A, T &= B), IMP(INT64_C(0)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x3d600cc7e7df91b6), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T /= B), IMP(INT64_C(4780873403005674163)));
  EXPECT_EQ((T = A, T %= B), IMP(INT64_C(7304547917698648715)));
  EXPECT_EQ((T = A, T >>= 55), IMP(UINT64_C(0x000000000000007a), UINT64_C(0x0a7bbcb4ee65f400)));
  EXPECT_EQ((T = A, T <<= 55), IMP(UINT64_C(0x7d00000000000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 55), IMP(UINT64_C(0x000000000000007a), UINT64_C(0x0a7bbcb4ee65f400)));
  EXPECT_EQ(rol(A, 55), IMP(UINT64_C(0x7d00000000000000), UINT64_C(0x001e829eef2d3b99)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0x3d053dde5a7732fa), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, IMP(UINT64_C(0x3d053dde5a7732fa), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0x3d053dde5a7732fa), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, IMP(UINT64_C(0x3d053dde5a7732f9), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0x3d053dde5a7732fa), UINT64_C(0x0000000000000001)));
  EXPECT_EQ(T, IMP(UINT64_C(0x3d053dde5a7732fa), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0x3d053dde5a7732f9), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ(T, IMP(UINT64_C(0x3d053dde5a7732f9), UINT64_C(0xffffffffffffffff)));
}

TEST(u128, autogen_basic_48) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(UINT64_C(0x1ca53290dc50c4bc));
  const IMP B = IMP(UINT64_C(0x018cf2eae4277d41), UINT64_C(0x0000000000000000));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x018cf2eae4277d41), UINT64_C(0x1ca53290dc50c4bc)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0xfe730d151bd882bf), UINT64_C(0x1ca53290dc50c4bc)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x018cf2eae4277d41), UINT64_C(0x1ca53290dc50c4bc)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0x018cf2eae4277d41), UINT64_C(0x1ca53290dc50c4bc)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0xb6899db8c935bfbc), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(-A, IMP(-INT64_C(2064111601972200636)));
  EXPECT_EQ(~A, IMP(-INT64_C(2064111601972200637)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x1ca53290dc50c4bc)));
  EXPECT_EQ(A >> 0, IMP(UINT64_C(0x1ca53290dc50c4bc)));
  EXPECT_EQ(A << 0, IMP(UINT64_C(0x1ca53290dc50c4bc)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x018cf2eae4277d41), UINT64_C(0x1ca53290dc50c4bc)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0xfe730d151bd882bf), UINT64_C(0x1ca53290dc50c4bc)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x018cf2eae4277d41), UINT64_C(0x1ca53290dc50c4bc)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0x018cf2eae4277d41), UINT64_C(0x1ca53290dc50c4bc)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0xb6899db8c935bfbc), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x1ca53290dc50c4bc)));
  EXPECT_EQ((T = A, T >>= 0), IMP(UINT64_C(0x1ca53290dc50c4bc)));
  EXPECT_EQ((T = A, T <<= 0), IMP(UINT64_C(0x1ca53290dc50c4bc)));
  EXPECT_EQ(ror(A, 0), IMP(UINT64_C(0x1ca53290dc50c4bc)));
  EXPECT_EQ(rol(A, 0), IMP(UINT64_C(0x1ca53290dc50c4bc)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0x1ca53290dc50c4bc)));
  EXPECT_EQ(T, IMP(UINT64_C(0x1ca53290dc50c4bd)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0x1ca53290dc50c4bc)));
  EXPECT_EQ(T, IMP(UINT64_C(0x1ca53290dc50c4bb)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0x1ca53290dc50c4bd)));
  EXPECT_EQ(T, IMP(UINT64_C(0x1ca53290dc50c4bd)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0x1ca53290dc50c4bb)));
  EXPECT_EQ(T, IMP(UINT64_C(0x1ca53290dc50c4bb)));
}

TEST(i128, autogen_basic_49) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(INT64_C(2064111601972200636));
  const IMP B = IMP(UINT64_C(0x018cf2eae4277d41), UINT64_C(0x0000000000000000));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x018cf2eae4277d41), UINT64_C(0x1ca53290dc50c4bc)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0xfe730d151bd882bf), UINT64_C(0x1ca53290dc50c4bc)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x018cf2eae4277d41), UINT64_C(0x1ca53290dc50c4bc)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0x018cf2eae4277d41), UINT64_C(0x1ca53290dc50c4bc)));
  EXPECT_EQ(A & B, IMP(INT64_C(0)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0xb6899db8c935bfbc), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(-A, IMP(INT64_C(-2064111601972200636)));
  EXPECT_EQ(~A, IMP(INT64_C(-2064111601972200637)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(INT64_C(0)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(INT64_C(2064111601972200636)));
  EXPECT_EQ(A >> 0, IMP(INT64_C(2064111601972200636)));
  EXPECT_EQ(A << 0, IMP(INT64_C(2064111601972200636)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x018cf2eae4277d41), UINT64_C(0x1ca53290dc50c4bc)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0xfe730d151bd882bf), UINT64_C(0x1ca53290dc50c4bc)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x018cf2eae4277d41), UINT64_C(0x1ca53290dc50c4bc)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0x018cf2eae4277d41), UINT64_C(0x1ca53290dc50c4bc)));
  EXPECT_EQ((T = A, T &= B), IMP(INT64_C(0)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0xb6899db8c935bfbc), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T /= B), IMP(INT64_C(0)));
  EXPECT_EQ((T = A, T %= B), IMP(INT64_C(2064111601972200636)));
  EXPECT_EQ((T = A, T >>= 0), IMP(INT64_C(2064111601972200636)));
  EXPECT_EQ((T = A, T <<= 0), IMP(INT64_C(2064111601972200636)));
  EXPECT_EQ(ror(A, 0), IMP(INT64_C(2064111601972200636)));
  EXPECT_EQ(rol(A, 0), IMP(INT64_C(2064111601972200636)));
  EXPECT_EQ((T = A, T++), IMP(INT64_C(2064111601972200636)));
  EXPECT_EQ(T, IMP(INT64_C(2064111601972200637)));
  EXPECT_EQ((T = A, T--), IMP(INT64_C(2064111601972200636)));
  EXPECT_EQ(T, IMP(INT64_C(2064111601972200635)));
  EXPECT_EQ((T = A, ++T), IMP(INT64_C(2064111601972200637)));
  EXPECT_EQ(T, IMP(INT64_C(2064111601972200637)));
  EXPECT_EQ((T = A, --T), IMP(INT64_C(2064111601972200635)));
  EXPECT_EQ(T, IMP(INT64_C(2064111601972200635)));
}

TEST(u128, autogen_basic_50) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(-INT64_C(1655500024170665723));
  const IMP B = IMP(UINT64_C(0x160f36b8149f5a5b), UINT64_C(0x610759a74034884e));
  IMP T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x160f36b8149f5a5b), UINT64_C(0x4a0dd5270ddcb153)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0xe9f0c947eb60a5a4), UINT64_C(0x87ff21d88d73a0b7)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0xe9f0c947eb60a5a4), UINT64_C(0x880122d88d9ca14b)));
  EXPECT_EQ(A | B, IMP(-INT64_C(1655217999436797617)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x160f36b8149f5a5b), UINT64_C(0x6106592740200804)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0xe34508e6231f94bf), UINT64_C(0x1e0dd5de940b2786)));
  EXPECT_EQ(-A, IMP(UINT64_C(0x16f984803257d6fb)));
  EXPECT_EQ(~A, IMP(UINT64_C(0x16f984803257d6fa)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x000000000000000b)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x0d58a6171d271e12), UINT64_C(0xbdb5a1500b664dab)));
  EXPECT_EQ(A >> 78, IMP(UINT64_C(0x0003ffffffffffff)));
  EXPECT_EQ(A << 78, IMP(UINT64_C(0x9edff36a0a414000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x160f36b8149f5a5b), UINT64_C(0x4a0dd5270ddcb153)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0xe9f0c947eb60a5a4), UINT64_C(0x87ff21d88d73a0b7)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0xe9f0c947eb60a5a4), UINT64_C(0x880122d88d9ca14b)));
  EXPECT_EQ((T = A, T |= B), IMP(-INT64_C(1655217999436797617)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x160f36b8149f5a5b), UINT64_C(0x6106592740200804)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0xe34508e6231f94bf), UINT64_C(0x1e0dd5de940b2786)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x000000000000000b)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x0d58a6171d271e12), UINT64_C(0xbdb5a1500b664dab)));
  EXPECT_EQ((T = A, T >>= 78), IMP(UINT64_C(0x0003ffffffffffff)));
  EXPECT_EQ((T = A, T <<= 78), IMP(UINT64_C(0x9edff36a0a414000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 78), IMP(UINT64_C(0xffffa419edff36a0), UINT64_C(0xa417ffffffffffff)));
  EXPECT_EQ(rol(A, 78), IMP(UINT64_C(0x9edff36a0a417fff), UINT64_C(0xfffffffffffffa41)));
  EXPECT_EQ((T = A, T++), IMP(-INT64_C(1655500024170665723)));
  EXPECT_EQ(T, IMP(-INT64_C(1655500024170665722)));
  EXPECT_EQ((T = A, T--), IMP(-INT64_C(1655500024170665723)));
  EXPECT_EQ(T, IMP(-INT64_C(1655500024170665724)));
  EXPECT_EQ((T = A, ++T), IMP(-INT64_C(1655500024170665722)));
  EXPECT_EQ(T, IMP(-INT64_C(1655500024170665722)));
  EXPECT_EQ((T = A, --T), IMP(-INT64_C(1655500024170665724)));
  EXPECT_EQ(T, IMP(-INT64_C(1655500024170665724)));
}

TEST(i128, autogen_basic_51) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(INT64_C(-1655500024170665723));
  const IMP B = IMP(UINT64_C(0x160f36b8149f5a5b), UINT64_C(0x610759a74034884e));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x160f36b8149f5a5b), UINT64_C(0x4a0dd5270ddcb153)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0xe9f0c947eb60a5a4), UINT64_C(0x87ff21d88d73a0b7)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0xe9f0c947eb60a5a4), UINT64_C(0x880122d88d9ca14b)));
  EXPECT_EQ(A | B, IMP(INT64_C(-1655217999436797617)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x160f36b8149f5a5b), UINT64_C(0x6106592740200804)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0xe34508e6231f94bf), UINT64_C(0x1e0dd5de940b2786)));
  EXPECT_EQ(-A, IMP(INT64_C(1655500024170665723)));
  EXPECT_EQ(~A, IMP(INT64_C(1655500024170665722)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(INT64_C(0)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(INT64_C(-1655500024170665723)));
  EXPECT_EQ(A >> 78, IMP(INT64_C(-1)));
  EXPECT_EQ(A << 78, IMP(UINT64_C(0x9edff36a0a414000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x160f36b8149f5a5b), UINT64_C(0x4a0dd5270ddcb153)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0xe9f0c947eb60a5a4), UINT64_C(0x87ff21d88d73a0b7)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0xe9f0c947eb60a5a4), UINT64_C(0x880122d88d9ca14b)));
  EXPECT_EQ((T = A, T |= B), IMP(INT64_C(-1655217999436797617)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x160f36b8149f5a5b), UINT64_C(0x6106592740200804)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0xe34508e6231f94bf), UINT64_C(0x1e0dd5de940b2786)));
  EXPECT_EQ((T = A, T /= B), IMP(INT64_C(0)));
  EXPECT_EQ((T = A, T %= B), IMP(INT64_C(-1655500024170665723)));
  EXPECT_EQ((T = A, T >>= 78), IMP(INT64_C(-1)));
  EXPECT_EQ((T = A, T <<= 78), IMP(UINT64_C(0x9edff36a0a414000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 78), IMP(UINT64_C(0xffffa419edff36a0), UINT64_C(0xa417ffffffffffff)));
  EXPECT_EQ(rol(A, 78), IMP(UINT64_C(0x9edff36a0a417fff), UINT64_C(0xfffffffffffffa41)));
  EXPECT_EQ((T = A, T++), IMP(INT64_C(-1655500024170665723)));
  EXPECT_EQ(T, IMP(INT64_C(-1655500024170665722)));
  EXPECT_EQ((T = A, T--), IMP(INT64_C(-1655500024170665723)));
  EXPECT_EQ(T, IMP(INT64_C(-1655500024170665724)));
  EXPECT_EQ((T = A, ++T), IMP(INT64_C(-1655500024170665722)));
  EXPECT_EQ(T, IMP(INT64_C(-1655500024170665722)));
  EXPECT_EQ((T = A, --T), IMP(INT64_C(-1655500024170665724)));
  EXPECT_EQ(T, IMP(INT64_C(-1655500024170665724)));
}

TEST(u128, autogen_basic_52) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(UINT64_C(0x4c3629a0454b23bf), UINT64_C(0xeac246f6ee838ae2));
  const IMP B = IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x341b30eae6393230));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x4c3629a0454b23bf), UINT64_C(0x1edd77e1d4bcbd12)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x4c3629a0454b23c0), UINT64_C(0xb6a7160c084a58b2)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0xb3c9d65fbab4dc40), UINT64_C(0xded9761c08bab8d2)));
  EXPECT_EQ(A | B, IMP(-INT64_C(82341330877170958)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x4c3629a0454b23bf), UINT64_C(0x200200e2e6010220)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x64c7a6d0c695807b), UINT64_C(0xd9ac2587621c2e60)));
  EXPECT_EQ(-A, IMP(UINT64_C(0xb3c9d65fbab4dc40), UINT64_C(0x153db909117c751e)));
  EXPECT_EQ(~A, IMP(UINT64_C(0xb3c9d65fbab4dc40), UINT64_C(0x153db909117c751d)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x4c3629a0454b23bf), UINT64_C(0xeac246f6ee838ae2)));
  EXPECT_EQ(A >> 48, IMP(UINT64_C(0x0000000000004c36), UINT64_C(0x29a0454b23bfeac2)));
  EXPECT_EQ(A << 48, IMP(UINT64_C(0x23bfeac246f6ee83), UINT64_C(0x8ae2000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x4c3629a0454b23bf), UINT64_C(0x1edd77e1d4bcbd12)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x4c3629a0454b23c0), UINT64_C(0xb6a7160c084a58b2)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0xb3c9d65fbab4dc40), UINT64_C(0xded9761c08bab8d2)));
  EXPECT_EQ((T = A, T |= B), IMP(-INT64_C(82341330877170958)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x4c3629a0454b23bf), UINT64_C(0x200200e2e6010220)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x64c7a6d0c695807b), UINT64_C(0xd9ac2587621c2e60)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x4c3629a0454b23bf), UINT64_C(0xeac246f6ee838ae2)));
  EXPECT_EQ((T = A, T >>= 48), IMP(UINT64_C(0x0000000000004c36), UINT64_C(0x29a0454b23bfeac2)));
  EXPECT_EQ((T = A, T <<= 48), IMP(UINT64_C(0x23bfeac246f6ee83), UINT64_C(0x8ae2000000000000)));
  EXPECT_EQ(ror(A, 48), IMP(UINT64_C(0x46f6ee838ae24c36), UINT64_C(0x29a0454b23bfeac2)));
  EXPECT_EQ(rol(A, 48), IMP(UINT64_C(0x23bfeac246f6ee83), UINT64_C(0x8ae24c3629a0454b)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0x4c3629a0454b23bf), UINT64_C(0xeac246f6ee838ae2)));
  EXPECT_EQ(T, IMP(UINT64_C(0x4c3629a0454b23bf), UINT64_C(0xeac246f6ee838ae3)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0x4c3629a0454b23bf), UINT64_C(0xeac246f6ee838ae2)));
  EXPECT_EQ(T, IMP(UINT64_C(0x4c3629a0454b23bf), UINT64_C(0xeac246f6ee838ae1)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0x4c3629a0454b23bf), UINT64_C(0xeac246f6ee838ae3)));
  EXPECT_EQ(T, IMP(UINT64_C(0x4c3629a0454b23bf), UINT64_C(0xeac246f6ee838ae3)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0x4c3629a0454b23bf), UINT64_C(0xeac246f6ee838ae1)));
  EXPECT_EQ(T, IMP(UINT64_C(0x4c3629a0454b23bf), UINT64_C(0xeac246f6ee838ae1)));
}

TEST(i128, autogen_basic_53) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(UINT64_C(0x4c3629a0454b23bf), UINT64_C(0xeac246f6ee838ae2));
  const IMP B = IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x341b30eae6393230));
  IMP T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x4c3629a0454b23bf), UINT64_C(0x1edd77e1d4bcbd12)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x4c3629a0454b23c0), UINT64_C(0xb6a7160c084a58b2)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0xb3c9d65fbab4dc40), UINT64_C(0xded9761c08bab8d2)));
  EXPECT_EQ(A | B, IMP(INT64_C(-82341330877170958)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x4c3629a0454b23bf), UINT64_C(0x200200e2e6010220)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x64c7a6d0c695807b), UINT64_C(0xd9ac2587621c2e60)));
  EXPECT_EQ(-A, IMP(UINT64_C(0xb3c9d65fbab4dc40), UINT64_C(0x153db909117c751e)));
  EXPECT_EQ(~A, IMP(UINT64_C(0xb3c9d65fbab4dc40), UINT64_C(0x153db909117c751d)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(INT64_C(-6895037911852452211)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x0000000000000000), UINT64_C(0xa80f4c67d628c672)));
  EXPECT_EQ(A >> 48, IMP(UINT64_C(0x0000000000004c36), UINT64_C(0x29a0454b23bfeac2)));
  EXPECT_EQ(A << 48, IMP(UINT64_C(0x23bfeac246f6ee83), UINT64_C(0x8ae2000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x4c3629a0454b23bf), UINT64_C(0x1edd77e1d4bcbd12)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x4c3629a0454b23c0), UINT64_C(0xb6a7160c084a58b2)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0xb3c9d65fbab4dc40), UINT64_C(0xded9761c08bab8d2)));
  EXPECT_EQ((T = A, T |= B), IMP(INT64_C(-82341330877170958)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x4c3629a0454b23bf), UINT64_C(0x200200e2e6010220)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x64c7a6d0c695807b), UINT64_C(0xd9ac2587621c2e60)));
  EXPECT_EQ((T = A, T /= B), IMP(INT64_C(-6895037911852452211)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x0000000000000000), UINT64_C(0xa80f4c67d628c672)));
  EXPECT_EQ((T = A, T >>= 48), IMP(UINT64_C(0x0000000000004c36), UINT64_C(0x29a0454b23bfeac2)));
  EXPECT_EQ((T = A, T <<= 48), IMP(UINT64_C(0x23bfeac246f6ee83), UINT64_C(0x8ae2000000000000)));
  EXPECT_EQ(ror(A, 48), IMP(UINT64_C(0x46f6ee838ae24c36), UINT64_C(0x29a0454b23bfeac2)));
  EXPECT_EQ(rol(A, 48), IMP(UINT64_C(0x23bfeac246f6ee83), UINT64_C(0x8ae24c3629a0454b)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0x4c3629a0454b23bf), UINT64_C(0xeac246f6ee838ae2)));
  EXPECT_EQ(T, IMP(UINT64_C(0x4c3629a0454b23bf), UINT64_C(0xeac246f6ee838ae3)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0x4c3629a0454b23bf), UINT64_C(0xeac246f6ee838ae2)));
  EXPECT_EQ(T, IMP(UINT64_C(0x4c3629a0454b23bf), UINT64_C(0xeac246f6ee838ae1)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0x4c3629a0454b23bf), UINT64_C(0xeac246f6ee838ae3)));
  EXPECT_EQ(T, IMP(UINT64_C(0x4c3629a0454b23bf), UINT64_C(0xeac246f6ee838ae3)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0x4c3629a0454b23bf), UINT64_C(0xeac246f6ee838ae1)));
  EXPECT_EQ(T, IMP(UINT64_C(0x4c3629a0454b23bf), UINT64_C(0xeac246f6ee838ae1)));
}

TEST(u128, autogen_basic_54) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x0d403608f58c8ee4));
  const IMP B = IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x44e926bf13f70909));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0xfffffffffffffffe), UINT64_C(0x52295cc8098397ed)));
  EXPECT_EQ(A - B, IMP(-INT64_C(4010720133158435365)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x49a910b7e67b87ed)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x4de936bff7ff8fed)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x0440260811840800)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0xb167c304f1d36d86), UINT64_C(0x349f04475cf30a04)));
  EXPECT_EQ(-A, IMP(UINT64_C(0xf2bfc9f70a73711c)));
  EXPECT_EQ(~A, IMP(UINT64_C(0xf2bfc9f70a73711b)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x0d403608f58c8ee4)));
  EXPECT_EQ(A >> 9, IMP(UINT64_C(0x007fffffffffffff), UINT64_C(0xff86a01b047ac647)));
  EXPECT_EQ(A << 9, IMP(UINT64_C(0xfffffffffffffe1a), UINT64_C(0x806c11eb191dc800)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0xfffffffffffffffe), UINT64_C(0x52295cc8098397ed)));
  EXPECT_EQ((T = A, T -= B), IMP(-INT64_C(4010720133158435365)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x49a910b7e67b87ed)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x4de936bff7ff8fed)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x0440260811840800)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0xb167c304f1d36d86), UINT64_C(0x349f04475cf30a04)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x0d403608f58c8ee4)));
  EXPECT_EQ((T = A, T >>= 9), IMP(UINT64_C(0x007fffffffffffff), UINT64_C(0xff86a01b047ac647)));
  EXPECT_EQ((T = A, T <<= 9), IMP(UINT64_C(0xfffffffffffffe1a), UINT64_C(0x806c11eb191dc800)));
  EXPECT_EQ(ror(A, 9), IMP(UINT64_C(0x727fffffffffffff), UINT64_C(0xff86a01b047ac647)));
  EXPECT_EQ(rol(A, 9), IMP(UINT64_C(0xfffffffffffffe1a), UINT64_C(0x806c11eb191dc9ff)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x0d403608f58c8ee4)));
  EXPECT_EQ(T, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x0d403608f58c8ee5)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x0d403608f58c8ee4)));
  EXPECT_EQ(T, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x0d403608f58c8ee3)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x0d403608f58c8ee5)));
  EXPECT_EQ(T, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x0d403608f58c8ee5)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x0d403608f58c8ee3)));
  EXPECT_EQ(T, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x0d403608f58c8ee3)));
}

TEST(i128, autogen_basic_55) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x0d403608f58c8ee4));
  const IMP B = IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x44e926bf13f70909));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0xfffffffffffffffe), UINT64_C(0x52295cc8098397ed)));
  EXPECT_EQ(A - B, IMP(INT64_C(-4010720133158435365)));
  EXPECT_EQ(A ^ B, IMP(INT64_C(5307792017864755181)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x4de936bff7ff8fed)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x0440260811840800)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0xb167c304f1d36d86), UINT64_C(0x349f04475cf30a04)));
  EXPECT_EQ(-A, IMP(UINT64_C(0x0000000000000000), UINT64_C(0xf2bfc9f70a73711c)));
  EXPECT_EQ(~A, IMP(UINT64_C(0x0000000000000000), UINT64_C(0xf2bfc9f70a73711b)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(INT64_C(1)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(INT64_C(-4010720133158435365)));
  EXPECT_EQ(A >> 9, IMP(INT64_C(-34163909258983865)));
  EXPECT_EQ(A << 9, IMP(UINT64_C(0xfffffffffffffe1a), UINT64_C(0x806c11eb191dc800)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0xfffffffffffffffe), UINT64_C(0x52295cc8098397ed)));
  EXPECT_EQ((T = A, T -= B), IMP(INT64_C(-4010720133158435365)));
  EXPECT_EQ((T = A, T ^= B), IMP(INT64_C(5307792017864755181)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x4de936bff7ff8fed)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x0440260811840800)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0xb167c304f1d36d86), UINT64_C(0x349f04475cf30a04)));
  EXPECT_EQ((T = A, T /= B), IMP(INT64_C(1)));
  EXPECT_EQ((T = A, T %= B), IMP(INT64_C(-4010720133158435365)));
  EXPECT_EQ((T = A, T >>= 9), IMP(INT64_C(-34163909258983865)));
  EXPECT_EQ((T = A, T <<= 9), IMP(UINT64_C(0xfffffffffffffe1a), UINT64_C(0x806c11eb191dc800)));
  EXPECT_EQ(ror(A, 9), IMP(UINT64_C(0x727fffffffffffff), UINT64_C(0xff86a01b047ac647)));
  EXPECT_EQ(rol(A, 9), IMP(UINT64_C(0xfffffffffffffe1a), UINT64_C(0x806c11eb191dc9ff)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x0d403608f58c8ee4)));
  EXPECT_EQ(T, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x0d403608f58c8ee5)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x0d403608f58c8ee4)));
  EXPECT_EQ(T, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x0d403608f58c8ee3)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x0d403608f58c8ee5)));
  EXPECT_EQ(T, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x0d403608f58c8ee5)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x0d403608f58c8ee3)));
  EXPECT_EQ(T, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x0d403608f58c8ee3)));
}

TEST(u128, autogen_basic_56) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x445aac83b3948eb6));
  const IMP B = IMP(UINT64_C(0x17448031b6b3bb63));
  IMP T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x5b9f2cb56a484a19)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x2d162c51fce0d353)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x531e2cb2052735d5)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x575eacb3b7b7bff7)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x04408001b2908a22)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0xeef1ef9e8dcfa3f9), UINT64_C(0xd5f96a4723f42262)));
  EXPECT_EQ(-A, IMP(UINT64_C(0xbba5537c4c6b714a)));
  EXPECT_EQ(~A, IMP(UINT64_C(0xbba5537c4c6b7149)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x000000000000000b), UINT64_C(0x009f71873e9dbd2b)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x0f7c58766c54fe15)));
  EXPECT_EQ(A >> 99, IMP(UINT64_C(0x000000001fffffff)));
  EXPECT_EQ(A << 99, IMP(UINT64_C(0x9ca475b000000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x5b9f2cb56a484a19)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x2d162c51fce0d353)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x531e2cb2052735d5)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x575eacb3b7b7bff7)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x04408001b2908a22)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0xeef1ef9e8dcfa3f9), UINT64_C(0xd5f96a4723f42262)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x000000000000000b), UINT64_C(0x009f71873e9dbd2b)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x0f7c58766c54fe15)));
  EXPECT_EQ((T = A, T >>= 99), IMP(UINT64_C(0x000000001fffffff)));
  EXPECT_EQ((T = A, T <<= 99), IMP(UINT64_C(0x9ca475b000000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 99), IMP(UINT64_C(0xffffffffe88b5590), UINT64_C(0x767291d6dfffffff)));
  EXPECT_EQ(rol(A, 99), IMP(UINT64_C(0x9ca475b7ffffffff), UINT64_C(0xfffffffa22d5641d)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x445aac83b3948eb6)));
  EXPECT_EQ(T, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x445aac83b3948eb7)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x445aac83b3948eb6)));
  EXPECT_EQ(T, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x445aac83b3948eb5)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x445aac83b3948eb7)));
  EXPECT_EQ(T, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x445aac83b3948eb7)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x445aac83b3948eb5)));
  EXPECT_EQ(T, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x445aac83b3948eb5)));
}

TEST(i128, autogen_basic_57) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x445aac83b3948eb6));
  const IMP B = IMP(INT64_C(1676605912295652195));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x5b9f2cb56a484a19)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x2d162c51fce0d353)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x531e2cb2052735d5)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x575eacb3b7b7bff7)));
  EXPECT_EQ(A & B, IMP(INT64_C(306385519440333346)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0xeef1ef9e8dcfa3f9), UINT64_C(0xd5f96a4723f42262)));
  EXPECT_EQ(-A, IMP(UINT64_C(0x0000000000000000), UINT64_C(0xbba5537c4c6b714a)));
  EXPECT_EQ(~A, IMP(UINT64_C(0x0000000000000000), UINT64_C(0xbba5537c4c6b7149)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(INT64_C(-8)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(INT64_C(-108457951207724594)));
  EXPECT_EQ(A >> 99, IMP(INT64_C(-1)));
  EXPECT_EQ(A << 99, IMP(UINT64_C(0x9ca475b000000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x5b9f2cb56a484a19)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x2d162c51fce0d353)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x531e2cb2052735d5)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x575eacb3b7b7bff7)));
  EXPECT_EQ((T = A, T &= B), IMP(INT64_C(306385519440333346)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0xeef1ef9e8dcfa3f9), UINT64_C(0xd5f96a4723f42262)));
  EXPECT_EQ((T = A, T /= B), IMP(INT64_C(-8)));
  EXPECT_EQ((T = A, T %= B), IMP(INT64_C(-108457951207724594)));
  EXPECT_EQ((T = A, T >>= 99), IMP(INT64_C(-1)));
  EXPECT_EQ((T = A, T <<= 99), IMP(UINT64_C(0x9ca475b000000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 99), IMP(UINT64_C(0xffffffffe88b5590), UINT64_C(0x767291d6dfffffff)));
  EXPECT_EQ(rol(A, 99), IMP(UINT64_C(0x9ca475b7ffffffff), UINT64_C(0xfffffffa22d5641d)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x445aac83b3948eb6)));
  EXPECT_EQ(T, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x445aac83b3948eb7)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x445aac83b3948eb6)));
  EXPECT_EQ(T, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x445aac83b3948eb5)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x445aac83b3948eb7)));
  EXPECT_EQ(T, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x445aac83b3948eb7)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x445aac83b3948eb5)));
  EXPECT_EQ(T, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x445aac83b3948eb5)));
}

TEST(u128, autogen_basic_58) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(UINT64_C(0x36b23601c90b4ed8));
  const IMP B = IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x763b528f533ee14d));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(-INT64_C(5985978172879261659)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0xc076e37275cc6d8b)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x4089648e9a35af95)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x76bb768fdb3fefdd)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x36321201410a4048)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0xe2909b9930ab314e), UINT64_C(0x6609663189028ef8)));
  EXPECT_EQ(-A, IMP(-INT64_C(3941272005198434008)));
  EXPECT_EQ(~A, IMP(-INT64_C(3941272005198434009)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x36b23601c90b4ed8)));
  EXPECT_EQ(A >> 77, IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A << 77, IMP(UINT64_C(0x46c0392169db0000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(-INT64_C(5985978172879261659)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0xc076e37275cc6d8b)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x4089648e9a35af95)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x76bb768fdb3fefdd)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x36321201410a4048)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0xe2909b9930ab314e), UINT64_C(0x6609663189028ef8)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x36b23601c90b4ed8)));
  EXPECT_EQ((T = A, T >>= 77), IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T <<= 77), IMP(UINT64_C(0x46c0392169db0000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 77), IMP(UINT64_C(0x0001b591b00e485a), UINT64_C(0x76c0000000000000)));
  EXPECT_EQ(rol(A, 77), IMP(UINT64_C(0x46c0392169db0000), UINT64_C(0x00000000000006d6)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0x36b23601c90b4ed8)));
  EXPECT_EQ(T, IMP(UINT64_C(0x36b23601c90b4ed9)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0x36b23601c90b4ed8)));
  EXPECT_EQ(T, IMP(UINT64_C(0x36b23601c90b4ed7)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0x36b23601c90b4ed9)));
  EXPECT_EQ(T, IMP(UINT64_C(0x36b23601c90b4ed9)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0x36b23601c90b4ed7)));
  EXPECT_EQ(T, IMP(UINT64_C(0x36b23601c90b4ed7)));
}

TEST(i128, autogen_basic_59) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(INT64_C(3941272005198434008));
  const IMP B = IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x763b528f533ee14d));
  IMP T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, IMP(INT64_C(-5985978172879261659)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x0000000000000000), UINT64_C(0xc076e37275cc6d8b)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x4089648e9a35af95)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x76bb768fdb3fefdd)));
  EXPECT_EQ(A & B, IMP(INT64_C(3905203623479099464)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0xe2909b9930ab314e), UINT64_C(0x6609663189028ef8)));
  EXPECT_EQ(-A, IMP(INT64_C(-3941272005198434008)));
  EXPECT_EQ(~A, IMP(INT64_C(-3941272005198434009)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(INT64_C(0)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(INT64_C(3941272005198434008)));
  EXPECT_EQ(A >> 77, IMP(INT64_C(0)));
  EXPECT_EQ(A << 77, IMP(UINT64_C(0x46c0392169db0000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(INT64_C(-5985978172879261659)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x0000000000000000), UINT64_C(0xc076e37275cc6d8b)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x4089648e9a35af95)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x76bb768fdb3fefdd)));
  EXPECT_EQ((T = A, T &= B), IMP(INT64_C(3905203623479099464)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0xe2909b9930ab314e), UINT64_C(0x6609663189028ef8)));
  EXPECT_EQ((T = A, T /= B), IMP(INT64_C(0)));
  EXPECT_EQ((T = A, T %= B), IMP(INT64_C(3941272005198434008)));
  EXPECT_EQ((T = A, T >>= 77), IMP(INT64_C(0)));
  EXPECT_EQ((T = A, T <<= 77), IMP(UINT64_C(0x46c0392169db0000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 77), IMP(UINT64_C(0x0001b591b00e485a), UINT64_C(0x76c0000000000000)));
  EXPECT_EQ(rol(A, 77), IMP(UINT64_C(0x46c0392169db0000), UINT64_C(0x00000000000006d6)));
  EXPECT_EQ((T = A, T++), IMP(INT64_C(3941272005198434008)));
  EXPECT_EQ(T, IMP(INT64_C(3941272005198434009)));
  EXPECT_EQ((T = A, T--), IMP(INT64_C(3941272005198434008)));
  EXPECT_EQ(T, IMP(INT64_C(3941272005198434007)));
  EXPECT_EQ((T = A, ++T), IMP(INT64_C(3941272005198434009)));
  EXPECT_EQ(T, IMP(INT64_C(3941272005198434009)));
  EXPECT_EQ((T = A, --T), IMP(INT64_C(3941272005198434007)));
  EXPECT_EQ(T, IMP(INT64_C(3941272005198434007)));
}

TEST(u128, autogen_basic_60) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(UINT64_C(0x6fa3c7de06f527ca));
  const IMP B = IMP(UINT64_C(0x6157f780ee398547));
  IMP T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0xd0fbbf5ef52ead11)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x0e4bd05d18bba283)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x0ef4305ee8cca28d)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0x6ff7f7deeefda7cf)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x6103c78006310542)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x2a736b534cb5c285), UINT64_C(0x0bc80ac4f3a3fb06)));
  EXPECT_EQ(-A, IMP(-INT64_C(8044493115827234762)));
  EXPECT_EQ(~A, IMP(-INT64_C(8044493115827234763)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x0000000000000001)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x0e4bd05d18bba283)));
  EXPECT_EQ(A >> 71, IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A << 71, IMP(UINT64_C(0xd1e3ef037a93e500), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0xd0fbbf5ef52ead11)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x0e4bd05d18bba283)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x0ef4305ee8cca28d)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0x6ff7f7deeefda7cf)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x6103c78006310542)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x2a736b534cb5c285), UINT64_C(0x0bc80ac4f3a3fb06)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x0e4bd05d18bba283)));
  EXPECT_EQ((T = A, T >>= 71), IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T <<= 71), IMP(UINT64_C(0xd1e3ef037a93e500), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 71), IMP(UINT64_C(0x00df478fbc0dea4f), UINT64_C(0x9400000000000000)));
  EXPECT_EQ(rol(A, 71), IMP(UINT64_C(0xd1e3ef037a93e500), UINT64_C(0x0000000000000037)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0x6fa3c7de06f527ca)));
  EXPECT_EQ(T, IMP(UINT64_C(0x6fa3c7de06f527cb)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0x6fa3c7de06f527ca)));
  EXPECT_EQ(T, IMP(UINT64_C(0x6fa3c7de06f527c9)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0x6fa3c7de06f527cb)));
  EXPECT_EQ(T, IMP(UINT64_C(0x6fa3c7de06f527cb)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0x6fa3c7de06f527c9)));
  EXPECT_EQ(T, IMP(UINT64_C(0x6fa3c7de06f527c9)));
}

TEST(i128, autogen_basic_61) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(INT64_C(8044493115827234762));
  const IMP B = IMP(INT64_C(7014347077777458503));
  IMP T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x0000000000000000), UINT64_C(0xd0fbbf5ef52ead11)));
  EXPECT_EQ(A - B, IMP(INT64_C(1030146038049776259)));
  EXPECT_EQ(A ^ B, IMP(INT64_C(1077539395039175309)));
  EXPECT_EQ(A | B, IMP(INT64_C(8068189794321934287)));
  EXPECT_EQ(A & B, IMP(INT64_C(6990650399282758978)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x2a736b534cb5c285), UINT64_C(0x0bc80ac4f3a3fb06)));
  EXPECT_EQ(-A, IMP(INT64_C(-8044493115827234762)));
  EXPECT_EQ(~A, IMP(INT64_C(-8044493115827234763)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(INT64_C(1)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(INT64_C(1030146038049776259)));
  EXPECT_EQ(A >> 71, IMP(INT64_C(0)));
  EXPECT_EQ(A << 71, IMP(UINT64_C(0xd1e3ef037a93e500), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x0000000000000000), UINT64_C(0xd0fbbf5ef52ead11)));
  EXPECT_EQ((T = A, T -= B), IMP(INT64_C(1030146038049776259)));
  EXPECT_EQ((T = A, T ^= B), IMP(INT64_C(1077539395039175309)));
  EXPECT_EQ((T = A, T |= B), IMP(INT64_C(8068189794321934287)));
  EXPECT_EQ((T = A, T &= B), IMP(INT64_C(6990650399282758978)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x2a736b534cb5c285), UINT64_C(0x0bc80ac4f3a3fb06)));
  EXPECT_EQ((T = A, T /= B), IMP(INT64_C(1)));
  EXPECT_EQ((T = A, T %= B), IMP(INT64_C(1030146038049776259)));
  EXPECT_EQ((T = A, T >>= 71), IMP(INT64_C(0)));
  EXPECT_EQ((T = A, T <<= 71), IMP(UINT64_C(0xd1e3ef037a93e500), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 71), IMP(UINT64_C(0x00df478fbc0dea4f), UINT64_C(0x9400000000000000)));
  EXPECT_EQ(rol(A, 71), IMP(UINT64_C(0xd1e3ef037a93e500), UINT64_C(0x0000000000000037)));
  EXPECT_EQ((T = A, T++), IMP(INT64_C(8044493115827234762)));
  EXPECT_EQ(T, IMP(INT64_C(8044493115827234763)));
  EXPECT_EQ((T = A, T--), IMP(INT64_C(8044493115827234762)));
  EXPECT_EQ(T, IMP(INT64_C(8044493115827234761)));
  EXPECT_EQ((T = A, ++T), IMP(INT64_C(8044493115827234763)));
  EXPECT_EQ(T, IMP(INT64_C(8044493115827234763)));
  EXPECT_EQ((T = A, --T), IMP(INT64_C(8044493115827234761)));
  EXPECT_EQ(T, IMP(INT64_C(8044493115827234761)));
}

TEST(u128, autogen_basic_62) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(UINT64_C(0xb1f0d7c68995260c), UINT64_C(0xdf1462dcd97b256b));
  const IMP B = IMP(UINT64_C(0x1c301dfbefceb5d1));
  IMP T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0xb1f0d7c68995260c), UINT64_C(0xfb4480d8c949db3c)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0xb1f0d7c68995260c), UINT64_C(0xc2e444e0e9ac6f9a)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0xb1f0d7c68995260c), UINT64_C(0xc3247f2736b590ba)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0xb1f0d7c68995260c), UINT64_C(0xdf347fffffffb5fb)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x1c1000d8c94a2541)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0xdfc04f6e22ace74a), UINT64_C(0x2d56a401a018335b)));
  EXPECT_EQ(-A, IMP(UINT64_C(0x4e0f2839766ad9f3), UINT64_C(0x20eb9d232684da95)));
  EXPECT_EQ(~A, IMP(UINT64_C(0x4e0f2839766ad9f3), UINT64_C(0x20eb9d232684da94)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x0000000000000006), UINT64_C(0x500a05a4294972f0)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x0a3b09eda9209f7b)));
  EXPECT_EQ(A >> 81, IMP(UINT64_C(0x000058f86be344ca)));
  EXPECT_EQ(A << 81, IMP(UINT64_C(0xc5b9b2f64ad60000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0xb1f0d7c68995260c), UINT64_C(0xfb4480d8c949db3c)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0xb1f0d7c68995260c), UINT64_C(0xc2e444e0e9ac6f9a)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0xb1f0d7c68995260c), UINT64_C(0xc3247f2736b590ba)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0xb1f0d7c68995260c), UINT64_C(0xdf347fffffffb5fb)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x1c1000d8c94a2541)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0xdfc04f6e22ace74a), UINT64_C(0x2d56a401a018335b)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x0000000000000006), UINT64_C(0x500a05a4294972f0)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x0a3b09eda9209f7b)));
  EXPECT_EQ((T = A, T >>= 81), IMP(UINT64_C(0x000058f86be344ca)));
  EXPECT_EQ((T = A, T <<= 81), IMP(UINT64_C(0xc5b9b2f64ad60000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 81), IMP(UINT64_C(0x93066f8a316e6cbd), UINT64_C(0x92b5d8f86be344ca)));
  EXPECT_EQ(rol(A, 81), IMP(UINT64_C(0xc5b9b2f64ad763e1), UINT64_C(0xaf8d132a4c19be28)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0xb1f0d7c68995260c), UINT64_C(0xdf1462dcd97b256b)));
  EXPECT_EQ(T, IMP(UINT64_C(0xb1f0d7c68995260c), UINT64_C(0xdf1462dcd97b256c)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0xb1f0d7c68995260c), UINT64_C(0xdf1462dcd97b256b)));
  EXPECT_EQ(T, IMP(UINT64_C(0xb1f0d7c68995260c), UINT64_C(0xdf1462dcd97b256a)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0xb1f0d7c68995260c), UINT64_C(0xdf1462dcd97b256c)));
  EXPECT_EQ(T, IMP(UINT64_C(0xb1f0d7c68995260c), UINT64_C(0xdf1462dcd97b256c)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0xb1f0d7c68995260c), UINT64_C(0xdf1462dcd97b256a)));
  EXPECT_EQ(T, IMP(UINT64_C(0xb1f0d7c68995260c), UINT64_C(0xdf1462dcd97b256a)));
}

TEST(i128, autogen_basic_63) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(UINT64_C(0xb1f0d7c68995260c), UINT64_C(0xdf1462dcd97b256b));
  const IMP B = IMP(INT64_C(2031156399841392081));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0xb1f0d7c68995260c), UINT64_C(0xfb4480d8c949db3c)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0xb1f0d7c68995260c), UINT64_C(0xc2e444e0e9ac6f9a)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0xb1f0d7c68995260c), UINT64_C(0xc3247f2736b590ba)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0xb1f0d7c68995260c), UINT64_C(0xdf347fffffffb5fb)));
  EXPECT_EQ(A & B, IMP(INT64_C(2022117163779368257)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0xdfc04f6e22ace74a), UINT64_C(0x2d56a401a018335b)));
  EXPECT_EQ(-A, IMP(UINT64_C(0x4e0f2839766ad9f3), UINT64_C(0x20eb9d232684da95)));
  EXPECT_EQ(~A, IMP(UINT64_C(0x4e0f2839766ad9f3), UINT64_C(0x20eb9d232684da94)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0xfffffffffffffffd), UINT64_C(0x3b131d7b960f72eb)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(INT64_C(-1955837957172351856)));
  EXPECT_EQ(A >> 81, IMP(INT64_C(-42913503165238)));
  EXPECT_EQ(A << 81, IMP(UINT64_C(0xc5b9b2f64ad60000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0xb1f0d7c68995260c), UINT64_C(0xfb4480d8c949db3c)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0xb1f0d7c68995260c), UINT64_C(0xc2e444e0e9ac6f9a)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0xb1f0d7c68995260c), UINT64_C(0xc3247f2736b590ba)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0xb1f0d7c68995260c), UINT64_C(0xdf347fffffffb5fb)));
  EXPECT_EQ((T = A, T &= B), IMP(INT64_C(2022117163779368257)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0xdfc04f6e22ace74a), UINT64_C(0x2d56a401a018335b)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0xfffffffffffffffd), UINT64_C(0x3b131d7b960f72eb)));
  EXPECT_EQ((T = A, T %= B), IMP(INT64_C(-1955837957172351856)));
  EXPECT_EQ((T = A, T >>= 81), IMP(INT64_C(-42913503165238)));
  EXPECT_EQ((T = A, T <<= 81), IMP(UINT64_C(0xc5b9b2f64ad60000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 81), IMP(UINT64_C(0x93066f8a316e6cbd), UINT64_C(0x92b5d8f86be344ca)));
  EXPECT_EQ(rol(A, 81), IMP(UINT64_C(0xc5b9b2f64ad763e1), UINT64_C(0xaf8d132a4c19be28)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0xb1f0d7c68995260c), UINT64_C(0xdf1462dcd97b256b)));
  EXPECT_EQ(T, IMP(UINT64_C(0xb1f0d7c68995260c), UINT64_C(0xdf1462dcd97b256c)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0xb1f0d7c68995260c), UINT64_C(0xdf1462dcd97b256b)));
  EXPECT_EQ(T, IMP(UINT64_C(0xb1f0d7c68995260c), UINT64_C(0xdf1462dcd97b256a)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0xb1f0d7c68995260c), UINT64_C(0xdf1462dcd97b256c)));
  EXPECT_EQ(T, IMP(UINT64_C(0xb1f0d7c68995260c), UINT64_C(0xdf1462dcd97b256c)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0xb1f0d7c68995260c), UINT64_C(0xdf1462dcd97b256a)));
  EXPECT_EQ(T, IMP(UINT64_C(0xb1f0d7c68995260c), UINT64_C(0xdf1462dcd97b256a)));
}

TEST(u128, autogen_basic_64) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(UINT64_C(0x483591f71d9d0880));
  const IMP B = IMP(UINT64_C(0xbbec1fccd4e42a1e), UINT64_C(0x197754b0ffddca95));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0xbbec1fccd4e42a1e), UINT64_C(0x61ace6a81d7ad315)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x4413e0332b1bd5e2), UINT64_C(0x2ebe3d461dbf3deb)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0xbbec1fccd4e42a1e), UINT64_C(0x5142c547e240c215)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0xbbec1fccd4e42a1e), UINT64_C(0x5977d5f7ffddca95)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x083510b01d9d0880)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0xdf2f3ac24a747437), UINT64_C(0xcb6ec639fb9af280)));
  EXPECT_EQ(-A, IMP(-INT64_C(5203225435036256384)));
  EXPECT_EQ(~A, IMP(-INT64_C(5203225435036256385)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x483591f71d9d0880)));
  EXPECT_EQ(A >> 21, IMP(UINT64_C(0x00000241ac8fb8ec)));
  EXPECT_EQ(A << 21, IMP(UINT64_C(0x00000000000906b2), UINT64_C(0x3ee3b3a110000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0xbbec1fccd4e42a1e), UINT64_C(0x61ace6a81d7ad315)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x4413e0332b1bd5e2), UINT64_C(0x2ebe3d461dbf3deb)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0xbbec1fccd4e42a1e), UINT64_C(0x5142c547e240c215)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0xbbec1fccd4e42a1e), UINT64_C(0x5977d5f7ffddca95)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x083510b01d9d0880)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0xdf2f3ac24a747437), UINT64_C(0xcb6ec639fb9af280)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x483591f71d9d0880)));
  EXPECT_EQ((T = A, T >>= 21), IMP(UINT64_C(0x00000241ac8fb8ec)));
  EXPECT_EQ((T = A, T <<= 21), IMP(UINT64_C(0x00000000000906b2), UINT64_C(0x3ee3b3a110000000)));
  EXPECT_EQ(ror(A, 21), IMP(UINT64_C(0xe844000000000000), UINT64_C(0x00000241ac8fb8ec)));
  EXPECT_EQ(rol(A, 21), IMP(UINT64_C(0x00000000000906b2), UINT64_C(0x3ee3b3a110000000)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0x483591f71d9d0880)));
  EXPECT_EQ(T, IMP(UINT64_C(0x483591f71d9d0881)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0x483591f71d9d0880)));
  EXPECT_EQ(T, IMP(UINT64_C(0x483591f71d9d087f)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0x483591f71d9d0881)));
  EXPECT_EQ(T, IMP(UINT64_C(0x483591f71d9d0881)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0x483591f71d9d087f)));
  EXPECT_EQ(T, IMP(UINT64_C(0x483591f71d9d087f)));
}

TEST(i128, autogen_basic_65) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(INT64_C(5203225435036256384));
  const IMP B = IMP(UINT64_C(0xbbec1fccd4e42a1e), UINT64_C(0x197754b0ffddca95));
  IMP T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0xbbec1fccd4e42a1e), UINT64_C(0x61ace6a81d7ad315)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x4413e0332b1bd5e2), UINT64_C(0x2ebe3d461dbf3deb)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0xbbec1fccd4e42a1e), UINT64_C(0x5142c547e240c215)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0xbbec1fccd4e42a1e), UINT64_C(0x5977d5f7ffddca95)));
  EXPECT_EQ(A & B, IMP(INT64_C(591397274666207360)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0xdf2f3ac24a747437), UINT64_C(0xcb6ec639fb9af280)));
  EXPECT_EQ(-A, IMP(INT64_C(-5203225435036256384)));
  EXPECT_EQ(~A, IMP(INT64_C(-5203225435036256385)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(INT64_C(0)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(INT64_C(5203225435036256384)));
  EXPECT_EQ(A >> 21, IMP(INT64_C(2481091229932)));
  EXPECT_EQ(A << 21, IMP(UINT64_C(0x00000000000906b2), UINT64_C(0x3ee3b3a110000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0xbbec1fccd4e42a1e), UINT64_C(0x61ace6a81d7ad315)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x4413e0332b1bd5e2), UINT64_C(0x2ebe3d461dbf3deb)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0xbbec1fccd4e42a1e), UINT64_C(0x5142c547e240c215)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0xbbec1fccd4e42a1e), UINT64_C(0x5977d5f7ffddca95)));
  EXPECT_EQ((T = A, T &= B), IMP(INT64_C(591397274666207360)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0xdf2f3ac24a747437), UINT64_C(0xcb6ec639fb9af280)));
  EXPECT_EQ((T = A, T /= B), IMP(INT64_C(0)));
  EXPECT_EQ((T = A, T %= B), IMP(INT64_C(5203225435036256384)));
  EXPECT_EQ((T = A, T >>= 21), IMP(INT64_C(2481091229932)));
  EXPECT_EQ((T = A, T <<= 21), IMP(UINT64_C(0x00000000000906b2), UINT64_C(0x3ee3b3a110000000)));
  EXPECT_EQ(ror(A, 21), IMP(UINT64_C(0xe844000000000000), UINT64_C(0x00000241ac8fb8ec)));
  EXPECT_EQ(rol(A, 21), IMP(UINT64_C(0x00000000000906b2), UINT64_C(0x3ee3b3a110000000)));
  EXPECT_EQ((T = A, T++), IMP(INT64_C(5203225435036256384)));
  EXPECT_EQ(T, IMP(INT64_C(5203225435036256385)));
  EXPECT_EQ((T = A, T--), IMP(INT64_C(5203225435036256384)));
  EXPECT_EQ(T, IMP(INT64_C(5203225435036256383)));
  EXPECT_EQ((T = A, ++T), IMP(INT64_C(5203225435036256385)));
  EXPECT_EQ(T, IMP(INT64_C(5203225435036256385)));
  EXPECT_EQ((T = A, --T), IMP(INT64_C(5203225435036256383)));
  EXPECT_EQ(T, IMP(INT64_C(5203225435036256383)));
}

TEST(u128, autogen_basic_66) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(UINT64_C(0x789deafd498fa399), UINT64_C(0xc8347c93cbdd2a34));
  const IMP B = IMP(UINT64_C(0x3bad150c05b97fcf), UINT64_C(0xa8814fbed6e5a9b2));
  IMP T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0xb44b00094f492369), UINT64_C(0x70b5cc52a2c2d3e6)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x3cf0d5f143d623ca), UINT64_C(0x1fb32cd4f4f78082)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x4330fff14c36dc56), UINT64_C(0x60b5332d1d388386)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0x7bbdfffd4dbfffdf), UINT64_C(0xe8b57fbfdffdabb6)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x388d000c01892389), UINT64_C(0x88004c92c2c52830)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x5ff79fc67fce18f9), UINT64_C(0xc9bbcd0ef927ac28)));
  EXPECT_EQ(-A, IMP(UINT64_C(0x87621502b6705c66), UINT64_C(0x37cb836c3422d5cc)));
  EXPECT_EQ(~A, IMP(UINT64_C(0x87621502b6705c66), UINT64_C(0x37cb836c3422d5cb)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x0000000000000002)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x0143c0e53e1ca3fa), UINT64_C(0x7731dd161e11d6d0)));
  EXPECT_EQ(A >> 50, IMP(UINT64_C(0x0000000000001e27), UINT64_C(0x7abf5263e8e6720d)));
  EXPECT_EQ(A << 50, IMP(UINT64_C(0x8e6720d1f24f2f74), UINT64_C(0xa8d0000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0xb44b00094f492369), UINT64_C(0x70b5cc52a2c2d3e6)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x3cf0d5f143d623ca), UINT64_C(0x1fb32cd4f4f78082)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x4330fff14c36dc56), UINT64_C(0x60b5332d1d388386)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0x7bbdfffd4dbfffdf), UINT64_C(0xe8b57fbfdffdabb6)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x388d000c01892389), UINT64_C(0x88004c92c2c52830)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x5ff79fc67fce18f9), UINT64_C(0xc9bbcd0ef927ac28)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x0000000000000002)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x0143c0e53e1ca3fa), UINT64_C(0x7731dd161e11d6d0)));
  EXPECT_EQ((T = A, T >>= 50), IMP(UINT64_C(0x0000000000001e27), UINT64_C(0x7abf5263e8e6720d)));
  EXPECT_EQ((T = A, T <<= 50), IMP(UINT64_C(0x8e6720d1f24f2f74), UINT64_C(0xa8d0000000000000)));
  EXPECT_EQ(ror(A, 50), IMP(UINT64_C(0x1f24f2f74a8d1e27), UINT64_C(0x7abf5263e8e6720d)));
  EXPECT_EQ(rol(A, 50), IMP(UINT64_C(0x8e6720d1f24f2f74), UINT64_C(0xa8d1e277abf5263e)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0x789deafd498fa399), UINT64_C(0xc8347c93cbdd2a34)));
  EXPECT_EQ(T, IMP(UINT64_C(0x789deafd498fa399), UINT64_C(0xc8347c93cbdd2a35)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0x789deafd498fa399), UINT64_C(0xc8347c93cbdd2a34)));
  EXPECT_EQ(T, IMP(UINT64_C(0x789deafd498fa399), UINT64_C(0xc8347c93cbdd2a33)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0x789deafd498fa399), UINT64_C(0xc8347c93cbdd2a35)));
  EXPECT_EQ(T, IMP(UINT64_C(0x789deafd498fa399), UINT64_C(0xc8347c93cbdd2a35)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0x789deafd498fa399), UINT64_C(0xc8347c93cbdd2a33)));
  EXPECT_EQ(T, IMP(UINT64_C(0x789deafd498fa399), UINT64_C(0xc8347c93cbdd2a33)));
}

TEST(i128, autogen_basic_67) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(UINT64_C(0x789deafd498fa399), UINT64_C(0xc8347c93cbdd2a34));
  const IMP B = IMP(UINT64_C(0x3bad150c05b97fcf), UINT64_C(0xa8814fbed6e5a9b2));
  IMP T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0xb44b00094f492369), UINT64_C(0x70b5cc52a2c2d3e6)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x3cf0d5f143d623ca), UINT64_C(0x1fb32cd4f4f78082)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x4330fff14c36dc56), UINT64_C(0x60b5332d1d388386)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0x7bbdfffd4dbfffdf), UINT64_C(0xe8b57fbfdffdabb6)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x388d000c01892389), UINT64_C(0x88004c92c2c52830)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x5ff79fc67fce18f9), UINT64_C(0xc9bbcd0ef927ac28)));
  EXPECT_EQ(-A, IMP(UINT64_C(0x87621502b6705c66), UINT64_C(0x37cb836c3422d5cc)));
  EXPECT_EQ(~A, IMP(UINT64_C(0x87621502b6705c66), UINT64_C(0x37cb836c3422d5cb)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(INT64_C(2)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x0143c0e53e1ca3fa), UINT64_C(0x7731dd161e11d6d0)));
  EXPECT_EQ(A >> 50, IMP(UINT64_C(0x0000000000001e27), UINT64_C(0x7abf5263e8e6720d)));
  EXPECT_EQ(A << 50, IMP(UINT64_C(0x8e6720d1f24f2f74), UINT64_C(0xa8d0000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0xb44b00094f492369), UINT64_C(0x70b5cc52a2c2d3e6)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x3cf0d5f143d623ca), UINT64_C(0x1fb32cd4f4f78082)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x4330fff14c36dc56), UINT64_C(0x60b5332d1d388386)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0x7bbdfffd4dbfffdf), UINT64_C(0xe8b57fbfdffdabb6)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x388d000c01892389), UINT64_C(0x88004c92c2c52830)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x5ff79fc67fce18f9), UINT64_C(0xc9bbcd0ef927ac28)));
  EXPECT_EQ((T = A, T /= B), IMP(INT64_C(2)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x0143c0e53e1ca3fa), UINT64_C(0x7731dd161e11d6d0)));
  EXPECT_EQ((T = A, T >>= 50), IMP(UINT64_C(0x0000000000001e27), UINT64_C(0x7abf5263e8e6720d)));
  EXPECT_EQ((T = A, T <<= 50), IMP(UINT64_C(0x8e6720d1f24f2f74), UINT64_C(0xa8d0000000000000)));
  EXPECT_EQ(ror(A, 50), IMP(UINT64_C(0x1f24f2f74a8d1e27), UINT64_C(0x7abf5263e8e6720d)));
  EXPECT_EQ(rol(A, 50), IMP(UINT64_C(0x8e6720d1f24f2f74), UINT64_C(0xa8d1e277abf5263e)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0x789deafd498fa399), UINT64_C(0xc8347c93cbdd2a34)));
  EXPECT_EQ(T, IMP(UINT64_C(0x789deafd498fa399), UINT64_C(0xc8347c93cbdd2a35)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0x789deafd498fa399), UINT64_C(0xc8347c93cbdd2a34)));
  EXPECT_EQ(T, IMP(UINT64_C(0x789deafd498fa399), UINT64_C(0xc8347c93cbdd2a33)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0x789deafd498fa399), UINT64_C(0xc8347c93cbdd2a35)));
  EXPECT_EQ(T, IMP(UINT64_C(0x789deafd498fa399), UINT64_C(0xc8347c93cbdd2a35)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0x789deafd498fa399), UINT64_C(0xc8347c93cbdd2a33)));
  EXPECT_EQ(T, IMP(UINT64_C(0x789deafd498fa399), UINT64_C(0xc8347c93cbdd2a33)));
}

TEST(u128, autogen_basic_68) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(UINT64_C(0xb3cd1a43193804dd), UINT64_C(0xf90d30b2a14aff28));
  const IMP B = IMP(UINT64_C(0x8e25ff01857bb873), UINT64_C(0x10a883f74d96fa86));
  IMP T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x41f319449eb3bd51), UINT64_C(0x09b5b4a9eee1f9ae)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x25a71b4193bc4c6a), UINT64_C(0xe864acbb53b404a2)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x3de8e5429c43bcae), UINT64_C(0xe9a5b345ecdc05ae)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0xbfedff439d7bbcff), UINT64_C(0xf9adb3f7eddeffae)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x82051a0101380051), UINT64_C(0x100800b20102fa00)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x017703466d4d83cc), UINT64_C(0x73d1a74c33de9ef0)));
  EXPECT_EQ(-A, IMP(UINT64_C(0x4c32e5bce6c7fb22), UINT64_C(0x06f2cf4d5eb500d8)));
  EXPECT_EQ(~A, IMP(UINT64_C(0x4c32e5bce6c7fb22), UINT64_C(0x06f2cf4d5eb500d7)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x0000000000000001)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x25a71b4193bc4c6a), UINT64_C(0xe864acbb53b404a2)));
  EXPECT_EQ(A >> 6, IMP(UINT64_C(0x02cf34690c64e013), UINT64_C(0x77e434c2ca852bfc)));
  EXPECT_EQ(A << 6, IMP(UINT64_C(0xf34690c64e01377e), UINT64_C(0x434c2ca852bfca00)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x41f319449eb3bd51), UINT64_C(0x09b5b4a9eee1f9ae)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x25a71b4193bc4c6a), UINT64_C(0xe864acbb53b404a2)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x3de8e5429c43bcae), UINT64_C(0xe9a5b345ecdc05ae)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0xbfedff439d7bbcff), UINT64_C(0xf9adb3f7eddeffae)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x82051a0101380051), UINT64_C(0x100800b20102fa00)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x017703466d4d83cc), UINT64_C(0x73d1a74c33de9ef0)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x25a71b4193bc4c6a), UINT64_C(0xe864acbb53b404a2)));
  EXPECT_EQ((T = A, T >>= 6), IMP(UINT64_C(0x02cf34690c64e013), UINT64_C(0x77e434c2ca852bfc)));
  EXPECT_EQ((T = A, T <<= 6), IMP(UINT64_C(0xf34690c64e01377e), UINT64_C(0x434c2ca852bfca00)));
  EXPECT_EQ(ror(A, 6), IMP(UINT64_C(0xa2cf34690c64e013), UINT64_C(0x77e434c2ca852bfc)));
  EXPECT_EQ(rol(A, 6), IMP(UINT64_C(0xf34690c64e01377e), UINT64_C(0x434c2ca852bfca2c)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0xb3cd1a43193804dd), UINT64_C(0xf90d30b2a14aff28)));
  EXPECT_EQ(T, IMP(UINT64_C(0xb3cd1a43193804dd), UINT64_C(0xf90d30b2a14aff29)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0xb3cd1a43193804dd), UINT64_C(0xf90d30b2a14aff28)));
  EXPECT_EQ(T, IMP(UINT64_C(0xb3cd1a43193804dd), UINT64_C(0xf90d30b2a14aff27)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0xb3cd1a43193804dd), UINT64_C(0xf90d30b2a14aff29)));
  EXPECT_EQ(T, IMP(UINT64_C(0xb3cd1a43193804dd), UINT64_C(0xf90d30b2a14aff29)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0xb3cd1a43193804dd), UINT64_C(0xf90d30b2a14aff27)));
  EXPECT_EQ(T, IMP(UINT64_C(0xb3cd1a43193804dd), UINT64_C(0xf90d30b2a14aff27)));
}

TEST(i128, autogen_basic_69) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(UINT64_C(0xb3cd1a43193804dd), UINT64_C(0xf90d30b2a14aff28));
  const IMP B = IMP(UINT64_C(0x8e25ff01857bb873), UINT64_C(0x10a883f74d96fa86));
  IMP T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x41f319449eb3bd51), UINT64_C(0x09b5b4a9eee1f9ae)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x25a71b4193bc4c6a), UINT64_C(0xe864acbb53b404a2)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x3de8e5429c43bcae), UINT64_C(0xe9a5b345ecdc05ae)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0xbfedff439d7bbcff), UINT64_C(0xf9adb3f7eddeffae)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x82051a0101380051), UINT64_C(0x100800b20102fa00)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x017703466d4d83cc), UINT64_C(0x73d1a74c33de9ef0)));
  EXPECT_EQ(-A, IMP(UINT64_C(0x4c32e5bce6c7fb22), UINT64_C(0x06f2cf4d5eb500d8)));
  EXPECT_EQ(~A, IMP(UINT64_C(0x4c32e5bce6c7fb22), UINT64_C(0x06f2cf4d5eb500d7)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(INT64_C(0)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0xb3cd1a43193804dd), UINT64_C(0xf90d30b2a14aff28)));
  EXPECT_EQ(A >> 6, IMP(UINT64_C(0xfecf34690c64e013), UINT64_C(0x77e434c2ca852bfc)));
  EXPECT_EQ(A << 6, IMP(UINT64_C(0xf34690c64e01377e), UINT64_C(0x434c2ca852bfca00)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x41f319449eb3bd51), UINT64_C(0x09b5b4a9eee1f9ae)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x25a71b4193bc4c6a), UINT64_C(0xe864acbb53b404a2)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x3de8e5429c43bcae), UINT64_C(0xe9a5b345ecdc05ae)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0xbfedff439d7bbcff), UINT64_C(0xf9adb3f7eddeffae)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x82051a0101380051), UINT64_C(0x100800b20102fa00)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x017703466d4d83cc), UINT64_C(0x73d1a74c33de9ef0)));
  EXPECT_EQ((T = A, T /= B), IMP(INT64_C(0)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0xb3cd1a43193804dd), UINT64_C(0xf90d30b2a14aff28)));
  EXPECT_EQ((T = A, T >>= 6), IMP(UINT64_C(0xfecf34690c64e013), UINT64_C(0x77e434c2ca852bfc)));
  EXPECT_EQ((T = A, T <<= 6), IMP(UINT64_C(0xf34690c64e01377e), UINT64_C(0x434c2ca852bfca00)));
  EXPECT_EQ(ror(A, 6), IMP(UINT64_C(0xa2cf34690c64e013), UINT64_C(0x77e434c2ca852bfc)));
  EXPECT_EQ(rol(A, 6), IMP(UINT64_C(0xf34690c64e01377e), UINT64_C(0x434c2ca852bfca2c)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0xb3cd1a43193804dd), UINT64_C(0xf90d30b2a14aff28)));
  EXPECT_EQ(T, IMP(UINT64_C(0xb3cd1a43193804dd), UINT64_C(0xf90d30b2a14aff29)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0xb3cd1a43193804dd), UINT64_C(0xf90d30b2a14aff28)));
  EXPECT_EQ(T, IMP(UINT64_C(0xb3cd1a43193804dd), UINT64_C(0xf90d30b2a14aff27)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0xb3cd1a43193804dd), UINT64_C(0xf90d30b2a14aff29)));
  EXPECT_EQ(T, IMP(UINT64_C(0xb3cd1a43193804dd), UINT64_C(0xf90d30b2a14aff29)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0xb3cd1a43193804dd), UINT64_C(0xf90d30b2a14aff27)));
  EXPECT_EQ(T, IMP(UINT64_C(0xb3cd1a43193804dd), UINT64_C(0xf90d30b2a14aff27)));
}

TEST(u128, autogen_basic_70) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(UINT64_C(0xba5535c4f3def261), UINT64_C(0x0000000000000000));
  const IMP B = IMP(UINT64_C(0x1762c757e8733357), UINT64_C(0x202992d9afc2b09a));
  IMP T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0xd1b7fd1cdc5225b8), UINT64_C(0x202992d9afc2b09a)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0xa2f26e6d0b6bbf09), UINT64_C(0xdfd66d26503d4f66)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0xad37f2931badc136), UINT64_C(0x202992d9afc2b09a)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0xbf77f7d7fbfff377), UINT64_C(0x202992d9afc2b09a)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x12400544e0523241), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0xddefbd00f7427e5a), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(-A, IMP(UINT64_C(0x45aaca3b0c210d9f), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(~A, IMP(UINT64_C(0x45aaca3b0c210d9e), UINT64_C(0xffffffffffffffff)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x0000000000000007)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x16a1c25d98b88aff), UINT64_C(0x1edcfc0c31ad2bca)));
  EXPECT_EQ(A >> 26, IMP(UINT64_C(0x0000002e954d713c), UINT64_C(0xf7bc984000000000)));
  EXPECT_EQ(A << 26, IMP(UINT64_C(0x13cf7bc984000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0xd1b7fd1cdc5225b8), UINT64_C(0x202992d9afc2b09a)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0xa2f26e6d0b6bbf09), UINT64_C(0xdfd66d26503d4f66)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0xad37f2931badc136), UINT64_C(0x202992d9afc2b09a)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0xbf77f7d7fbfff377), UINT64_C(0x202992d9afc2b09a)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x12400544e0523241), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0xddefbd00f7427e5a), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x0000000000000007)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x16a1c25d98b88aff), UINT64_C(0x1edcfc0c31ad2bca)));
  EXPECT_EQ((T = A, T >>= 26), IMP(UINT64_C(0x0000002e954d713c), UINT64_C(0xf7bc984000000000)));
  EXPECT_EQ((T = A, T <<= 26), IMP(UINT64_C(0x13cf7bc984000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 26), IMP(UINT64_C(0x0000002e954d713c), UINT64_C(0xf7bc984000000000)));
  EXPECT_EQ(rol(A, 26), IMP(UINT64_C(0x13cf7bc984000000), UINT64_C(0x0000000002e954d7)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0xba5535c4f3def261), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, IMP(UINT64_C(0xba5535c4f3def261), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0xba5535c4f3def261), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, IMP(UINT64_C(0xba5535c4f3def260), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0xba5535c4f3def261), UINT64_C(0x0000000000000001)));
  EXPECT_EQ(T, IMP(UINT64_C(0xba5535c4f3def261), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0xba5535c4f3def260), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ(T, IMP(UINT64_C(0xba5535c4f3def260), UINT64_C(0xffffffffffffffff)));
}

TEST(i128, autogen_basic_71) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(UINT64_C(0xba5535c4f3def261), UINT64_C(0x0000000000000000));
  const IMP B = IMP(UINT64_C(0x1762c757e8733357), UINT64_C(0x202992d9afc2b09a));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0xd1b7fd1cdc5225b8), UINT64_C(0x202992d9afc2b09a)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0xa2f26e6d0b6bbf09), UINT64_C(0xdfd66d26503d4f66)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0xad37f2931badc136), UINT64_C(0x202992d9afc2b09a)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0xbf77f7d7fbfff377), UINT64_C(0x202992d9afc2b09a)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x12400544e0523241), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0xddefbd00f7427e5a), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(-A, IMP(UINT64_C(0x45aaca3b0c210d9f), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(~A, IMP(UINT64_C(0x45aaca3b0c210d9e), UINT64_C(0xffffffffffffffff)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(INT64_C(-2)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0xe91ac474c4c5590f), UINT64_C(0x405325b35f856134)));
  EXPECT_EQ(A >> 26, IMP(UINT64_C(0xffffffee954d713c), UINT64_C(0xf7bc984000000000)));
  EXPECT_EQ(A << 26, IMP(UINT64_C(0x13cf7bc984000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0xd1b7fd1cdc5225b8), UINT64_C(0x202992d9afc2b09a)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0xa2f26e6d0b6bbf09), UINT64_C(0xdfd66d26503d4f66)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0xad37f2931badc136), UINT64_C(0x202992d9afc2b09a)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0xbf77f7d7fbfff377), UINT64_C(0x202992d9afc2b09a)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x12400544e0523241), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0xddefbd00f7427e5a), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T /= B), IMP(INT64_C(-2)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0xe91ac474c4c5590f), UINT64_C(0x405325b35f856134)));
  EXPECT_EQ((T = A, T >>= 26), IMP(UINT64_C(0xffffffee954d713c), UINT64_C(0xf7bc984000000000)));
  EXPECT_EQ((T = A, T <<= 26), IMP(UINT64_C(0x13cf7bc984000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 26), IMP(UINT64_C(0x0000002e954d713c), UINT64_C(0xf7bc984000000000)));
  EXPECT_EQ(rol(A, 26), IMP(UINT64_C(0x13cf7bc984000000), UINT64_C(0x0000000002e954d7)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0xba5535c4f3def261), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, IMP(UINT64_C(0xba5535c4f3def261), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0xba5535c4f3def261), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, IMP(UINT64_C(0xba5535c4f3def260), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0xba5535c4f3def261), UINT64_C(0x0000000000000001)));
  EXPECT_EQ(T, IMP(UINT64_C(0xba5535c4f3def261), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0xba5535c4f3def260), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ(T, IMP(UINT64_C(0xba5535c4f3def260), UINT64_C(0xffffffffffffffff)));
}

TEST(u128, autogen_basic_72) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(UINT64_C(0x21e308fee99f947b), UINT64_C(0x019b35c922b49fee));
  const IMP B = IMP(UINT64_C(0x449ad3de4e4b3b5c), UINT64_C(0x0000000000000000));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x667ddcdd37eacfd7), UINT64_C(0x019b35c922b49fee)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0xdd4835209b54591f), UINT64_C(0x019b35c922b49fee)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x6579db20a7d4af27), UINT64_C(0x019b35c922b49fee)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0x65fbdbfeefdfbf7f), UINT64_C(0x019b35c922b49fee)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x008200de480b1058), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0xc94cbd51787f5388), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(-A, IMP(UINT64_C(0xde1cf70116606b84), UINT64_C(0xfe64ca36dd4b6012)));
  EXPECT_EQ(~A, IMP(UINT64_C(0xde1cf70116606b84), UINT64_C(0xfe64ca36dd4b6011)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x21e308fee99f947b), UINT64_C(0x019b35c922b49fee)));
  EXPECT_EQ(A >> 0, IMP(UINT64_C(0x21e308fee99f947b), UINT64_C(0x019b35c922b49fee)));
  EXPECT_EQ(A << 0, IMP(UINT64_C(0x21e308fee99f947b), UINT64_C(0x019b35c922b49fee)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x667ddcdd37eacfd7), UINT64_C(0x019b35c922b49fee)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0xdd4835209b54591f), UINT64_C(0x019b35c922b49fee)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x6579db20a7d4af27), UINT64_C(0x019b35c922b49fee)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0x65fbdbfeefdfbf7f), UINT64_C(0x019b35c922b49fee)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x008200de480b1058), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0xc94cbd51787f5388), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x21e308fee99f947b), UINT64_C(0x019b35c922b49fee)));
  EXPECT_EQ((T = A, T >>= 0), IMP(UINT64_C(0x21e308fee99f947b), UINT64_C(0x019b35c922b49fee)));
  EXPECT_EQ((T = A, T <<= 0), IMP(UINT64_C(0x21e308fee99f947b), UINT64_C(0x019b35c922b49fee)));
  EXPECT_EQ(ror(A, 0), IMP(UINT64_C(0x21e308fee99f947b), UINT64_C(0x019b35c922b49fee)));
  EXPECT_EQ(rol(A, 0), IMP(UINT64_C(0x21e308fee99f947b), UINT64_C(0x019b35c922b49fee)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0x21e308fee99f947b), UINT64_C(0x019b35c922b49fee)));
  EXPECT_EQ(T, IMP(UINT64_C(0x21e308fee99f947b), UINT64_C(0x019b35c922b49fef)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0x21e308fee99f947b), UINT64_C(0x019b35c922b49fee)));
  EXPECT_EQ(T, IMP(UINT64_C(0x21e308fee99f947b), UINT64_C(0x019b35c922b49fed)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0x21e308fee99f947b), UINT64_C(0x019b35c922b49fef)));
  EXPECT_EQ(T, IMP(UINT64_C(0x21e308fee99f947b), UINT64_C(0x019b35c922b49fef)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0x21e308fee99f947b), UINT64_C(0x019b35c922b49fed)));
  EXPECT_EQ(T, IMP(UINT64_C(0x21e308fee99f947b), UINT64_C(0x019b35c922b49fed)));
}

TEST(i128, autogen_basic_73) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(UINT64_C(0x21e308fee99f947b), UINT64_C(0x019b35c922b49fee));
  const IMP B = IMP(UINT64_C(0x449ad3de4e4b3b5c), UINT64_C(0x0000000000000000));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x667ddcdd37eacfd7), UINT64_C(0x019b35c922b49fee)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0xdd4835209b54591f), UINT64_C(0x019b35c922b49fee)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x6579db20a7d4af27), UINT64_C(0x019b35c922b49fee)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0x65fbdbfeefdfbf7f), UINT64_C(0x019b35c922b49fee)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x008200de480b1058), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0xc94cbd51787f5388), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(-A, IMP(UINT64_C(0xde1cf70116606b84), UINT64_C(0xfe64ca36dd4b6012)));
  EXPECT_EQ(~A, IMP(UINT64_C(0xde1cf70116606b84), UINT64_C(0xfe64ca36dd4b6011)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(INT64_C(0)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x21e308fee99f947b), UINT64_C(0x019b35c922b49fee)));
  EXPECT_EQ(A >> 0, IMP(UINT64_C(0x21e308fee99f947b), UINT64_C(0x019b35c922b49fee)));
  EXPECT_EQ(A << 0, IMP(UINT64_C(0x21e308fee99f947b), UINT64_C(0x019b35c922b49fee)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x667ddcdd37eacfd7), UINT64_C(0x019b35c922b49fee)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0xdd4835209b54591f), UINT64_C(0x019b35c922b49fee)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x6579db20a7d4af27), UINT64_C(0x019b35c922b49fee)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0x65fbdbfeefdfbf7f), UINT64_C(0x019b35c922b49fee)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x008200de480b1058), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0xc94cbd51787f5388), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T /= B), IMP(INT64_C(0)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x21e308fee99f947b), UINT64_C(0x019b35c922b49fee)));
  EXPECT_EQ((T = A, T >>= 0), IMP(UINT64_C(0x21e308fee99f947b), UINT64_C(0x019b35c922b49fee)));
  EXPECT_EQ((T = A, T <<= 0), IMP(UINT64_C(0x21e308fee99f947b), UINT64_C(0x019b35c922b49fee)));
  EXPECT_EQ(ror(A, 0), IMP(UINT64_C(0x21e308fee99f947b), UINT64_C(0x019b35c922b49fee)));
  EXPECT_EQ(rol(A, 0), IMP(UINT64_C(0x21e308fee99f947b), UINT64_C(0x019b35c922b49fee)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0x21e308fee99f947b), UINT64_C(0x019b35c922b49fee)));
  EXPECT_EQ(T, IMP(UINT64_C(0x21e308fee99f947b), UINT64_C(0x019b35c922b49fef)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0x21e308fee99f947b), UINT64_C(0x019b35c922b49fee)));
  EXPECT_EQ(T, IMP(UINT64_C(0x21e308fee99f947b), UINT64_C(0x019b35c922b49fed)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0x21e308fee99f947b), UINT64_C(0x019b35c922b49fef)));
  EXPECT_EQ(T, IMP(UINT64_C(0x21e308fee99f947b), UINT64_C(0x019b35c922b49fef)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0x21e308fee99f947b), UINT64_C(0x019b35c922b49fed)));
  EXPECT_EQ(T, IMP(UINT64_C(0x21e308fee99f947b), UINT64_C(0x019b35c922b49fed)));
}

TEST(u128, autogen_basic_74) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(UINT64_C(0x86b76ab76f25d2d0), UINT64_C(0x0000000000000000));
  const IMP B = IMP(UINT64_C(0x0cd87f836a04b025), UINT64_C(0x0000000000000000));
  IMP T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x938fea3ad92a82f5), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x79deeb34052122ab), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x8a6f1534052162f5), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0x8eff7fb76f25f2f5), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x04906a836a049000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(-A, IMP(UINT64_C(0x7948954890da2d30), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(~A, IMP(UINT64_C(0x7948954890da2d2f), UINT64_C(0xffffffffffffffff)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x000000000000000a)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x06426f954af6f15e), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A >> 0, IMP(UINT64_C(0x86b76ab76f25d2d0), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A << 0, IMP(UINT64_C(0x86b76ab76f25d2d0), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x938fea3ad92a82f5), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x79deeb34052122ab), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x8a6f1534052162f5), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0x8eff7fb76f25f2f5), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x04906a836a049000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x000000000000000a)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x06426f954af6f15e), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T >>= 0), IMP(UINT64_C(0x86b76ab76f25d2d0), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T <<= 0), IMP(UINT64_C(0x86b76ab76f25d2d0), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 0), IMP(UINT64_C(0x86b76ab76f25d2d0), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(rol(A, 0), IMP(UINT64_C(0x86b76ab76f25d2d0), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0x86b76ab76f25d2d0), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, IMP(UINT64_C(0x86b76ab76f25d2d0), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0x86b76ab76f25d2d0), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, IMP(UINT64_C(0x86b76ab76f25d2cf), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0x86b76ab76f25d2d0), UINT64_C(0x0000000000000001)));
  EXPECT_EQ(T, IMP(UINT64_C(0x86b76ab76f25d2d0), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0x86b76ab76f25d2cf), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ(T, IMP(UINT64_C(0x86b76ab76f25d2cf), UINT64_C(0xffffffffffffffff)));
}

TEST(i128, autogen_basic_75) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(UINT64_C(0x86b76ab76f25d2d0), UINT64_C(0x0000000000000000));
  const IMP B = IMP(UINT64_C(0x0cd87f836a04b025), UINT64_C(0x0000000000000000));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x938fea3ad92a82f5), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x79deeb34052122ab), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x8a6f1534052162f5), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0x8eff7fb76f25f2f5), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x04906a836a049000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A * B, IMP(INT64_C(0)));
  EXPECT_EQ(-A, IMP(UINT64_C(0x7948954890da2d30), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(~A, IMP(UINT64_C(0x7948954890da2d2f), UINT64_C(0xffffffffffffffff)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(INT64_C(-9)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0xfa53e6562950041d), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A >> 0, IMP(UINT64_C(0x86b76ab76f25d2d0), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A << 0, IMP(UINT64_C(0x86b76ab76f25d2d0), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x938fea3ad92a82f5), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x79deeb34052122ab), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x8a6f1534052162f5), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0x8eff7fb76f25f2f5), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x04906a836a049000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T *= B), IMP(INT64_C(0)));
  EXPECT_EQ((T = A, T /= B), IMP(INT64_C(-9)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0xfa53e6562950041d), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T >>= 0), IMP(UINT64_C(0x86b76ab76f25d2d0), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T <<= 0), IMP(UINT64_C(0x86b76ab76f25d2d0), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 0), IMP(UINT64_C(0x86b76ab76f25d2d0), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(rol(A, 0), IMP(UINT64_C(0x86b76ab76f25d2d0), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0x86b76ab76f25d2d0), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, IMP(UINT64_C(0x86b76ab76f25d2d0), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0x86b76ab76f25d2d0), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, IMP(UINT64_C(0x86b76ab76f25d2cf), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0x86b76ab76f25d2d0), UINT64_C(0x0000000000000001)));
  EXPECT_EQ(T, IMP(UINT64_C(0x86b76ab76f25d2d0), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0x86b76ab76f25d2cf), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ(T, IMP(UINT64_C(0x86b76ab76f25d2cf), UINT64_C(0xffffffffffffffff)));
}

TEST(u128, autogen_basic_76) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(UINT64_C(0x844828b5cfcddc82), UINT64_C(0x0000000000000000));
  const IMP B = IMP(UINT64_C(0x1c5b780ab7b2bfdf));
  IMP T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x844828b5cfcddc82), UINT64_C(0x1c5b780ab7b2bfdf)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x844828b5cfcddc81), UINT64_C(0xe3a487f5484d4021)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x844828b5cfcddc82), UINT64_C(0x1c5b780ab7b2bfdf)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0x844828b5cfcddc82), UINT64_C(0x1c5b780ab7b2bfdf)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x8ecf4f42dc3c133e), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(-A, IMP(UINT64_C(0x7bb7d74a3032237e), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(~A, IMP(UINT64_C(0x7bb7d74a3032237d), UINT64_C(0xffffffffffffffff)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x0000000000000004), UINT64_C(0xaa3208b038d359b8)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x18109ad1e60490b8)));
  EXPECT_EQ(A >> 95, IMP(UINT64_C(0x000000010890516b)));
  EXPECT_EQ(A << 95, IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x844828b5cfcddc82), UINT64_C(0x1c5b780ab7b2bfdf)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x844828b5cfcddc81), UINT64_C(0xe3a487f5484d4021)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x844828b5cfcddc82), UINT64_C(0x1c5b780ab7b2bfdf)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0x844828b5cfcddc82), UINT64_C(0x1c5b780ab7b2bfdf)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x8ecf4f42dc3c133e), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x0000000000000004), UINT64_C(0xaa3208b038d359b8)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x18109ad1e60490b8)));
  EXPECT_EQ((T = A, T >>= 95), IMP(UINT64_C(0x000000010890516b)));
  EXPECT_EQ((T = A, T <<= 95), IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 95), IMP(UINT64_C(0x9f9bb90400000000), UINT64_C(0x000000010890516b)));
  EXPECT_EQ(rol(A, 95), IMP(UINT64_C(0x000000004224145a), UINT64_C(0xe7e6ee4100000000)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0x844828b5cfcddc82), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, IMP(UINT64_C(0x844828b5cfcddc82), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0x844828b5cfcddc82), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, IMP(UINT64_C(0x844828b5cfcddc81), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0x844828b5cfcddc82), UINT64_C(0x0000000000000001)));
  EXPECT_EQ(T, IMP(UINT64_C(0x844828b5cfcddc82), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0x844828b5cfcddc81), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ(T, IMP(UINT64_C(0x844828b5cfcddc81), UINT64_C(0xffffffffffffffff)));
}

TEST(i128, autogen_basic_77) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(UINT64_C(0x844828b5cfcddc82), UINT64_C(0x0000000000000000));
  const IMP B = IMP(INT64_C(2043358843369603039));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x844828b5cfcddc82), UINT64_C(0x1c5b780ab7b2bfdf)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x844828b5cfcddc81), UINT64_C(0xe3a487f5484d4021)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x844828b5cfcddc82), UINT64_C(0x1c5b780ab7b2bfdf)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0x844828b5cfcddc82), UINT64_C(0x1c5b780ab7b2bfdf)));
  EXPECT_EQ(A & B, IMP(INT64_C(0)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x8ecf4f42dc3c133e), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(-A, IMP(UINT64_C(0x7bb7d74a3032237e), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(~A, IMP(UINT64_C(0x7bb7d74a3032237d), UINT64_C(0xffffffffffffffff)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0xfffffffffffffffb), UINT64_C(0xa31d767cb8e31cd7)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(INT64_C(-1136337039203534921)));
  EXPECT_EQ(A >> 95, IMP(INT64_C(-4151291541)));
  EXPECT_EQ(A << 95, IMP(INT64_C(0)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x844828b5cfcddc82), UINT64_C(0x1c5b780ab7b2bfdf)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x844828b5cfcddc81), UINT64_C(0xe3a487f5484d4021)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x844828b5cfcddc82), UINT64_C(0x1c5b780ab7b2bfdf)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0x844828b5cfcddc82), UINT64_C(0x1c5b780ab7b2bfdf)));
  EXPECT_EQ((T = A, T &= B), IMP(INT64_C(0)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x8ecf4f42dc3c133e), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0xfffffffffffffffb), UINT64_C(0xa31d767cb8e31cd7)));
  EXPECT_EQ((T = A, T %= B), IMP(INT64_C(-1136337039203534921)));
  EXPECT_EQ((T = A, T >>= 95), IMP(INT64_C(-4151291541)));
  EXPECT_EQ((T = A, T <<= 95), IMP(INT64_C(0)));
  EXPECT_EQ(ror(A, 95), IMP(UINT64_C(0x9f9bb90400000000), UINT64_C(0x000000010890516b)));
  EXPECT_EQ(rol(A, 95), IMP(UINT64_C(0x000000004224145a), UINT64_C(0xe7e6ee4100000000)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0x844828b5cfcddc82), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, IMP(UINT64_C(0x844828b5cfcddc82), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0x844828b5cfcddc82), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, IMP(UINT64_C(0x844828b5cfcddc81), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0x844828b5cfcddc82), UINT64_C(0x0000000000000001)));
  EXPECT_EQ(T, IMP(UINT64_C(0x844828b5cfcddc82), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0x844828b5cfcddc81), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ(T, IMP(UINT64_C(0x844828b5cfcddc81), UINT64_C(0xffffffffffffffff)));
}

TEST(u128, autogen_basic_78) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(UINT64_C(0x1608751873b9f984));
  const IMP B = IMP(UINT64_C(0xfee790ad8ea5c229), UINT64_C(0x0000000000000000));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0xfee790ad8ea5c229), UINT64_C(0x1608751873b9f984)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x01186f52715a3dd7), UINT64_C(0x1608751873b9f984)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0xfee790ad8ea5c229), UINT64_C(0x1608751873b9f984)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0xfee790ad8ea5c229), UINT64_C(0x1608751873b9f984)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0xe82ee61681f2fe24), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(-A, IMP(-INT64_C(1587647616529332612)));
  EXPECT_EQ(~A, IMP(-INT64_C(1587647616529332613)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x1608751873b9f984)));
  EXPECT_EQ(A >> 0, IMP(UINT64_C(0x1608751873b9f984)));
  EXPECT_EQ(A << 0, IMP(UINT64_C(0x1608751873b9f984)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0xfee790ad8ea5c229), UINT64_C(0x1608751873b9f984)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x01186f52715a3dd7), UINT64_C(0x1608751873b9f984)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0xfee790ad8ea5c229), UINT64_C(0x1608751873b9f984)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0xfee790ad8ea5c229), UINT64_C(0x1608751873b9f984)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0xe82ee61681f2fe24), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x1608751873b9f984)));
  EXPECT_EQ((T = A, T >>= 0), IMP(UINT64_C(0x1608751873b9f984)));
  EXPECT_EQ((T = A, T <<= 0), IMP(UINT64_C(0x1608751873b9f984)));
  EXPECT_EQ(ror(A, 0), IMP(UINT64_C(0x1608751873b9f984)));
  EXPECT_EQ(rol(A, 0), IMP(UINT64_C(0x1608751873b9f984)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0x1608751873b9f984)));
  EXPECT_EQ(T, IMP(UINT64_C(0x1608751873b9f985)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0x1608751873b9f984)));
  EXPECT_EQ(T, IMP(UINT64_C(0x1608751873b9f983)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0x1608751873b9f985)));
  EXPECT_EQ(T, IMP(UINT64_C(0x1608751873b9f985)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0x1608751873b9f983)));
  EXPECT_EQ(T, IMP(UINT64_C(0x1608751873b9f983)));
}

TEST(i128, autogen_basic_79) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(INT64_C(1587647616529332612));
  const IMP B = IMP(UINT64_C(0xfee790ad8ea5c229), UINT64_C(0x0000000000000000));
  IMP T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0xfee790ad8ea5c229), UINT64_C(0x1608751873b9f984)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x01186f52715a3dd7), UINT64_C(0x1608751873b9f984)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0xfee790ad8ea5c229), UINT64_C(0x1608751873b9f984)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0xfee790ad8ea5c229), UINT64_C(0x1608751873b9f984)));
  EXPECT_EQ(A & B, IMP(INT64_C(0)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0xe82ee61681f2fe24), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(-A, IMP(INT64_C(-1587647616529332612)));
  EXPECT_EQ(~A, IMP(INT64_C(-1587647616529332613)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(INT64_C(0)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(INT64_C(1587647616529332612)));
  EXPECT_EQ(A >> 0, IMP(INT64_C(1587647616529332612)));
  EXPECT_EQ(A << 0, IMP(INT64_C(1587647616529332612)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0xfee790ad8ea5c229), UINT64_C(0x1608751873b9f984)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x01186f52715a3dd7), UINT64_C(0x1608751873b9f984)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0xfee790ad8ea5c229), UINT64_C(0x1608751873b9f984)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0xfee790ad8ea5c229), UINT64_C(0x1608751873b9f984)));
  EXPECT_EQ((T = A, T &= B), IMP(INT64_C(0)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0xe82ee61681f2fe24), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T /= B), IMP(INT64_C(0)));
  EXPECT_EQ((T = A, T %= B), IMP(INT64_C(1587647616529332612)));
  EXPECT_EQ((T = A, T >>= 0), IMP(INT64_C(1587647616529332612)));
  EXPECT_EQ((T = A, T <<= 0), IMP(INT64_C(1587647616529332612)));
  EXPECT_EQ(ror(A, 0), IMP(INT64_C(1587647616529332612)));
  EXPECT_EQ(rol(A, 0), IMP(INT64_C(1587647616529332612)));
  EXPECT_EQ((T = A, T++), IMP(INT64_C(1587647616529332612)));
  EXPECT_EQ(T, IMP(INT64_C(1587647616529332613)));
  EXPECT_EQ((T = A, T--), IMP(INT64_C(1587647616529332612)));
  EXPECT_EQ(T, IMP(INT64_C(1587647616529332611)));
  EXPECT_EQ((T = A, ++T), IMP(INT64_C(1587647616529332613)));
  EXPECT_EQ(T, IMP(INT64_C(1587647616529332613)));
  EXPECT_EQ((T = A, --T), IMP(INT64_C(1587647616529332611)));
  EXPECT_EQ(T, IMP(INT64_C(1587647616529332611)));
}

TEST(u128, autogen_basic_80) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x3e690935d67eec6d));
  const IMP B = IMP(UINT64_C(0x7b766fb9fbb4d983), UINT64_C(0x3fcbabeb6b58ba56));
  IMP T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x7b766fb9fbb4d982), UINT64_C(0x7e34b52141d7a6c3)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x84899046044b267b), UINT64_C(0xfe9d5d4a6b263217)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x84899046044b267c), UINT64_C(0x01a2a2debd26563b)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x3febabffff7efe7f)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x7b766fb9fbb4d983), UINT64_C(0x3e4909214258a844)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x6ef38ebd24deec59), UINT64_C(0xef01d5701ae29e9e)));
  EXPECT_EQ(-A, IMP(UINT64_C(0xc196f6ca29811393)));
  EXPECT_EQ(~A, IMP(UINT64_C(0xc196f6ca29811392)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x0000000000000002)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x0913208c08964cf8), UINT64_C(0xbed1b15effcd77c1)));
  EXPECT_EQ(A >> 86, IMP(UINT64_C(0x000003ffffffffff)));
  EXPECT_EQ(A << 86, IMP(UINT64_C(0x4d759fbb1b400000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x7b766fb9fbb4d982), UINT64_C(0x7e34b52141d7a6c3)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x84899046044b267b), UINT64_C(0xfe9d5d4a6b263217)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x84899046044b267c), UINT64_C(0x01a2a2debd26563b)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x3febabffff7efe7f)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x7b766fb9fbb4d983), UINT64_C(0x3e4909214258a844)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x6ef38ebd24deec59), UINT64_C(0xef01d5701ae29e9e)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x0000000000000002)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x0913208c08964cf8), UINT64_C(0xbed1b15effcd77c1)));
  EXPECT_EQ((T = A, T >>= 86), IMP(UINT64_C(0x000003ffffffffff)));
  EXPECT_EQ((T = A, T <<= 86), IMP(UINT64_C(0x4d759fbb1b400000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 86), IMP(UINT64_C(0xfffffcf9a424d759), UINT64_C(0xfbb1b7ffffffffff)));
  EXPECT_EQ(rol(A, 86), IMP(UINT64_C(0x4d759fbb1b7fffff), UINT64_C(0xffffffffffcf9a42)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x3e690935d67eec6d)));
  EXPECT_EQ(T, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x3e690935d67eec6e)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x3e690935d67eec6d)));
  EXPECT_EQ(T, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x3e690935d67eec6c)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x3e690935d67eec6e)));
  EXPECT_EQ(T, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x3e690935d67eec6e)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x3e690935d67eec6c)));
  EXPECT_EQ(T, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x3e690935d67eec6c)));
}

TEST(i128, autogen_basic_81) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x3e690935d67eec6d));
  const IMP B = IMP(UINT64_C(0x7b766fb9fbb4d983), UINT64_C(0x3fcbabeb6b58ba56));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x7b766fb9fbb4d982), UINT64_C(0x7e34b52141d7a6c3)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x84899046044b267b), UINT64_C(0xfe9d5d4a6b263217)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x84899046044b267c), UINT64_C(0x01a2a2debd26563b)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x3febabffff7efe7f)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x7b766fb9fbb4d983), UINT64_C(0x3e4909214258a844)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x6ef38ebd24deec59), UINT64_C(0xef01d5701ae29e9e)));
  EXPECT_EQ(-A, IMP(UINT64_C(0x0000000000000000), UINT64_C(0xc196f6ca29811393)));
  EXPECT_EQ(~A, IMP(UINT64_C(0x0000000000000000), UINT64_C(0xc196f6ca29811392)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(INT64_C(0)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x3e690935d67eec6d)));
  EXPECT_EQ(A >> 86, IMP(INT64_C(-1)));
  EXPECT_EQ(A << 86, IMP(UINT64_C(0x4d759fbb1b400000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x7b766fb9fbb4d982), UINT64_C(0x7e34b52141d7a6c3)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x84899046044b267b), UINT64_C(0xfe9d5d4a6b263217)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x84899046044b267c), UINT64_C(0x01a2a2debd26563b)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x3febabffff7efe7f)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x7b766fb9fbb4d983), UINT64_C(0x3e4909214258a844)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x6ef38ebd24deec59), UINT64_C(0xef01d5701ae29e9e)));
  EXPECT_EQ((T = A, T /= B), IMP(INT64_C(0)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x3e690935d67eec6d)));
  EXPECT_EQ((T = A, T >>= 86), IMP(INT64_C(-1)));
  EXPECT_EQ((T = A, T <<= 86), IMP(UINT64_C(0x4d759fbb1b400000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 86), IMP(UINT64_C(0xfffffcf9a424d759), UINT64_C(0xfbb1b7ffffffffff)));
  EXPECT_EQ(rol(A, 86), IMP(UINT64_C(0x4d759fbb1b7fffff), UINT64_C(0xffffffffffcf9a42)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x3e690935d67eec6d)));
  EXPECT_EQ(T, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x3e690935d67eec6e)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x3e690935d67eec6d)));
  EXPECT_EQ(T, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x3e690935d67eec6c)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x3e690935d67eec6e)));
  EXPECT_EQ(T, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x3e690935d67eec6e)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x3e690935d67eec6c)));
  EXPECT_EQ(T, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x3e690935d67eec6c)));
}

TEST(u128, autogen_basic_82) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(UINT64_C(0x5aea56d201e84567), UINT64_C(0x46a65d41809ccd6a));
  const IMP B = IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x7435c8979a722378));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x5aea56d201e84566), UINT64_C(0xbadc25d91b0ef0e2)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x5aea56d201e84567), UINT64_C(0xd27094a9e62aa9f2)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0xa515a92dfe17ba98), UINT64_C(0x329395d61aeeee12)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x76b7ddd79afeef7a)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x5aea56d201e84567), UINT64_C(0x4424480180100168)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x205a4070d0113f7e), UINT64_C(0xb72f3e34f6c9c7b0)));
  EXPECT_EQ(-A, IMP(UINT64_C(0xa515a92dfe17ba98), UINT64_C(0xb959a2be7f633296)));
  EXPECT_EQ(~A, IMP(UINT64_C(0xa515a92dfe17ba98), UINT64_C(0xb959a2be7f633295)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x5aea56d201e84567), UINT64_C(0x46a65d41809ccd6a)));
  EXPECT_EQ(A >> 120, IMP(UINT64_C(0x000000000000005a)));
  EXPECT_EQ(A << 120, IMP(UINT64_C(0x6a00000000000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x5aea56d201e84566), UINT64_C(0xbadc25d91b0ef0e2)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x5aea56d201e84567), UINT64_C(0xd27094a9e62aa9f2)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0xa515a92dfe17ba98), UINT64_C(0x329395d61aeeee12)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x76b7ddd79afeef7a)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x5aea56d201e84567), UINT64_C(0x4424480180100168)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x205a4070d0113f7e), UINT64_C(0xb72f3e34f6c9c7b0)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x5aea56d201e84567), UINT64_C(0x46a65d41809ccd6a)));
  EXPECT_EQ((T = A, T >>= 120), IMP(UINT64_C(0x000000000000005a)));
  EXPECT_EQ((T = A, T <<= 120), IMP(UINT64_C(0x6a00000000000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 120), IMP(UINT64_C(0xea56d201e8456746), UINT64_C(0xa65d41809ccd6a5a)));
  EXPECT_EQ(rol(A, 120), IMP(UINT64_C(0x6a5aea56d201e845), UINT64_C(0x6746a65d41809ccd)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0x5aea56d201e84567), UINT64_C(0x46a65d41809ccd6a)));
  EXPECT_EQ(T, IMP(UINT64_C(0x5aea56d201e84567), UINT64_C(0x46a65d41809ccd6b)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0x5aea56d201e84567), UINT64_C(0x46a65d41809ccd6a)));
  EXPECT_EQ(T, IMP(UINT64_C(0x5aea56d201e84567), UINT64_C(0x46a65d41809ccd69)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0x5aea56d201e84567), UINT64_C(0x46a65d41809ccd6b)));
  EXPECT_EQ(T, IMP(UINT64_C(0x5aea56d201e84567), UINT64_C(0x46a65d41809ccd6b)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0x5aea56d201e84567), UINT64_C(0x46a65d41809ccd69)));
  EXPECT_EQ(T, IMP(UINT64_C(0x5aea56d201e84567), UINT64_C(0x46a65d41809ccd69)));
}

TEST(i128, autogen_basic_83) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(UINT64_C(0x5aea56d201e84567), UINT64_C(0x46a65d41809ccd6a));
  const IMP B = IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x7435c8979a722378));
  IMP T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x5aea56d201e84566), UINT64_C(0xbadc25d91b0ef0e2)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x5aea56d201e84567), UINT64_C(0xd27094a9e62aa9f2)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0xa515a92dfe17ba98), UINT64_C(0x329395d61aeeee12)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x76b7ddd79afeef7a)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x5aea56d201e84567), UINT64_C(0x4424480180100168)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x205a4070d0113f7e), UINT64_C(0xb72f3e34f6c9c7b0)));
  EXPECT_EQ(-A, IMP(UINT64_C(0xa515a92dfe17ba98), UINT64_C(0xb959a2be7f633296)));
  EXPECT_EQ(~A, IMP(UINT64_C(0xa515a92dfe17ba98), UINT64_C(0xb959a2be7f633295)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x59813f0bbd609211)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(INT64_C(7760643298067087986)));
  EXPECT_EQ(A >> 120, IMP(INT64_C(90)));
  EXPECT_EQ(A << 120, IMP(UINT64_C(0x6a00000000000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x5aea56d201e84566), UINT64_C(0xbadc25d91b0ef0e2)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x5aea56d201e84567), UINT64_C(0xd27094a9e62aa9f2)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0xa515a92dfe17ba98), UINT64_C(0x329395d61aeeee12)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x76b7ddd79afeef7a)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x5aea56d201e84567), UINT64_C(0x4424480180100168)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x205a4070d0113f7e), UINT64_C(0xb72f3e34f6c9c7b0)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x59813f0bbd609211)));
  EXPECT_EQ((T = A, T %= B), IMP(INT64_C(7760643298067087986)));
  EXPECT_EQ((T = A, T >>= 120), IMP(INT64_C(90)));
  EXPECT_EQ((T = A, T <<= 120), IMP(UINT64_C(0x6a00000000000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 120), IMP(UINT64_C(0xea56d201e8456746), UINT64_C(0xa65d41809ccd6a5a)));
  EXPECT_EQ(rol(A, 120), IMP(UINT64_C(0x6a5aea56d201e845), UINT64_C(0x6746a65d41809ccd)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0x5aea56d201e84567), UINT64_C(0x46a65d41809ccd6a)));
  EXPECT_EQ(T, IMP(UINT64_C(0x5aea56d201e84567), UINT64_C(0x46a65d41809ccd6b)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0x5aea56d201e84567), UINT64_C(0x46a65d41809ccd6a)));
  EXPECT_EQ(T, IMP(UINT64_C(0x5aea56d201e84567), UINT64_C(0x46a65d41809ccd69)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0x5aea56d201e84567), UINT64_C(0x46a65d41809ccd6b)));
  EXPECT_EQ(T, IMP(UINT64_C(0x5aea56d201e84567), UINT64_C(0x46a65d41809ccd6b)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0x5aea56d201e84567), UINT64_C(0x46a65d41809ccd69)));
  EXPECT_EQ(T, IMP(UINT64_C(0x5aea56d201e84567), UINT64_C(0x46a65d41809ccd69)));
}

TEST(u128, autogen_basic_84) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(-INT64_C(786031990595386196));
  const IMP B = IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x3eb8eab1639132f1));
  IMP T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x33d05ec31609379d)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0xb65e89604ee6d1bb)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0xcbaf9ea0d1e9365d)));
  EXPECT_EQ(A | B, IMP(-INT64_C(18015833230330115)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x34106011221000a0)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x083c58e5e48aa217), UINT64_C(0x02aaac399d51fdec)));
  EXPECT_EQ(-A, IMP(UINT64_C(0x0ae88bee4d87fb54)));
  EXPECT_EQ(~A, IMP(UINT64_C(0x0ae88bee4d87fb53)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x0000000000000001)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0xb65e89604ee6d1bb)));
  EXPECT_EQ(A >> 113, IMP(UINT64_C(0x0000000000007fff)));
  EXPECT_EQ(A << 113, IMP(UINT64_C(0x0958000000000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x33d05ec31609379d)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0xb65e89604ee6d1bb)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0xcbaf9ea0d1e9365d)));
  EXPECT_EQ((T = A, T |= B), IMP(-INT64_C(18015833230330115)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x34106011221000a0)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x083c58e5e48aa217), UINT64_C(0x02aaac399d51fdec)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0xb65e89604ee6d1bb)));
  EXPECT_EQ((T = A, T >>= 113), IMP(UINT64_C(0x0000000000007fff)));
  EXPECT_EQ((T = A, T <<= 113), IMP(UINT64_C(0x0958000000000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 113), IMP(UINT64_C(0xfffffffffffffa8b), UINT64_C(0xba08d93c02567fff)));
  EXPECT_EQ(rol(A, 113), IMP(UINT64_C(0x0959ffffffffffff), UINT64_C(0xffffea2ee82364f0)));
  EXPECT_EQ((T = A, T++), IMP(-INT64_C(786031990595386196)));
  EXPECT_EQ(T, IMP(-INT64_C(786031990595386195)));
  EXPECT_EQ((T = A, T--), IMP(-INT64_C(786031990595386196)));
  EXPECT_EQ(T, IMP(-INT64_C(786031990595386197)));
  EXPECT_EQ((T = A, ++T), IMP(-INT64_C(786031990595386195)));
  EXPECT_EQ(T, IMP(-INT64_C(786031990595386195)));
  EXPECT_EQ((T = A, --T), IMP(-INT64_C(786031990595386197)));
  EXPECT_EQ(T, IMP(-INT64_C(786031990595386197)));
}

TEST(i128, autogen_basic_85) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(INT64_C(-786031990595386196));
  const IMP B = IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x3eb8eab1639132f1));
  IMP T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x33d05ec31609379d)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x0000000000000000), UINT64_C(0xb65e89604ee6d1bb)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x0000000000000000), UINT64_C(0xcbaf9ea0d1e9365d)));
  EXPECT_EQ(A | B, IMP(INT64_C(-18015833230330115)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x34106011221000a0)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x083c58e5e48aa217), UINT64_C(0x02aaac399d51fdec)));
  EXPECT_EQ(-A, IMP(INT64_C(786031990595386196)));
  EXPECT_EQ(~A, IMP(INT64_C(786031990595386195)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(INT64_C(0)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(INT64_C(-786031990595386196)));
  EXPECT_EQ(A >> 113, IMP(INT64_C(-1)));
  EXPECT_EQ(A << 113, IMP(UINT64_C(0x0958000000000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x33d05ec31609379d)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x0000000000000000), UINT64_C(0xb65e89604ee6d1bb)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x0000000000000000), UINT64_C(0xcbaf9ea0d1e9365d)));
  EXPECT_EQ((T = A, T |= B), IMP(INT64_C(-18015833230330115)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x34106011221000a0)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x083c58e5e48aa217), UINT64_C(0x02aaac399d51fdec)));
  EXPECT_EQ((T = A, T /= B), IMP(INT64_C(0)));
  EXPECT_EQ((T = A, T %= B), IMP(INT64_C(-786031990595386196)));
  EXPECT_EQ((T = A, T >>= 113), IMP(INT64_C(-1)));
  EXPECT_EQ((T = A, T <<= 113), IMP(UINT64_C(0x0958000000000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 113), IMP(UINT64_C(0xfffffffffffffa8b), UINT64_C(0xba08d93c02567fff)));
  EXPECT_EQ(rol(A, 113), IMP(UINT64_C(0x0959ffffffffffff), UINT64_C(0xffffea2ee82364f0)));
  EXPECT_EQ((T = A, T++), IMP(INT64_C(-786031990595386196)));
  EXPECT_EQ(T, IMP(INT64_C(-786031990595386195)));
  EXPECT_EQ((T = A, T--), IMP(INT64_C(-786031990595386196)));
  EXPECT_EQ(T, IMP(INT64_C(-786031990595386197)));
  EXPECT_EQ((T = A, ++T), IMP(INT64_C(-786031990595386195)));
  EXPECT_EQ(T, IMP(INT64_C(-786031990595386195)));
  EXPECT_EQ((T = A, --T), IMP(INT64_C(-786031990595386197)));
  EXPECT_EQ(T, IMP(INT64_C(-786031990595386197)));
}

TEST(u128, autogen_basic_86) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(-INT64_C(4903358212403435074));
  const IMP B = IMP(UINT64_C(0xf8faed9ea8eda78b));
  IMP T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0xb4eeb34e00209149)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0xfffffffffffffffe), UINT64_C(0xc2f8d810ae454233)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x43092831ffdf4e35)));
  EXPECT_EQ(A | B, IMP(-INT64_C(289376342145765441)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0xb8f2c58e0020a18a)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0xbdd174676b449dfa), UINT64_C(0x6f3c04e1a405dc2a)));
  EXPECT_EQ(-A, IMP(UINT64_C(0x440c3a50a8cd1642)));
  EXPECT_EQ(~A, IMP(UINT64_C(0x440c3a50a8cd1641)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x0000000000000001), UINT64_C(0x0737bd28d0718629)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x11683519ff15527b)));
  EXPECT_EQ(A >> 11, IMP(UINT64_C(0x001fffffffffffff), UINT64_C(0xfff77e78b5eae65d)));
  EXPECT_EQ(A << 11, IMP(UINT64_C(0xfffffffffffffddf), UINT64_C(0x9e2d7ab9974df000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0xb4eeb34e00209149)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0xfffffffffffffffe), UINT64_C(0xc2f8d810ae454233)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x43092831ffdf4e35)));
  EXPECT_EQ((T = A, T |= B), IMP(-INT64_C(289376342145765441)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0xb8f2c58e0020a18a)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0xbdd174676b449dfa), UINT64_C(0x6f3c04e1a405dc2a)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x0000000000000001), UINT64_C(0x0737bd28d0718629)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x11683519ff15527b)));
  EXPECT_EQ((T = A, T >>= 11), IMP(UINT64_C(0x001fffffffffffff), UINT64_C(0xfff77e78b5eae65d)));
  EXPECT_EQ((T = A, T <<= 11), IMP(UINT64_C(0xfffffffffffffddf), UINT64_C(0x9e2d7ab9974df000)));
  EXPECT_EQ(ror(A, 11), IMP(UINT64_C(0x37dfffffffffffff), UINT64_C(0xfff77e78b5eae65d)));
  EXPECT_EQ(rol(A, 11), IMP(UINT64_C(0xfffffffffffffddf), UINT64_C(0x9e2d7ab9974df7ff)));
  EXPECT_EQ((T = A, T++), IMP(-INT64_C(4903358212403435074)));
  EXPECT_EQ(T, IMP(-INT64_C(4903358212403435073)));
  EXPECT_EQ((T = A, T--), IMP(-INT64_C(4903358212403435074)));
  EXPECT_EQ(T, IMP(-INT64_C(4903358212403435075)));
  EXPECT_EQ((T = A, ++T), IMP(-INT64_C(4903358212403435073)));
  EXPECT_EQ(T, IMP(-INT64_C(4903358212403435073)));
  EXPECT_EQ((T = A, --T), IMP(-INT64_C(4903358212403435075)));
  EXPECT_EQ(T, IMP(-INT64_C(4903358212403435075)));
}

TEST(i128, autogen_basic_87) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(INT64_C(-4903358212403435074));
  const IMP B = IMP(UINT64_C(0x0000000000000000), UINT64_C(0xf8faed9ea8eda78b));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x0000000000000000), UINT64_C(0xb4eeb34e00209149)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0xfffffffffffffffe), UINT64_C(0xc2f8d810ae454233)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x43092831ffdf4e35)));
  EXPECT_EQ(A | B, IMP(INT64_C(-289376342145765441)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x0000000000000000), UINT64_C(0xb8f2c58e0020a18a)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0xbdd174676b449dfa), UINT64_C(0x6f3c04e1a405dc2a)));
  EXPECT_EQ(-A, IMP(INT64_C(4903358212403435074)));
  EXPECT_EQ(~A, IMP(INT64_C(4903358212403435073)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(INT64_C(0)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(INT64_C(-4903358212403435074)));
  EXPECT_EQ(A >> 11, IMP(INT64_C(-2394217877150115)));
  EXPECT_EQ(A << 11, IMP(UINT64_C(0xfffffffffffffddf), UINT64_C(0x9e2d7ab9974df000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x0000000000000000), UINT64_C(0xb4eeb34e00209149)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0xfffffffffffffffe), UINT64_C(0xc2f8d810ae454233)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x43092831ffdf4e35)));
  EXPECT_EQ((T = A, T |= B), IMP(INT64_C(-289376342145765441)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x0000000000000000), UINT64_C(0xb8f2c58e0020a18a)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0xbdd174676b449dfa), UINT64_C(0x6f3c04e1a405dc2a)));
  EXPECT_EQ((T = A, T /= B), IMP(INT64_C(0)));
  EXPECT_EQ((T = A, T %= B), IMP(INT64_C(-4903358212403435074)));
  EXPECT_EQ((T = A, T >>= 11), IMP(INT64_C(-2394217877150115)));
  EXPECT_EQ((T = A, T <<= 11), IMP(UINT64_C(0xfffffffffffffddf), UINT64_C(0x9e2d7ab9974df000)));
  EXPECT_EQ(ror(A, 11), IMP(UINT64_C(0x37dfffffffffffff), UINT64_C(0xfff77e78b5eae65d)));
  EXPECT_EQ(rol(A, 11), IMP(UINT64_C(0xfffffffffffffddf), UINT64_C(0x9e2d7ab9974df7ff)));
  EXPECT_EQ((T = A, T++), IMP(INT64_C(-4903358212403435074)));
  EXPECT_EQ(T, IMP(INT64_C(-4903358212403435073)));
  EXPECT_EQ((T = A, T--), IMP(INT64_C(-4903358212403435074)));
  EXPECT_EQ(T, IMP(INT64_C(-4903358212403435075)));
  EXPECT_EQ((T = A, ++T), IMP(INT64_C(-4903358212403435073)));
  EXPECT_EQ(T, IMP(INT64_C(-4903358212403435073)));
  EXPECT_EQ((T = A, --T), IMP(INT64_C(-4903358212403435075)));
  EXPECT_EQ(T, IMP(INT64_C(-4903358212403435075)));
}

TEST(u128, autogen_basic_88) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(UINT64_C(0x5a4afb2b99289120));
  const IMP B = IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x49bc440000e5d9b5));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(-INT64_C(6627258870151615787)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x0000000000000001), UINT64_C(0x108eb72b9842b76b)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x13f6bf2b99cd4895)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x5bfeff2b99edd9b5)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x4808400000209120)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0xbfb6cd8034912097), UINT64_C(0x8df80bf07e52bba0)));
  EXPECT_EQ(-A, IMP(-INT64_C(6506288776361840928)));
  EXPECT_EQ(~A, IMP(-INT64_C(6506288776361840929)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x5a4afb2b99289120)));
  EXPECT_EQ(A >> 53, IMP(UINT64_C(0x00000000000002d2)));
  EXPECT_EQ(A << 53, IMP(UINT64_C(0x000b495f65732512), UINT64_C(0x2400000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(-INT64_C(6627258870151615787)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x0000000000000001), UINT64_C(0x108eb72b9842b76b)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x13f6bf2b99cd4895)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x5bfeff2b99edd9b5)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x4808400000209120)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0xbfb6cd8034912097), UINT64_C(0x8df80bf07e52bba0)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x5a4afb2b99289120)));
  EXPECT_EQ((T = A, T >>= 53), IMP(UINT64_C(0x00000000000002d2)));
  EXPECT_EQ((T = A, T <<= 53), IMP(UINT64_C(0x000b495f65732512), UINT64_C(0x2400000000000000)));
  EXPECT_EQ(ror(A, 53), IMP(UINT64_C(0x57d95cc944890000), UINT64_C(0x00000000000002d2)));
  EXPECT_EQ(rol(A, 53), IMP(UINT64_C(0x000b495f65732512), UINT64_C(0x2400000000000000)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0x5a4afb2b99289120)));
  EXPECT_EQ(T, IMP(UINT64_C(0x5a4afb2b99289121)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0x5a4afb2b99289120)));
  EXPECT_EQ(T, IMP(UINT64_C(0x5a4afb2b9928911f)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0x5a4afb2b99289121)));
  EXPECT_EQ(T, IMP(UINT64_C(0x5a4afb2b99289121)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0x5a4afb2b9928911f)));
  EXPECT_EQ(T, IMP(UINT64_C(0x5a4afb2b9928911f)));
}

TEST(i128, autogen_basic_89) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(INT64_C(6506288776361840928));
  const IMP B = IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x49bc440000e5d9b5));
  IMP T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, IMP(INT64_C(-6627258870151615787)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x0000000000000001), UINT64_C(0x108eb72b9842b76b)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x13f6bf2b99cd4895)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x5bfeff2b99edd9b5)));
  EXPECT_EQ(A & B, IMP(INT64_C(5190468939290808608)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0xbfb6cd8034912097), UINT64_C(0x8df80bf07e52bba0)));
  EXPECT_EQ(-A, IMP(INT64_C(-6506288776361840928)));
  EXPECT_EQ(~A, IMP(INT64_C(-6506288776361840929)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(INT64_C(0)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(INT64_C(6506288776361840928)));
  EXPECT_EQ(A >> 53, IMP(INT64_C(722)));
  EXPECT_EQ(A << 53, IMP(UINT64_C(0x000b495f65732512), UINT64_C(0x2400000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(INT64_C(-6627258870151615787)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x0000000000000001), UINT64_C(0x108eb72b9842b76b)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x13f6bf2b99cd4895)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x5bfeff2b99edd9b5)));
  EXPECT_EQ((T = A, T &= B), IMP(INT64_C(5190468939290808608)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0xbfb6cd8034912097), UINT64_C(0x8df80bf07e52bba0)));
  EXPECT_EQ((T = A, T /= B), IMP(INT64_C(0)));
  EXPECT_EQ((T = A, T %= B), IMP(INT64_C(6506288776361840928)));
  EXPECT_EQ((T = A, T >>= 53), IMP(INT64_C(722)));
  EXPECT_EQ((T = A, T <<= 53), IMP(UINT64_C(0x000b495f65732512), UINT64_C(0x2400000000000000)));
  EXPECT_EQ(ror(A, 53), IMP(UINT64_C(0x57d95cc944890000), UINT64_C(0x00000000000002d2)));
  EXPECT_EQ(rol(A, 53), IMP(UINT64_C(0x000b495f65732512), UINT64_C(0x2400000000000000)));
  EXPECT_EQ((T = A, T++), IMP(INT64_C(6506288776361840928)));
  EXPECT_EQ(T, IMP(INT64_C(6506288776361840929)));
  EXPECT_EQ((T = A, T--), IMP(INT64_C(6506288776361840928)));
  EXPECT_EQ(T, IMP(INT64_C(6506288776361840927)));
  EXPECT_EQ((T = A, ++T), IMP(INT64_C(6506288776361840929)));
  EXPECT_EQ(T, IMP(INT64_C(6506288776361840929)));
  EXPECT_EQ((T = A, --T), IMP(INT64_C(6506288776361840927)));
  EXPECT_EQ(T, IMP(INT64_C(6506288776361840927)));
}

TEST(u128, autogen_basic_90) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(UINT64_C(0x49ae8bba85992352));
  const IMP B = IMP(UINT64_C(0xc93a7575fb27e3ef));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x0000000000000001), UINT64_C(0x12e9013080c10741)));
  EXPECT_EQ(A - B, IMP(-INT64_C(9190696455920074909)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x8094fecf7ebec0bd)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0xc9beffffffbfe3ff)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x492a013081012342)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x39eadf0fd6133aed), UINT64_C(0x28f7f6094bc7af8e)));
  EXPECT_EQ(-A, IMP(-INT64_C(5309334643937977170)));
  EXPECT_EQ(~A, IMP(-INT64_C(5309334643937977171)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x49ae8bba85992352)));
  EXPECT_EQ(A >> 111, IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A << 111, IMP(UINT64_C(0x91a9000000000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x0000000000000001), UINT64_C(0x12e9013080c10741)));
  EXPECT_EQ((T = A, T -= B), IMP(-INT64_C(9190696455920074909)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x8094fecf7ebec0bd)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0xc9beffffffbfe3ff)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x492a013081012342)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x39eadf0fd6133aed), UINT64_C(0x28f7f6094bc7af8e)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x49ae8bba85992352)));
  EXPECT_EQ((T = A, T >>= 111), IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T <<= 111), IMP(UINT64_C(0x91a9000000000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 111), IMP(UINT64_C(0x000000000000935d), UINT64_C(0x17750b3246a40000)));
  EXPECT_EQ(rol(A, 111), IMP(UINT64_C(0x91a9000000000000), UINT64_C(0x000024d745dd42cc)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0x49ae8bba85992352)));
  EXPECT_EQ(T, IMP(UINT64_C(0x49ae8bba85992353)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0x49ae8bba85992352)));
  EXPECT_EQ(T, IMP(UINT64_C(0x49ae8bba85992351)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0x49ae8bba85992353)));
  EXPECT_EQ(T, IMP(UINT64_C(0x49ae8bba85992353)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0x49ae8bba85992351)));
  EXPECT_EQ(T, IMP(UINT64_C(0x49ae8bba85992351)));
}

TEST(i128, autogen_basic_91) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(INT64_C(5309334643937977170));
  const IMP B = IMP(UINT64_C(0x0000000000000000), UINT64_C(0xc93a7575fb27e3ef));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x0000000000000001), UINT64_C(0x12e9013080c10741)));
  EXPECT_EQ(A - B, IMP(INT64_C(-9190696455920074909)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x0000000000000000), UINT64_C(0x8094fecf7ebec0bd)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0x0000000000000000), UINT64_C(0xc9beffffffbfe3ff)));
  EXPECT_EQ(A & B, IMP(INT64_C(5272027621624980290)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x39eadf0fd6133aed), UINT64_C(0x28f7f6094bc7af8e)));
  EXPECT_EQ(-A, IMP(INT64_C(-5309334643937977170)));
  EXPECT_EQ(~A, IMP(INT64_C(-5309334643937977171)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(INT64_C(0)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(INT64_C(5309334643937977170)));
  EXPECT_EQ(A >> 111, IMP(INT64_C(0)));
  EXPECT_EQ(A << 111, IMP(UINT64_C(0x91a9000000000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x0000000000000001), UINT64_C(0x12e9013080c10741)));
  EXPECT_EQ((T = A, T -= B), IMP(INT64_C(-9190696455920074909)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x0000000000000000), UINT64_C(0x8094fecf7ebec0bd)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0x0000000000000000), UINT64_C(0xc9beffffffbfe3ff)));
  EXPECT_EQ((T = A, T &= B), IMP(INT64_C(5272027621624980290)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x39eadf0fd6133aed), UINT64_C(0x28f7f6094bc7af8e)));
  EXPECT_EQ((T = A, T /= B), IMP(INT64_C(0)));
  EXPECT_EQ((T = A, T %= B), IMP(INT64_C(5309334643937977170)));
  EXPECT_EQ((T = A, T >>= 111), IMP(INT64_C(0)));
  EXPECT_EQ((T = A, T <<= 111), IMP(UINT64_C(0x91a9000000000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 111), IMP(UINT64_C(0x000000000000935d), UINT64_C(0x17750b3246a40000)));
  EXPECT_EQ(rol(A, 111), IMP(UINT64_C(0x91a9000000000000), UINT64_C(0x000024d745dd42cc)));
  EXPECT_EQ((T = A, T++), IMP(INT64_C(5309334643937977170)));
  EXPECT_EQ(T, IMP(INT64_C(5309334643937977171)));
  EXPECT_EQ((T = A, T--), IMP(INT64_C(5309334643937977170)));
  EXPECT_EQ(T, IMP(INT64_C(5309334643937977169)));
  EXPECT_EQ((T = A, ++T), IMP(INT64_C(5309334643937977171)));
  EXPECT_EQ(T, IMP(INT64_C(5309334643937977171)));
  EXPECT_EQ((T = A, --T), IMP(INT64_C(5309334643937977169)));
  EXPECT_EQ(T, IMP(INT64_C(5309334643937977169)));
}

TEST(u128, autogen_basic_92) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(UINT64_C(0xc9586aafa6c7fcd4), UINT64_C(0x607252d596601e93));
  const IMP B = IMP(UINT64_C(0x20c62997529264b9));
  IMP T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0xc9586aafa6c7fcd4), UINT64_C(0x81387c6ce8f2834c)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0xc9586aafa6c7fcd4), UINT64_C(0x3fac293e43cdb9da)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0xc9586aafa6c7fcd4), UINT64_C(0x40b47b42c4f27a2a)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0xc9586aafa6c7fcd4), UINT64_C(0x60f67bd7d6f27ebb)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x2042009512000491)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0xa5efea9dd3fdae1d), UINT64_C(0x203d6b68bd3d843b)));
  EXPECT_EQ(-A, IMP(UINT64_C(0x36a795505938032b), UINT64_C(0x9f8dad2a699fe16d)));
  EXPECT_EQ(~A, IMP(UINT64_C(0x36a795505938032b), UINT64_C(0x9f8dad2a699fe16c)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x0000000000000006), UINT64_C(0x24b825f930961041)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x0b77c4a5c482fb9a)));
  EXPECT_EQ(A >> 57, IMP(UINT64_C(0x0000000000000064), UINT64_C(0xac3557d363fe6a30)));
  EXPECT_EQ(A << 57, IMP(UINT64_C(0xa8c0e4a5ab2cc03d), UINT64_C(0x2600000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0xc9586aafa6c7fcd4), UINT64_C(0x81387c6ce8f2834c)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0xc9586aafa6c7fcd4), UINT64_C(0x3fac293e43cdb9da)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0xc9586aafa6c7fcd4), UINT64_C(0x40b47b42c4f27a2a)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0xc9586aafa6c7fcd4), UINT64_C(0x60f67bd7d6f27ebb)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x2042009512000491)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0xa5efea9dd3fdae1d), UINT64_C(0x203d6b68bd3d843b)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x0000000000000006), UINT64_C(0x24b825f930961041)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x0b77c4a5c482fb9a)));
  EXPECT_EQ((T = A, T >>= 57), IMP(UINT64_C(0x0000000000000064), UINT64_C(0xac3557d363fe6a30)));
  EXPECT_EQ((T = A, T <<= 57), IMP(UINT64_C(0xa8c0e4a5ab2cc03d), UINT64_C(0x2600000000000000)));
  EXPECT_EQ(ror(A, 57), IMP(UINT64_C(0x39296acb300f49e4), UINT64_C(0xac3557d363fe6a30)));
  EXPECT_EQ(rol(A, 57), IMP(UINT64_C(0xa8c0e4a5ab2cc03d), UINT64_C(0x2792b0d55f4d8ff9)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0xc9586aafa6c7fcd4), UINT64_C(0x607252d596601e93)));
  EXPECT_EQ(T, IMP(UINT64_C(0xc9586aafa6c7fcd4), UINT64_C(0x607252d596601e94)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0xc9586aafa6c7fcd4), UINT64_C(0x607252d596601e93)));
  EXPECT_EQ(T, IMP(UINT64_C(0xc9586aafa6c7fcd4), UINT64_C(0x607252d596601e92)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0xc9586aafa6c7fcd4), UINT64_C(0x607252d596601e94)));
  EXPECT_EQ(T, IMP(UINT64_C(0xc9586aafa6c7fcd4), UINT64_C(0x607252d596601e94)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0xc9586aafa6c7fcd4), UINT64_C(0x607252d596601e92)));
  EXPECT_EQ(T, IMP(UINT64_C(0xc9586aafa6c7fcd4), UINT64_C(0x607252d596601e92)));
}

TEST(i128, autogen_basic_93) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(UINT64_C(0xc9586aafa6c7fcd4), UINT64_C(0x607252d596601e93));
  const IMP B = IMP(INT64_C(2361620784504530105));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0xc9586aafa6c7fcd4), UINT64_C(0x81387c6ce8f2834c)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0xc9586aafa6c7fcd4), UINT64_C(0x3fac293e43cdb9da)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0xc9586aafa6c7fcd4), UINT64_C(0x40b47b42c4f27a2a)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0xc9586aafa6c7fcd4), UINT64_C(0x60f67bd7d6f27ebb)));
  EXPECT_EQ(A & B, IMP(INT64_C(2324420997928715409)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0xa5efea9dd3fdae1d), UINT64_C(0x203d6b68bd3d843b)));
  EXPECT_EQ(-A, IMP(UINT64_C(0x36a795505938032b), UINT64_C(0x9f8dad2a699fe16d)));
  EXPECT_EQ(~A, IMP(UINT64_C(0x36a795505938032b), UINT64_C(0x9f8dad2a699fe16c)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0xfffffffffffffffe), UINT64_C(0x551701fe2fee50db)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(INT64_C(-157019681043241904)));
  EXPECT_EQ(A >> 57, IMP(UINT64_C(0xffffffffffffffe4), UINT64_C(0xac3557d363fe6a30)));
  EXPECT_EQ(A << 57, IMP(UINT64_C(0xa8c0e4a5ab2cc03d), UINT64_C(0x2600000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0xc9586aafa6c7fcd4), UINT64_C(0x81387c6ce8f2834c)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0xc9586aafa6c7fcd4), UINT64_C(0x3fac293e43cdb9da)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0xc9586aafa6c7fcd4), UINT64_C(0x40b47b42c4f27a2a)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0xc9586aafa6c7fcd4), UINT64_C(0x60f67bd7d6f27ebb)));
  EXPECT_EQ((T = A, T &= B), IMP(INT64_C(2324420997928715409)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0xa5efea9dd3fdae1d), UINT64_C(0x203d6b68bd3d843b)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0xfffffffffffffffe), UINT64_C(0x551701fe2fee50db)));
  EXPECT_EQ((T = A, T %= B), IMP(INT64_C(-157019681043241904)));
  EXPECT_EQ((T = A, T >>= 57), IMP(UINT64_C(0xffffffffffffffe4), UINT64_C(0xac3557d363fe6a30)));
  EXPECT_EQ((T = A, T <<= 57), IMP(UINT64_C(0xa8c0e4a5ab2cc03d), UINT64_C(0x2600000000000000)));
  EXPECT_EQ(ror(A, 57), IMP(UINT64_C(0x39296acb300f49e4), UINT64_C(0xac3557d363fe6a30)));
  EXPECT_EQ(rol(A, 57), IMP(UINT64_C(0xa8c0e4a5ab2cc03d), UINT64_C(0x2792b0d55f4d8ff9)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0xc9586aafa6c7fcd4), UINT64_C(0x607252d596601e93)));
  EXPECT_EQ(T, IMP(UINT64_C(0xc9586aafa6c7fcd4), UINT64_C(0x607252d596601e94)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0xc9586aafa6c7fcd4), UINT64_C(0x607252d596601e93)));
  EXPECT_EQ(T, IMP(UINT64_C(0xc9586aafa6c7fcd4), UINT64_C(0x607252d596601e92)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0xc9586aafa6c7fcd4), UINT64_C(0x607252d596601e94)));
  EXPECT_EQ(T, IMP(UINT64_C(0xc9586aafa6c7fcd4), UINT64_C(0x607252d596601e94)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0xc9586aafa6c7fcd4), UINT64_C(0x607252d596601e92)));
  EXPECT_EQ(T, IMP(UINT64_C(0xc9586aafa6c7fcd4), UINT64_C(0x607252d596601e92)));
}

TEST(u128, autogen_basic_94) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(UINT64_C(0x2e7b19977e75bbc8));
  const IMP B = IMP(UINT64_C(0x9eb78b808506ce26), UINT64_C(0x8a7da9ebfdfc97fd));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x9eb78b808506ce26), UINT64_C(0xb8f8c3837c7253c5)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x6148747f7af931d9), UINT64_C(0xa3fd6fab807923cb)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x9eb78b808506ce26), UINT64_C(0xa406b07c83892c35)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0x9eb78b808506ce26), UINT64_C(0xae7fb9fffffdbffd)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x0a7909837c7493c8)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x300e7e52176c0c03), UINT64_C(0xc48de560ecfd8ca8)));
  EXPECT_EQ(-A, IMP(-INT64_C(3349298886332496840)));
  EXPECT_EQ(~A, IMP(-INT64_C(3349298886332496841)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x2e7b19977e75bbc8)));
  EXPECT_EQ(A >> 125, IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A << 125, IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x9eb78b808506ce26), UINT64_C(0xb8f8c3837c7253c5)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x6148747f7af931d9), UINT64_C(0xa3fd6fab807923cb)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x9eb78b808506ce26), UINT64_C(0xa406b07c83892c35)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0x9eb78b808506ce26), UINT64_C(0xae7fb9fffffdbffd)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x0a7909837c7493c8)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x300e7e52176c0c03), UINT64_C(0xc48de560ecfd8ca8)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x2e7b19977e75bbc8)));
  EXPECT_EQ((T = A, T >>= 125), IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T <<= 125), IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 125), IMP(UINT64_C(0x0000000000000001), UINT64_C(0x73d8ccbbf3adde40)));
  EXPECT_EQ(rol(A, 125), IMP(UINT64_C(0x05cf6332efceb779)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0x2e7b19977e75bbc8)));
  EXPECT_EQ(T, IMP(UINT64_C(0x2e7b19977e75bbc9)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0x2e7b19977e75bbc8)));
  EXPECT_EQ(T, IMP(UINT64_C(0x2e7b19977e75bbc7)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0x2e7b19977e75bbc9)));
  EXPECT_EQ(T, IMP(UINT64_C(0x2e7b19977e75bbc9)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0x2e7b19977e75bbc7)));
  EXPECT_EQ(T, IMP(UINT64_C(0x2e7b19977e75bbc7)));
}

TEST(i128, autogen_basic_95) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(INT64_C(3349298886332496840));
  const IMP B = IMP(UINT64_C(0x9eb78b808506ce26), UINT64_C(0x8a7da9ebfdfc97fd));
  IMP T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x9eb78b808506ce26), UINT64_C(0xb8f8c3837c7253c5)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x6148747f7af931d9), UINT64_C(0xa3fd6fab807923cb)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x9eb78b808506ce26), UINT64_C(0xa406b07c83892c35)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0x9eb78b808506ce26), UINT64_C(0xae7fb9fffffdbffd)));
  EXPECT_EQ(A & B, IMP(INT64_C(754644872894649288)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x300e7e52176c0c03), UINT64_C(0xc48de560ecfd8ca8)));
  EXPECT_EQ(-A, IMP(INT64_C(-3349298886332496840)));
  EXPECT_EQ(~A, IMP(INT64_C(-3349298886332496841)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(INT64_C(0)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(INT64_C(3349298886332496840)));
  EXPECT_EQ(A >> 125, IMP(INT64_C(0)));
  EXPECT_EQ(A << 125, IMP(INT64_C(0)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x9eb78b808506ce26), UINT64_C(0xb8f8c3837c7253c5)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x6148747f7af931d9), UINT64_C(0xa3fd6fab807923cb)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x9eb78b808506ce26), UINT64_C(0xa406b07c83892c35)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0x9eb78b808506ce26), UINT64_C(0xae7fb9fffffdbffd)));
  EXPECT_EQ((T = A, T &= B), IMP(INT64_C(754644872894649288)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x300e7e52176c0c03), UINT64_C(0xc48de560ecfd8ca8)));
  EXPECT_EQ((T = A, T /= B), IMP(INT64_C(0)));
  EXPECT_EQ((T = A, T %= B), IMP(INT64_C(3349298886332496840)));
  EXPECT_EQ((T = A, T >>= 125), IMP(INT64_C(0)));
  EXPECT_EQ((T = A, T <<= 125), IMP(INT64_C(0)));
  EXPECT_EQ(ror(A, 125), IMP(UINT64_C(0x0000000000000001), UINT64_C(0x73d8ccbbf3adde40)));
  EXPECT_EQ(rol(A, 125), IMP(INT64_C(418662360791562105)));
  EXPECT_EQ((T = A, T++), IMP(INT64_C(3349298886332496840)));
  EXPECT_EQ(T, IMP(INT64_C(3349298886332496841)));
  EXPECT_EQ((T = A, T--), IMP(INT64_C(3349298886332496840)));
  EXPECT_EQ(T, IMP(INT64_C(3349298886332496839)));
  EXPECT_EQ((T = A, ++T), IMP(INT64_C(3349298886332496841)));
  EXPECT_EQ(T, IMP(INT64_C(3349298886332496841)));
  EXPECT_EQ((T = A, --T), IMP(INT64_C(3349298886332496839)));
  EXPECT_EQ(T, IMP(INT64_C(3349298886332496839)));
}

TEST(u128, autogen_basic_96) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(UINT64_C(0x569fca97ce5e7781), UINT64_C(0x078f85b1f56081fc));
  const IMP B = IMP(UINT64_C(0xcc07534a45a9bb77), UINT64_C(0x58b44778da807e3a));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x22a71de2140832f8), UINT64_C(0x6043cd2acfe10036)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x8a98774d88b4bc09), UINT64_C(0xaedb3e391ae003c2)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x9a9899dd8bf7ccf6), UINT64_C(0x5f3bc2c92fe0ffc6)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0xde9fdbdfcffffff7), UINT64_C(0x5fbfc7f9ffe0fffe)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x4407420244083301), UINT64_C(0x00840530d0000038)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x523a1df7b22ccfb7), UINT64_C(0x8cba9228add77b18)));
  EXPECT_EQ(-A, IMP(UINT64_C(0xa960356831a1887e), UINT64_C(0xf8707a4e0a9f7e04)));
  EXPECT_EQ(~A, IMP(UINT64_C(0xa960356831a1887e), UINT64_C(0xf8707a4e0a9f7e03)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x569fca97ce5e7781), UINT64_C(0x078f85b1f56081fc)));
  EXPECT_EQ(A >> 58, IMP(UINT64_C(0x0000000000000015), UINT64_C(0xa7f2a5f3979de041)));
  EXPECT_EQ(A << 58, IMP(UINT64_C(0x041e3e16c7d58207), UINT64_C(0xf000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x22a71de2140832f8), UINT64_C(0x6043cd2acfe10036)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x8a98774d88b4bc09), UINT64_C(0xaedb3e391ae003c2)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x9a9899dd8bf7ccf6), UINT64_C(0x5f3bc2c92fe0ffc6)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0xde9fdbdfcffffff7), UINT64_C(0x5fbfc7f9ffe0fffe)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x4407420244083301), UINT64_C(0x00840530d0000038)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x523a1df7b22ccfb7), UINT64_C(0x8cba9228add77b18)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x569fca97ce5e7781), UINT64_C(0x078f85b1f56081fc)));
  EXPECT_EQ((T = A, T >>= 58), IMP(UINT64_C(0x0000000000000015), UINT64_C(0xa7f2a5f3979de041)));
  EXPECT_EQ((T = A, T <<= 58), IMP(UINT64_C(0x041e3e16c7d58207), UINT64_C(0xf000000000000000)));
  EXPECT_EQ(ror(A, 58), IMP(UINT64_C(0xe3e16c7d58207f15), UINT64_C(0xa7f2a5f3979de041)));
  EXPECT_EQ(rol(A, 58), IMP(UINT64_C(0x041e3e16c7d58207), UINT64_C(0xf15a7f2a5f3979de)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0x569fca97ce5e7781), UINT64_C(0x078f85b1f56081fc)));
  EXPECT_EQ(T, IMP(UINT64_C(0x569fca97ce5e7781), UINT64_C(0x078f85b1f56081fd)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0x569fca97ce5e7781), UINT64_C(0x078f85b1f56081fc)));
  EXPECT_EQ(T, IMP(UINT64_C(0x569fca97ce5e7781), UINT64_C(0x078f85b1f56081fb)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0x569fca97ce5e7781), UINT64_C(0x078f85b1f56081fd)));
  EXPECT_EQ(T, IMP(UINT64_C(0x569fca97ce5e7781), UINT64_C(0x078f85b1f56081fd)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0x569fca97ce5e7781), UINT64_C(0x078f85b1f56081fb)));
  EXPECT_EQ(T, IMP(UINT64_C(0x569fca97ce5e7781), UINT64_C(0x078f85b1f56081fb)));
}

TEST(i128, autogen_basic_97) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(UINT64_C(0x569fca97ce5e7781), UINT64_C(0x078f85b1f56081fc));
  const IMP B = IMP(UINT64_C(0xcc07534a45a9bb77), UINT64_C(0x58b44778da807e3a));
  IMP T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x22a71de2140832f8), UINT64_C(0x6043cd2acfe10036)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x8a98774d88b4bc09), UINT64_C(0xaedb3e391ae003c2)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x9a9899dd8bf7ccf6), UINT64_C(0x5f3bc2c92fe0ffc6)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0xde9fdbdfcffffff7), UINT64_C(0x5fbfc7f9ffe0fffe)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x4407420244083301), UINT64_C(0x00840530d0000038)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x523a1df7b22ccfb7), UINT64_C(0x8cba9228add77b18)));
  EXPECT_EQ(-A, IMP(UINT64_C(0xa960356831a1887e), UINT64_C(0xf8707a4e0a9f7e04)));
  EXPECT_EQ(~A, IMP(UINT64_C(0xa960356831a1887e), UINT64_C(0xf8707a4e0a9f7e03)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(INT64_C(-1)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x22a71de2140832f8), UINT64_C(0x6043cd2acfe10036)));
  EXPECT_EQ(A >> 58, IMP(UINT64_C(0x0000000000000015), UINT64_C(0xa7f2a5f3979de041)));
  EXPECT_EQ(A << 58, IMP(UINT64_C(0x041e3e16c7d58207), UINT64_C(0xf000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x22a71de2140832f8), UINT64_C(0x6043cd2acfe10036)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x8a98774d88b4bc09), UINT64_C(0xaedb3e391ae003c2)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x9a9899dd8bf7ccf6), UINT64_C(0x5f3bc2c92fe0ffc6)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0xde9fdbdfcffffff7), UINT64_C(0x5fbfc7f9ffe0fffe)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x4407420244083301), UINT64_C(0x00840530d0000038)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x523a1df7b22ccfb7), UINT64_C(0x8cba9228add77b18)));
  EXPECT_EQ((T = A, T /= B), IMP(INT64_C(-1)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x22a71de2140832f8), UINT64_C(0x6043cd2acfe10036)));
  EXPECT_EQ((T = A, T >>= 58), IMP(UINT64_C(0x0000000000000015), UINT64_C(0xa7f2a5f3979de041)));
  EXPECT_EQ((T = A, T <<= 58), IMP(UINT64_C(0x041e3e16c7d58207), UINT64_C(0xf000000000000000)));
  EXPECT_EQ(ror(A, 58), IMP(UINT64_C(0xe3e16c7d58207f15), UINT64_C(0xa7f2a5f3979de041)));
  EXPECT_EQ(rol(A, 58), IMP(UINT64_C(0x041e3e16c7d58207), UINT64_C(0xf15a7f2a5f3979de)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0x569fca97ce5e7781), UINT64_C(0x078f85b1f56081fc)));
  EXPECT_EQ(T, IMP(UINT64_C(0x569fca97ce5e7781), UINT64_C(0x078f85b1f56081fd)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0x569fca97ce5e7781), UINT64_C(0x078f85b1f56081fc)));
  EXPECT_EQ(T, IMP(UINT64_C(0x569fca97ce5e7781), UINT64_C(0x078f85b1f56081fb)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0x569fca97ce5e7781), UINT64_C(0x078f85b1f56081fd)));
  EXPECT_EQ(T, IMP(UINT64_C(0x569fca97ce5e7781), UINT64_C(0x078f85b1f56081fd)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0x569fca97ce5e7781), UINT64_C(0x078f85b1f56081fb)));
  EXPECT_EQ(T, IMP(UINT64_C(0x569fca97ce5e7781), UINT64_C(0x078f85b1f56081fb)));
}

TEST(u128, autogen_basic_98) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(UINT64_C(0x5c9f31c4198a4745), UINT64_C(0x127ab968053a4370));
  const IMP B = IMP(UINT64_C(0x1f96c59071865e9b), UINT64_C(0x8a2432bea92c078e));
  IMP T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x7c35f7548b10a5e0), UINT64_C(0x9c9eec26ae664afe)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x3d086c33a803e8a9), UINT64_C(0x885686a95c0e3be2)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x4309f454680c19de), UINT64_C(0x985e8bd6ac1644fe)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0x5f9ff5d4798e5fdf), UINT64_C(0x9a7ebbfead3e47fe)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x1c96018011824601), UINT64_C(0x0220302801280300)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x06e2cf87ec20a2e4), UINT64_C(0x42a2f98005697820)));
  EXPECT_EQ(-A, IMP(UINT64_C(0xa360ce3be675b8ba), UINT64_C(0xed854697fac5bc90)));
  EXPECT_EQ(~A, IMP(UINT64_C(0xa360ce3be675b8ba), UINT64_C(0xed854697fac5bc8f)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x0000000000000002)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x1d71a6a3367d8a0d), UINT64_C(0xfe3253eab2e23454)));
  EXPECT_EQ(A >> 14, IMP(UINT64_C(0x0001727cc7106629), UINT64_C(0x1d1449eae5a014e9)));
  EXPECT_EQ(A << 14, IMP(UINT64_C(0xcc71066291d1449e), UINT64_C(0xae5a014e90dc0000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x7c35f7548b10a5e0), UINT64_C(0x9c9eec26ae664afe)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x3d086c33a803e8a9), UINT64_C(0x885686a95c0e3be2)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x4309f454680c19de), UINT64_C(0x985e8bd6ac1644fe)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0x5f9ff5d4798e5fdf), UINT64_C(0x9a7ebbfead3e47fe)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x1c96018011824601), UINT64_C(0x0220302801280300)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x06e2cf87ec20a2e4), UINT64_C(0x42a2f98005697820)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x0000000000000002)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x1d71a6a3367d8a0d), UINT64_C(0xfe3253eab2e23454)));
  EXPECT_EQ((T = A, T >>= 14), IMP(UINT64_C(0x0001727cc7106629), UINT64_C(0x1d1449eae5a014e9)));
  EXPECT_EQ((T = A, T <<= 14), IMP(UINT64_C(0xcc71066291d1449e), UINT64_C(0xae5a014e90dc0000)));
  EXPECT_EQ(ror(A, 14), IMP(UINT64_C(0x0dc1727cc7106629), UINT64_C(0x1d1449eae5a014e9)));
  EXPECT_EQ(rol(A, 14), IMP(UINT64_C(0xcc71066291d1449e), UINT64_C(0xae5a014e90dc1727)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0x5c9f31c4198a4745), UINT64_C(0x127ab968053a4370)));
  EXPECT_EQ(T, IMP(UINT64_C(0x5c9f31c4198a4745), UINT64_C(0x127ab968053a4371)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0x5c9f31c4198a4745), UINT64_C(0x127ab968053a4370)));
  EXPECT_EQ(T, IMP(UINT64_C(0x5c9f31c4198a4745), UINT64_C(0x127ab968053a436f)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0x5c9f31c4198a4745), UINT64_C(0x127ab968053a4371)));
  EXPECT_EQ(T, IMP(UINT64_C(0x5c9f31c4198a4745), UINT64_C(0x127ab968053a4371)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0x5c9f31c4198a4745), UINT64_C(0x127ab968053a436f)));
  EXPECT_EQ(T, IMP(UINT64_C(0x5c9f31c4198a4745), UINT64_C(0x127ab968053a436f)));
}

TEST(i128, autogen_basic_99) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(UINT64_C(0x5c9f31c4198a4745), UINT64_C(0x127ab968053a4370));
  const IMP B = IMP(UINT64_C(0x1f96c59071865e9b), UINT64_C(0x8a2432bea92c078e));
  IMP T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x7c35f7548b10a5e0), UINT64_C(0x9c9eec26ae664afe)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x3d086c33a803e8a9), UINT64_C(0x885686a95c0e3be2)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x4309f454680c19de), UINT64_C(0x985e8bd6ac1644fe)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0x5f9ff5d4798e5fdf), UINT64_C(0x9a7ebbfead3e47fe)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x1c96018011824601), UINT64_C(0x0220302801280300)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x06e2cf87ec20a2e4), UINT64_C(0x42a2f98005697820)));
  EXPECT_EQ(-A, IMP(UINT64_C(0xa360ce3be675b8ba), UINT64_C(0xed854697fac5bc90)));
  EXPECT_EQ(~A, IMP(UINT64_C(0xa360ce3be675b8ba), UINT64_C(0xed854697fac5bc8f)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(INT64_C(2)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x1d71a6a3367d8a0d), UINT64_C(0xfe3253eab2e23454)));
  EXPECT_EQ(A >> 14, IMP(UINT64_C(0x0001727cc7106629), UINT64_C(0x1d1449eae5a014e9)));
  EXPECT_EQ(A << 14, IMP(UINT64_C(0xcc71066291d1449e), UINT64_C(0xae5a014e90dc0000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x7c35f7548b10a5e0), UINT64_C(0x9c9eec26ae664afe)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x3d086c33a803e8a9), UINT64_C(0x885686a95c0e3be2)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x4309f454680c19de), UINT64_C(0x985e8bd6ac1644fe)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0x5f9ff5d4798e5fdf), UINT64_C(0x9a7ebbfead3e47fe)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x1c96018011824601), UINT64_C(0x0220302801280300)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x06e2cf87ec20a2e4), UINT64_C(0x42a2f98005697820)));
  EXPECT_EQ((T = A, T /= B), IMP(INT64_C(2)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x1d71a6a3367d8a0d), UINT64_C(0xfe3253eab2e23454)));
  EXPECT_EQ((T = A, T >>= 14), IMP(UINT64_C(0x0001727cc7106629), UINT64_C(0x1d1449eae5a014e9)));
  EXPECT_EQ((T = A, T <<= 14), IMP(UINT64_C(0xcc71066291d1449e), UINT64_C(0xae5a014e90dc0000)));
  EXPECT_EQ(ror(A, 14), IMP(UINT64_C(0x0dc1727cc7106629), UINT64_C(0x1d1449eae5a014e9)));
  EXPECT_EQ(rol(A, 14), IMP(UINT64_C(0xcc71066291d1449e), UINT64_C(0xae5a014e90dc1727)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0x5c9f31c4198a4745), UINT64_C(0x127ab968053a4370)));
  EXPECT_EQ(T, IMP(UINT64_C(0x5c9f31c4198a4745), UINT64_C(0x127ab968053a4371)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0x5c9f31c4198a4745), UINT64_C(0x127ab968053a4370)));
  EXPECT_EQ(T, IMP(UINT64_C(0x5c9f31c4198a4745), UINT64_C(0x127ab968053a436f)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0x5c9f31c4198a4745), UINT64_C(0x127ab968053a4371)));
  EXPECT_EQ(T, IMP(UINT64_C(0x5c9f31c4198a4745), UINT64_C(0x127ab968053a4371)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0x5c9f31c4198a4745), UINT64_C(0x127ab968053a436f)));
  EXPECT_EQ(T, IMP(UINT64_C(0x5c9f31c4198a4745), UINT64_C(0x127ab968053a436f)));
}

TEST(u128, autogen_basic_100) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(UINT64_C(0xc4a0044be8ee8b49), UINT64_C(0x0000000000000000));
  const IMP B = IMP(UINT64_C(0x4a9f9efe4a49ebff), UINT64_C(0x41a04bf5c1e47e22));
  IMP T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x0f3fa34a33387748), UINT64_C(0x41a04bf5c1e47e22)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x7a00654d9ea49f49), UINT64_C(0xbe5fb40a3e1b81de)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x8e3f9ab5a2a760b6), UINT64_C(0x41a04bf5c1e47e22)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0xcebf9effeaefebff), UINT64_C(0x41a04bf5c1e47e22)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x4080044a48488b49), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x534eea0d6e406db2), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(-A, IMP(UINT64_C(0x3b5ffbb4171174b7), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(~A, IMP(UINT64_C(0x3b5ffbb4171174b6), UINT64_C(0xffffffffffffffff)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x0000000000000002)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x2f60c64f545ab34a), UINT64_C(0x7cbf68147c3703bc)));
  EXPECT_EQ(A >> 34, IMP(UINT64_C(0x0000000031280112), UINT64_C(0xfa3ba2d240000000)));
  EXPECT_EQ(A << 34, IMP(UINT64_C(0xa3ba2d2400000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x0f3fa34a33387748), UINT64_C(0x41a04bf5c1e47e22)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x7a00654d9ea49f49), UINT64_C(0xbe5fb40a3e1b81de)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x8e3f9ab5a2a760b6), UINT64_C(0x41a04bf5c1e47e22)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0xcebf9effeaefebff), UINT64_C(0x41a04bf5c1e47e22)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x4080044a48488b49), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x534eea0d6e406db2), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x0000000000000002)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x2f60c64f545ab34a), UINT64_C(0x7cbf68147c3703bc)));
  EXPECT_EQ((T = A, T >>= 34), IMP(UINT64_C(0x0000000031280112), UINT64_C(0xfa3ba2d240000000)));
  EXPECT_EQ((T = A, T <<= 34), IMP(UINT64_C(0xa3ba2d2400000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 34), IMP(UINT64_C(0x0000000031280112), UINT64_C(0xfa3ba2d240000000)));
  EXPECT_EQ(rol(A, 34), IMP(UINT64_C(0xa3ba2d2400000000), UINT64_C(0x000000031280112f)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0xc4a0044be8ee8b49), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, IMP(UINT64_C(0xc4a0044be8ee8b49), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0xc4a0044be8ee8b49), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, IMP(UINT64_C(0xc4a0044be8ee8b48), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0xc4a0044be8ee8b49), UINT64_C(0x0000000000000001)));
  EXPECT_EQ(T, IMP(UINT64_C(0xc4a0044be8ee8b49), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0xc4a0044be8ee8b48), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ(T, IMP(UINT64_C(0xc4a0044be8ee8b48), UINT64_C(0xffffffffffffffff)));
}

TEST(i128, autogen_basic_101) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(UINT64_C(0xc4a0044be8ee8b49), UINT64_C(0x0000000000000000));
  const IMP B = IMP(UINT64_C(0x4a9f9efe4a49ebff), UINT64_C(0x41a04bf5c1e47e22));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x0f3fa34a33387748), UINT64_C(0x41a04bf5c1e47e22)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x7a00654d9ea49f49), UINT64_C(0xbe5fb40a3e1b81de)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x8e3f9ab5a2a760b6), UINT64_C(0x41a04bf5c1e47e22)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0xcebf9effeaefebff), UINT64_C(0x41a04bf5c1e47e22)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x4080044a48488b49), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x534eea0d6e406db2), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(-A, IMP(UINT64_C(0x3b5ffbb4171174b7), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(~A, IMP(UINT64_C(0x3b5ffbb4171174b6), UINT64_C(0xffffffffffffffff)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(INT64_C(0)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0xc4a0044be8ee8b49), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A >> 34, IMP(UINT64_C(0xfffffffff1280112), UINT64_C(0xfa3ba2d240000000)));
  EXPECT_EQ(A << 34, IMP(UINT64_C(0xa3ba2d2400000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x0f3fa34a33387748), UINT64_C(0x41a04bf5c1e47e22)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x7a00654d9ea49f49), UINT64_C(0xbe5fb40a3e1b81de)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x8e3f9ab5a2a760b6), UINT64_C(0x41a04bf5c1e47e22)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0xcebf9effeaefebff), UINT64_C(0x41a04bf5c1e47e22)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x4080044a48488b49), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x534eea0d6e406db2), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T /= B), IMP(INT64_C(0)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0xc4a0044be8ee8b49), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T >>= 34), IMP(UINT64_C(0xfffffffff1280112), UINT64_C(0xfa3ba2d240000000)));
  EXPECT_EQ((T = A, T <<= 34), IMP(UINT64_C(0xa3ba2d2400000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 34), IMP(UINT64_C(0x0000000031280112), UINT64_C(0xfa3ba2d240000000)));
  EXPECT_EQ(rol(A, 34), IMP(UINT64_C(0xa3ba2d2400000000), UINT64_C(0x000000031280112f)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0xc4a0044be8ee8b49), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, IMP(UINT64_C(0xc4a0044be8ee8b49), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0xc4a0044be8ee8b49), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, IMP(UINT64_C(0xc4a0044be8ee8b48), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0xc4a0044be8ee8b49), UINT64_C(0x0000000000000001)));
  EXPECT_EQ(T, IMP(UINT64_C(0xc4a0044be8ee8b49), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0xc4a0044be8ee8b48), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ(T, IMP(UINT64_C(0xc4a0044be8ee8b48), UINT64_C(0xffffffffffffffff)));
}

TEST(u128, autogen_basic_102) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(UINT64_C(0x46a2ab8ed0be87a3), UINT64_C(0xaf29bff8840e35f6));
  const IMP B = IMP(UINT64_C(0x8866596afdec3424), UINT64_C(0x0000000000000000));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0xcf0904f9ceaabbc7), UINT64_C(0xaf29bff8840e35f6)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0xbe3c5223d2d2537f), UINT64_C(0xaf29bff8840e35f6)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0xcec4f2e42d52b387), UINT64_C(0xaf29bff8840e35f6)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0xcee6fbeefdfeb7a7), UINT64_C(0xaf29bff8840e35f6)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x0022090ad0ac0420), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x7f22200f51bd8e98), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(-A, IMP(UINT64_C(0xb95d54712f41785c), UINT64_C(0x50d640077bf1ca0a)));
  EXPECT_EQ(~A, IMP(UINT64_C(0xb95d54712f41785c), UINT64_C(0x50d640077bf1ca09)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x46a2ab8ed0be87a3), UINT64_C(0xaf29bff8840e35f6)));
  EXPECT_EQ(A >> 0, IMP(UINT64_C(0x46a2ab8ed0be87a3), UINT64_C(0xaf29bff8840e35f6)));
  EXPECT_EQ(A << 0, IMP(UINT64_C(0x46a2ab8ed0be87a3), UINT64_C(0xaf29bff8840e35f6)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0xcf0904f9ceaabbc7), UINT64_C(0xaf29bff8840e35f6)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0xbe3c5223d2d2537f), UINT64_C(0xaf29bff8840e35f6)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0xcec4f2e42d52b387), UINT64_C(0xaf29bff8840e35f6)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0xcee6fbeefdfeb7a7), UINT64_C(0xaf29bff8840e35f6)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x0022090ad0ac0420), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x7f22200f51bd8e98), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x46a2ab8ed0be87a3), UINT64_C(0xaf29bff8840e35f6)));
  EXPECT_EQ((T = A, T >>= 0), IMP(UINT64_C(0x46a2ab8ed0be87a3), UINT64_C(0xaf29bff8840e35f6)));
  EXPECT_EQ((T = A, T <<= 0), IMP(UINT64_C(0x46a2ab8ed0be87a3), UINT64_C(0xaf29bff8840e35f6)));
  EXPECT_EQ(ror(A, 0), IMP(UINT64_C(0x46a2ab8ed0be87a3), UINT64_C(0xaf29bff8840e35f6)));
  EXPECT_EQ(rol(A, 0), IMP(UINT64_C(0x46a2ab8ed0be87a3), UINT64_C(0xaf29bff8840e35f6)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0x46a2ab8ed0be87a3), UINT64_C(0xaf29bff8840e35f6)));
  EXPECT_EQ(T, IMP(UINT64_C(0x46a2ab8ed0be87a3), UINT64_C(0xaf29bff8840e35f7)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0x46a2ab8ed0be87a3), UINT64_C(0xaf29bff8840e35f6)));
  EXPECT_EQ(T, IMP(UINT64_C(0x46a2ab8ed0be87a3), UINT64_C(0xaf29bff8840e35f5)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0x46a2ab8ed0be87a3), UINT64_C(0xaf29bff8840e35f7)));
  EXPECT_EQ(T, IMP(UINT64_C(0x46a2ab8ed0be87a3), UINT64_C(0xaf29bff8840e35f7)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0x46a2ab8ed0be87a3), UINT64_C(0xaf29bff8840e35f5)));
  EXPECT_EQ(T, IMP(UINT64_C(0x46a2ab8ed0be87a3), UINT64_C(0xaf29bff8840e35f5)));
}

TEST(i128, autogen_basic_103) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(UINT64_C(0x46a2ab8ed0be87a3), UINT64_C(0xaf29bff8840e35f6));
  const IMP B = IMP(UINT64_C(0x8866596afdec3424), UINT64_C(0x0000000000000000));
  IMP T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0xcf0904f9ceaabbc7), UINT64_C(0xaf29bff8840e35f6)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0xbe3c5223d2d2537f), UINT64_C(0xaf29bff8840e35f6)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0xcec4f2e42d52b387), UINT64_C(0xaf29bff8840e35f6)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0xcee6fbeefdfeb7a7), UINT64_C(0xaf29bff8840e35f6)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x0022090ad0ac0420), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x7f22200f51bd8e98), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(-A, IMP(UINT64_C(0xb95d54712f41785c), UINT64_C(0x50d640077bf1ca0a)));
  EXPECT_EQ(~A, IMP(UINT64_C(0xb95d54712f41785c), UINT64_C(0x50d640077bf1ca09)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(INT64_C(0)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x46a2ab8ed0be87a3), UINT64_C(0xaf29bff8840e35f6)));
  EXPECT_EQ(A >> 0, IMP(UINT64_C(0x46a2ab8ed0be87a3), UINT64_C(0xaf29bff8840e35f6)));
  EXPECT_EQ(A << 0, IMP(UINT64_C(0x46a2ab8ed0be87a3), UINT64_C(0xaf29bff8840e35f6)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0xcf0904f9ceaabbc7), UINT64_C(0xaf29bff8840e35f6)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0xbe3c5223d2d2537f), UINT64_C(0xaf29bff8840e35f6)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0xcec4f2e42d52b387), UINT64_C(0xaf29bff8840e35f6)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0xcee6fbeefdfeb7a7), UINT64_C(0xaf29bff8840e35f6)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x0022090ad0ac0420), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x7f22200f51bd8e98), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T /= B), IMP(INT64_C(0)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x46a2ab8ed0be87a3), UINT64_C(0xaf29bff8840e35f6)));
  EXPECT_EQ((T = A, T >>= 0), IMP(UINT64_C(0x46a2ab8ed0be87a3), UINT64_C(0xaf29bff8840e35f6)));
  EXPECT_EQ((T = A, T <<= 0), IMP(UINT64_C(0x46a2ab8ed0be87a3), UINT64_C(0xaf29bff8840e35f6)));
  EXPECT_EQ(ror(A, 0), IMP(UINT64_C(0x46a2ab8ed0be87a3), UINT64_C(0xaf29bff8840e35f6)));
  EXPECT_EQ(rol(A, 0), IMP(UINT64_C(0x46a2ab8ed0be87a3), UINT64_C(0xaf29bff8840e35f6)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0x46a2ab8ed0be87a3), UINT64_C(0xaf29bff8840e35f6)));
  EXPECT_EQ(T, IMP(UINT64_C(0x46a2ab8ed0be87a3), UINT64_C(0xaf29bff8840e35f7)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0x46a2ab8ed0be87a3), UINT64_C(0xaf29bff8840e35f6)));
  EXPECT_EQ(T, IMP(UINT64_C(0x46a2ab8ed0be87a3), UINT64_C(0xaf29bff8840e35f5)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0x46a2ab8ed0be87a3), UINT64_C(0xaf29bff8840e35f7)));
  EXPECT_EQ(T, IMP(UINT64_C(0x46a2ab8ed0be87a3), UINT64_C(0xaf29bff8840e35f7)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0x46a2ab8ed0be87a3), UINT64_C(0xaf29bff8840e35f5)));
  EXPECT_EQ(T, IMP(UINT64_C(0x46a2ab8ed0be87a3), UINT64_C(0xaf29bff8840e35f5)));
}

TEST(u128, autogen_basic_104) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(UINT64_C(0xe96ba0516a8ac818), UINT64_C(0x0000000000000000));
  const IMP B = IMP(UINT64_C(0x7c358c39aada078d), UINT64_C(0x0000000000000000));
  IMP T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x65a12c8b1564cfa5), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x6d361417bfb0c08b), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x955e2c68c050cf95), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0xfd7fac79eadacf9d), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x682180112a8a0008), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(-A, IMP(UINT64_C(0x16945fae957537e8), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(~A, IMP(UINT64_C(0x16945fae957537e7), UINT64_C(0xffffffffffffffff)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x0000000000000001)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x6d361417bfb0c08b), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A >> 0, IMP(UINT64_C(0xe96ba0516a8ac818), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A << 0, IMP(UINT64_C(0xe96ba0516a8ac818), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x65a12c8b1564cfa5), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x6d361417bfb0c08b), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x955e2c68c050cf95), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0xfd7fac79eadacf9d), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x682180112a8a0008), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x6d361417bfb0c08b), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T >>= 0), IMP(UINT64_C(0xe96ba0516a8ac818), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T <<= 0), IMP(UINT64_C(0xe96ba0516a8ac818), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 0), IMP(UINT64_C(0xe96ba0516a8ac818), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(rol(A, 0), IMP(UINT64_C(0xe96ba0516a8ac818), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0xe96ba0516a8ac818), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, IMP(UINT64_C(0xe96ba0516a8ac818), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0xe96ba0516a8ac818), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, IMP(UINT64_C(0xe96ba0516a8ac817), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0xe96ba0516a8ac818), UINT64_C(0x0000000000000001)));
  EXPECT_EQ(T, IMP(UINT64_C(0xe96ba0516a8ac818), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0xe96ba0516a8ac817), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ(T, IMP(UINT64_C(0xe96ba0516a8ac817), UINT64_C(0xffffffffffffffff)));
}

TEST(i128, autogen_basic_105) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(UINT64_C(0xe96ba0516a8ac818), UINT64_C(0x0000000000000000));
  const IMP B = IMP(UINT64_C(0x7c358c39aada078d), UINT64_C(0x0000000000000000));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x65a12c8b1564cfa5), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x6d361417bfb0c08b), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x955e2c68c050cf95), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0xfd7fac79eadacf9d), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x682180112a8a0008), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A * B, IMP(INT64_C(0)));
  EXPECT_EQ(-A, IMP(UINT64_C(0x16945fae957537e8), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(~A, IMP(UINT64_C(0x16945fae957537e7), UINT64_C(0xffffffffffffffff)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(INT64_C(0)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0xe96ba0516a8ac818), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A >> 0, IMP(UINT64_C(0xe96ba0516a8ac818), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A << 0, IMP(UINT64_C(0xe96ba0516a8ac818), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x65a12c8b1564cfa5), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x6d361417bfb0c08b), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x955e2c68c050cf95), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0xfd7fac79eadacf9d), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x682180112a8a0008), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T *= B), IMP(INT64_C(0)));
  EXPECT_EQ((T = A, T /= B), IMP(INT64_C(0)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0xe96ba0516a8ac818), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T >>= 0), IMP(UINT64_C(0xe96ba0516a8ac818), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T <<= 0), IMP(UINT64_C(0xe96ba0516a8ac818), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 0), IMP(UINT64_C(0xe96ba0516a8ac818), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(rol(A, 0), IMP(UINT64_C(0xe96ba0516a8ac818), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0xe96ba0516a8ac818), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, IMP(UINT64_C(0xe96ba0516a8ac818), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0xe96ba0516a8ac818), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, IMP(UINT64_C(0xe96ba0516a8ac817), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0xe96ba0516a8ac818), UINT64_C(0x0000000000000001)));
  EXPECT_EQ(T, IMP(UINT64_C(0xe96ba0516a8ac818), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0xe96ba0516a8ac817), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ(T, IMP(UINT64_C(0xe96ba0516a8ac817), UINT64_C(0xffffffffffffffff)));
}

TEST(u128, autogen_basic_106) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(UINT64_C(0xfac2caa923aac30a), UINT64_C(0x0000000000000000));
  const IMP B = IMP(UINT64_C(0x8c31500f21089587));
  IMP T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0xfac2caa923aac30a), UINT64_C(0x8c31500f21089587)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0xfac2caa923aac309), UINT64_C(0x73ceaff0def76a79)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0xfac2caa923aac30a), UINT64_C(0x8c31500f21089587)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0xfac2caa923aac30a), UINT64_C(0x8c31500f21089587)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x006dff0494e1ac46), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(-A, IMP(UINT64_C(0x053d3556dc553cf6), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(~A, IMP(UINT64_C(0x053d3556dc553cf5), UINT64_C(0xffffffffffffffff)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x0000000000000001), UINT64_C(0xc9e778f7ef1a0846)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x0d72b71b7a44e516)));
  EXPECT_EQ(A >> 7, IMP(UINT64_C(0x01f5859552475586), UINT64_C(0x1400000000000000)));
  EXPECT_EQ(A << 7, IMP(UINT64_C(0x61655491d5618500), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0xfac2caa923aac30a), UINT64_C(0x8c31500f21089587)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0xfac2caa923aac309), UINT64_C(0x73ceaff0def76a79)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0xfac2caa923aac30a), UINT64_C(0x8c31500f21089587)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0xfac2caa923aac30a), UINT64_C(0x8c31500f21089587)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x006dff0494e1ac46), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x0000000000000001), UINT64_C(0xc9e778f7ef1a0846)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x0d72b71b7a44e516)));
  EXPECT_EQ((T = A, T >>= 7), IMP(UINT64_C(0x01f5859552475586), UINT64_C(0x1400000000000000)));
  EXPECT_EQ((T = A, T <<= 7), IMP(UINT64_C(0x61655491d5618500), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 7), IMP(UINT64_C(0x01f5859552475586), UINT64_C(0x1400000000000000)));
  EXPECT_EQ(rol(A, 7), IMP(UINT64_C(0x61655491d5618500), UINT64_C(0x000000000000007d)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0xfac2caa923aac30a), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, IMP(UINT64_C(0xfac2caa923aac30a), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0xfac2caa923aac30a), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, IMP(UINT64_C(0xfac2caa923aac309), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0xfac2caa923aac30a), UINT64_C(0x0000000000000001)));
  EXPECT_EQ(T, IMP(UINT64_C(0xfac2caa923aac30a), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0xfac2caa923aac309), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ(T, IMP(UINT64_C(0xfac2caa923aac309), UINT64_C(0xffffffffffffffff)));
}

TEST(i128, autogen_basic_107) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(UINT64_C(0xfac2caa923aac30a), UINT64_C(0x0000000000000000));
  const IMP B = IMP(UINT64_C(0x0000000000000000), UINT64_C(0x8c31500f21089587));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0xfac2caa923aac30a), UINT64_C(0x8c31500f21089587)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0xfac2caa923aac309), UINT64_C(0x73ceaff0def76a79)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0xfac2caa923aac30a), UINT64_C(0x8c31500f21089587)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0xfac2caa923aac30a), UINT64_C(0x8c31500f21089587)));
  EXPECT_EQ(A & B, IMP(INT64_C(0)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x006dff0494e1ac46), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(-A, IMP(UINT64_C(0x053d3556dc553cf6), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(~A, IMP(UINT64_C(0x053d3556dc553cf5), UINT64_C(0xffffffffffffffff)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(INT64_C(-689367542086355900)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(INT64_C(-1817670250157908956)));
  EXPECT_EQ(A >> 7, IMP(UINT64_C(0xfff5859552475586), UINT64_C(0x1400000000000000)));
  EXPECT_EQ(A << 7, IMP(UINT64_C(0x61655491d5618500), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0xfac2caa923aac30a), UINT64_C(0x8c31500f21089587)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0xfac2caa923aac309), UINT64_C(0x73ceaff0def76a79)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0xfac2caa923aac30a), UINT64_C(0x8c31500f21089587)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0xfac2caa923aac30a), UINT64_C(0x8c31500f21089587)));
  EXPECT_EQ((T = A, T &= B), IMP(INT64_C(0)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x006dff0494e1ac46), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T /= B), IMP(INT64_C(-689367542086355900)));
  EXPECT_EQ((T = A, T %= B), IMP(INT64_C(-1817670250157908956)));
  EXPECT_EQ((T = A, T >>= 7), IMP(UINT64_C(0xfff5859552475586), UINT64_C(0x1400000000000000)));
  EXPECT_EQ((T = A, T <<= 7), IMP(UINT64_C(0x61655491d5618500), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 7), IMP(UINT64_C(0x01f5859552475586), UINT64_C(0x1400000000000000)));
  EXPECT_EQ(rol(A, 7), IMP(UINT64_C(0x61655491d5618500), UINT64_C(0x000000000000007d)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0xfac2caa923aac30a), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, IMP(UINT64_C(0xfac2caa923aac30a), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0xfac2caa923aac30a), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, IMP(UINT64_C(0xfac2caa923aac309), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0xfac2caa923aac30a), UINT64_C(0x0000000000000001)));
  EXPECT_EQ(T, IMP(UINT64_C(0xfac2caa923aac30a), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0xfac2caa923aac309), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ(T, IMP(UINT64_C(0xfac2caa923aac309), UINT64_C(0xffffffffffffffff)));
}

TEST(u128, autogen_basic_108) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(UINT64_C(0x3c79a2975d89b34c));
  const IMP B = IMP(UINT64_C(0x22e948f86fffc011), UINT64_C(0x0000000000000000));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x22e948f86fffc011), UINT64_C(0x3c79a2975d89b34c)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0xdd16b70790003fef), UINT64_C(0x3c79a2975d89b34c)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x22e948f86fffc011), UINT64_C(0x3c79a2975d89b34c)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0x22e948f86fffc011), UINT64_C(0x3c79a2975d89b34c)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x745944bc0951e80c), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(-A, IMP(-INT64_C(4357692885450732364)));
  EXPECT_EQ(~A, IMP(-INT64_C(4357692885450732365)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x3c79a2975d89b34c)));
  EXPECT_EQ(A >> 0, IMP(UINT64_C(0x3c79a2975d89b34c)));
  EXPECT_EQ(A << 0, IMP(UINT64_C(0x3c79a2975d89b34c)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x22e948f86fffc011), UINT64_C(0x3c79a2975d89b34c)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0xdd16b70790003fef), UINT64_C(0x3c79a2975d89b34c)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x22e948f86fffc011), UINT64_C(0x3c79a2975d89b34c)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0x22e948f86fffc011), UINT64_C(0x3c79a2975d89b34c)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x745944bc0951e80c), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x3c79a2975d89b34c)));
  EXPECT_EQ((T = A, T >>= 0), IMP(UINT64_C(0x3c79a2975d89b34c)));
  EXPECT_EQ((T = A, T <<= 0), IMP(UINT64_C(0x3c79a2975d89b34c)));
  EXPECT_EQ(ror(A, 0), IMP(UINT64_C(0x3c79a2975d89b34c)));
  EXPECT_EQ(rol(A, 0), IMP(UINT64_C(0x3c79a2975d89b34c)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0x3c79a2975d89b34c)));
  EXPECT_EQ(T, IMP(UINT64_C(0x3c79a2975d89b34d)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0x3c79a2975d89b34c)));
  EXPECT_EQ(T, IMP(UINT64_C(0x3c79a2975d89b34b)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0x3c79a2975d89b34d)));
  EXPECT_EQ(T, IMP(UINT64_C(0x3c79a2975d89b34d)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0x3c79a2975d89b34b)));
  EXPECT_EQ(T, IMP(UINT64_C(0x3c79a2975d89b34b)));
}

TEST(i128, autogen_basic_109) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(INT64_C(4357692885450732364));
  const IMP B = IMP(UINT64_C(0x22e948f86fffc011), UINT64_C(0x0000000000000000));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x22e948f86fffc011), UINT64_C(0x3c79a2975d89b34c)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0xdd16b70790003fef), UINT64_C(0x3c79a2975d89b34c)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x22e948f86fffc011), UINT64_C(0x3c79a2975d89b34c)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0x22e948f86fffc011), UINT64_C(0x3c79a2975d89b34c)));
  EXPECT_EQ(A & B, IMP(INT64_C(0)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x745944bc0951e80c), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(-A, IMP(INT64_C(-4357692885450732364)));
  EXPECT_EQ(~A, IMP(INT64_C(-4357692885450732365)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(INT64_C(0)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(INT64_C(4357692885450732364)));
  EXPECT_EQ(A >> 0, IMP(INT64_C(4357692885450732364)));
  EXPECT_EQ(A << 0, IMP(INT64_C(4357692885450732364)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x22e948f86fffc011), UINT64_C(0x3c79a2975d89b34c)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0xdd16b70790003fef), UINT64_C(0x3c79a2975d89b34c)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x22e948f86fffc011), UINT64_C(0x3c79a2975d89b34c)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0x22e948f86fffc011), UINT64_C(0x3c79a2975d89b34c)));
  EXPECT_EQ((T = A, T &= B), IMP(INT64_C(0)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x745944bc0951e80c), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T /= B), IMP(INT64_C(0)));
  EXPECT_EQ((T = A, T %= B), IMP(INT64_C(4357692885450732364)));
  EXPECT_EQ((T = A, T >>= 0), IMP(INT64_C(4357692885450732364)));
  EXPECT_EQ((T = A, T <<= 0), IMP(INT64_C(4357692885450732364)));
  EXPECT_EQ(ror(A, 0), IMP(INT64_C(4357692885450732364)));
  EXPECT_EQ(rol(A, 0), IMP(INT64_C(4357692885450732364)));
  EXPECT_EQ((T = A, T++), IMP(INT64_C(4357692885450732364)));
  EXPECT_EQ(T, IMP(INT64_C(4357692885450732365)));
  EXPECT_EQ((T = A, T--), IMP(INT64_C(4357692885450732364)));
  EXPECT_EQ(T, IMP(INT64_C(4357692885450732363)));
  EXPECT_EQ((T = A, ++T), IMP(INT64_C(4357692885450732365)));
  EXPECT_EQ(T, IMP(INT64_C(4357692885450732365)));
  EXPECT_EQ((T = A, --T), IMP(INT64_C(4357692885450732363)));
  EXPECT_EQ(T, IMP(INT64_C(4357692885450732363)));
}

TEST(u128, autogen_basic_110) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(-INT64_C(4880148236482185003));
  const IMP B = IMP(UINT64_C(0x2a136e3da3cab9ab), UINT64_C(0x1e5593c228acf95e));
  IMP T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x2a136e3da3cab9aa), UINT64_C(0xda9bcecb21e7f233)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0xd5ec91c25c354654), UINT64_C(0x9df0a746d08dff77)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0xd5ec91c25c354654), UINT64_C(0xa213a8cad196018b)));
  EXPECT_EQ(A | B, IMP(-INT64_C(4731106403081586209)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x2a136e3da3cab9ab), UINT64_C(0x1c4413002828f854)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0xeb1987f8acd3e75e), UINT64_C(0xd279f2a056ca8b36)));
  EXPECT_EQ(-A, IMP(UINT64_C(0x43b9c4f706c5072b)));
  EXPECT_EQ(~A, IMP(UINT64_C(0x43b9c4f706c5072a)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x0000000000000006)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x038b6a8e293fa5fd), UINT64_C(0x0644c47c052d20a1)));
  EXPECT_EQ(A >> 94, IMP(UINT64_C(0x00000003ffffffff)));
  EXPECT_EQ(A << 94, IMP(UINT64_C(0x3e4ebe3540000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x2a136e3da3cab9aa), UINT64_C(0xda9bcecb21e7f233)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0xd5ec91c25c354654), UINT64_C(0x9df0a746d08dff77)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0xd5ec91c25c354654), UINT64_C(0xa213a8cad196018b)));
  EXPECT_EQ((T = A, T |= B), IMP(-INT64_C(4731106403081586209)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x2a136e3da3cab9ab), UINT64_C(0x1c4413002828f854)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0xeb1987f8acd3e75e), UINT64_C(0xd279f2a056ca8b36)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x0000000000000006)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x038b6a8e293fa5fd), UINT64_C(0x0644c47c052d20a1)));
  EXPECT_EQ((T = A, T >>= 94), IMP(UINT64_C(0x00000003ffffffff)));
  EXPECT_EQ((T = A, T <<= 94), IMP(UINT64_C(0x3e4ebe3540000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 94), IMP(UINT64_C(0xfffffffef118ec23), UINT64_C(0xe4ebe357ffffffff)));
  EXPECT_EQ(rol(A, 94), IMP(UINT64_C(0x3e4ebe357fffffff), UINT64_C(0xffffffffef118ec2)));
  EXPECT_EQ((T = A, T++), IMP(-INT64_C(4880148236482185003)));
  EXPECT_EQ(T, IMP(-INT64_C(4880148236482185002)));
  EXPECT_EQ((T = A, T--), IMP(-INT64_C(4880148236482185003)));
  EXPECT_EQ(T, IMP(-INT64_C(4880148236482185004)));
  EXPECT_EQ((T = A, ++T), IMP(-INT64_C(4880148236482185002)));
  EXPECT_EQ(T, IMP(-INT64_C(4880148236482185002)));
  EXPECT_EQ((T = A, --T), IMP(-INT64_C(4880148236482185004)));
  EXPECT_EQ(T, IMP(-INT64_C(4880148236482185004)));
}

TEST(i128, autogen_basic_111) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(INT64_C(-4880148236482185003));
  const IMP B = IMP(UINT64_C(0x2a136e3da3cab9ab), UINT64_C(0x1e5593c228acf95e));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x2a136e3da3cab9aa), UINT64_C(0xda9bcecb21e7f233)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0xd5ec91c25c354654), UINT64_C(0x9df0a746d08dff77)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0xd5ec91c25c354654), UINT64_C(0xa213a8cad196018b)));
  EXPECT_EQ(A | B, IMP(INT64_C(-4731106403081586209)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x2a136e3da3cab9ab), UINT64_C(0x1c4413002828f854)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0xeb1987f8acd3e75e), UINT64_C(0xd279f2a056ca8b36)));
  EXPECT_EQ(-A, IMP(INT64_C(4880148236482185003)));
  EXPECT_EQ(~A, IMP(INT64_C(4880148236482185002)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(INT64_C(0)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(INT64_C(-4880148236482185003)));
  EXPECT_EQ(A >> 94, IMP(INT64_C(-1)));
  EXPECT_EQ(A << 94, IMP(UINT64_C(0x3e4ebe3540000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x2a136e3da3cab9aa), UINT64_C(0xda9bcecb21e7f233)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0xd5ec91c25c354654), UINT64_C(0x9df0a746d08dff77)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0xd5ec91c25c354654), UINT64_C(0xa213a8cad196018b)));
  EXPECT_EQ((T = A, T |= B), IMP(INT64_C(-4731106403081586209)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x2a136e3da3cab9ab), UINT64_C(0x1c4413002828f854)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0xeb1987f8acd3e75e), UINT64_C(0xd279f2a056ca8b36)));
  EXPECT_EQ((T = A, T /= B), IMP(INT64_C(0)));
  EXPECT_EQ((T = A, T %= B), IMP(INT64_C(-4880148236482185003)));
  EXPECT_EQ((T = A, T >>= 94), IMP(INT64_C(-1)));
  EXPECT_EQ((T = A, T <<= 94), IMP(UINT64_C(0x3e4ebe3540000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 94), IMP(UINT64_C(0xfffffffef118ec23), UINT64_C(0xe4ebe357ffffffff)));
  EXPECT_EQ(rol(A, 94), IMP(UINT64_C(0x3e4ebe357fffffff), UINT64_C(0xffffffffef118ec2)));
  EXPECT_EQ((T = A, T++), IMP(INT64_C(-4880148236482185003)));
  EXPECT_EQ(T, IMP(INT64_C(-4880148236482185002)));
  EXPECT_EQ((T = A, T--), IMP(INT64_C(-4880148236482185003)));
  EXPECT_EQ(T, IMP(INT64_C(-4880148236482185004)));
  EXPECT_EQ((T = A, ++T), IMP(INT64_C(-4880148236482185002)));
  EXPECT_EQ(T, IMP(INT64_C(-4880148236482185002)));
  EXPECT_EQ((T = A, --T), IMP(INT64_C(-4880148236482185004)));
  EXPECT_EQ(T, IMP(INT64_C(-4880148236482185004)));
}

TEST(u128, autogen_basic_112) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(UINT64_C(0x88f11b5d0989d80f), UINT64_C(0xe2de32973b8cecf2));
  const IMP B = IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x01cba25a182fe9c0));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x88f11b5d0989d80e), UINT64_C(0xe4a9d4f153bcd6b2)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x88f11b5d0989d810), UINT64_C(0xe112903d235d0332)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x770ee4a2f67627f0), UINT64_C(0xe31590cd23a30532)));
  EXPECT_EQ(A | B, IMP(-INT64_C(2026704635444597262)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x88f11b5d0989d80f), UINT64_C(0x00ca2212180ce8c0)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0xfc8374f99cf45284), UINT64_C(0xcd6d2cca1dc7f780)));
  EXPECT_EQ(-A, IMP(UINT64_C(0x770ee4a2f67627f0), UINT64_C(0x1d21cd68c473130e)));
  EXPECT_EQ(~A, IMP(UINT64_C(0x770ee4a2f67627f0), UINT64_C(0x1d21cd68c473130d)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x88f11b5d0989d80f), UINT64_C(0xe2de32973b8cecf2)));
  EXPECT_EQ(A >> 64, IMP(UINT64_C(0x88f11b5d0989d80f)));
  EXPECT_EQ(A << 64, IMP(UINT64_C(0xe2de32973b8cecf2), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x88f11b5d0989d80e), UINT64_C(0xe4a9d4f153bcd6b2)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x88f11b5d0989d810), UINT64_C(0xe112903d235d0332)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x770ee4a2f67627f0), UINT64_C(0xe31590cd23a30532)));
  EXPECT_EQ((T = A, T |= B), IMP(-INT64_C(2026704635444597262)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x88f11b5d0989d80f), UINT64_C(0x00ca2212180ce8c0)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0xfc8374f99cf45284), UINT64_C(0xcd6d2cca1dc7f780)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x88f11b5d0989d80f), UINT64_C(0xe2de32973b8cecf2)));
  EXPECT_EQ((T = A, T >>= 64), IMP(UINT64_C(0x88f11b5d0989d80f)));
  EXPECT_EQ((T = A, T <<= 64), IMP(UINT64_C(0xe2de32973b8cecf2), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 64), IMP(UINT64_C(0xe2de32973b8cecf2), UINT64_C(0x88f11b5d0989d80f)));
  EXPECT_EQ(rol(A, 64), IMP(UINT64_C(0xe2de32973b8cecf2), UINT64_C(0x88f11b5d0989d80f)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0x88f11b5d0989d80f), UINT64_C(0xe2de32973b8cecf2)));
  EXPECT_EQ(T, IMP(UINT64_C(0x88f11b5d0989d80f), UINT64_C(0xe2de32973b8cecf3)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0x88f11b5d0989d80f), UINT64_C(0xe2de32973b8cecf2)));
  EXPECT_EQ(T, IMP(UINT64_C(0x88f11b5d0989d80f), UINT64_C(0xe2de32973b8cecf1)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0x88f11b5d0989d80f), UINT64_C(0xe2de32973b8cecf3)));
  EXPECT_EQ(T, IMP(UINT64_C(0x88f11b5d0989d80f), UINT64_C(0xe2de32973b8cecf3)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0x88f11b5d0989d80f), UINT64_C(0xe2de32973b8cecf1)));
  EXPECT_EQ(T, IMP(UINT64_C(0x88f11b5d0989d80f), UINT64_C(0xe2de32973b8cecf1)));
}

TEST(i128, autogen_basic_113) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(UINT64_C(0x88f11b5d0989d80f), UINT64_C(0xe2de32973b8cecf2));
  const IMP B = IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x01cba25a182fe9c0));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x88f11b5d0989d80e), UINT64_C(0xe4a9d4f153bcd6b2)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x88f11b5d0989d810), UINT64_C(0xe112903d235d0332)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x770ee4a2f67627f0), UINT64_C(0xe31590cd23a30532)));
  EXPECT_EQ(A | B, IMP(INT64_C(-2026704635444597262)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x88f11b5d0989d80f), UINT64_C(0x00ca2212180ce8c0)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0xfc8374f99cf45284), UINT64_C(0xcd6d2cca1dc7f780)));
  EXPECT_EQ(-A, IMP(UINT64_C(0x770ee4a2f67627f0), UINT64_C(0x1d21cd68c473130e)));
  EXPECT_EQ(~A, IMP(UINT64_C(0x770ee4a2f67627f0), UINT64_C(0x1d21cd68c473130d)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(INT64_C(8639639504417268901)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(INT64_C(-4619317024864320462)));
  EXPECT_EQ(A >> 64, IMP(INT64_C(-8579045728758147057)));
  EXPECT_EQ(A << 64, IMP(UINT64_C(0xe2de32973b8cecf2), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x88f11b5d0989d80e), UINT64_C(0xe4a9d4f153bcd6b2)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x88f11b5d0989d810), UINT64_C(0xe112903d235d0332)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x770ee4a2f67627f0), UINT64_C(0xe31590cd23a30532)));
  EXPECT_EQ((T = A, T |= B), IMP(INT64_C(-2026704635444597262)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x88f11b5d0989d80f), UINT64_C(0x00ca2212180ce8c0)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0xfc8374f99cf45284), UINT64_C(0xcd6d2cca1dc7f780)));
  EXPECT_EQ((T = A, T /= B), IMP(INT64_C(8639639504417268901)));
  EXPECT_EQ((T = A, T %= B), IMP(INT64_C(-4619317024864320462)));
  EXPECT_EQ((T = A, T >>= 64), IMP(INT64_C(-8579045728758147057)));
  EXPECT_EQ((T = A, T <<= 64), IMP(UINT64_C(0xe2de32973b8cecf2), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 64), IMP(UINT64_C(0xe2de32973b8cecf2), UINT64_C(0x88f11b5d0989d80f)));
  EXPECT_EQ(rol(A, 64), IMP(UINT64_C(0xe2de32973b8cecf2), UINT64_C(0x88f11b5d0989d80f)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0x88f11b5d0989d80f), UINT64_C(0xe2de32973b8cecf2)));
  EXPECT_EQ(T, IMP(UINT64_C(0x88f11b5d0989d80f), UINT64_C(0xe2de32973b8cecf3)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0x88f11b5d0989d80f), UINT64_C(0xe2de32973b8cecf2)));
  EXPECT_EQ(T, IMP(UINT64_C(0x88f11b5d0989d80f), UINT64_C(0xe2de32973b8cecf1)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0x88f11b5d0989d80f), UINT64_C(0xe2de32973b8cecf3)));
  EXPECT_EQ(T, IMP(UINT64_C(0x88f11b5d0989d80f), UINT64_C(0xe2de32973b8cecf3)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0x88f11b5d0989d80f), UINT64_C(0xe2de32973b8cecf1)));
  EXPECT_EQ(T, IMP(UINT64_C(0x88f11b5d0989d80f), UINT64_C(0xe2de32973b8cecf1)));
}

TEST(u128, autogen_basic_114) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x31d69ebe414b9f74));
  const IMP B = IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x7a0f3487199335d9));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0xfffffffffffffffe), UINT64_C(0xabe5d3455aded54d)));
  EXPECT_EQ(A - B, IMP(-INT64_C(5204074059281176165)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x4bd9aa3958d8aaad)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x7bdfbebf59dbbffd)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x3006148601031550)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x6bdd6a2e82cc01ef), UINT64_C(0xd47a79f4e4b92d54)));
  EXPECT_EQ(-A, IMP(UINT64_C(0xce296141beb4608c)));
  EXPECT_EQ(~A, IMP(UINT64_C(0xce296141beb4608b)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x31d69ebe414b9f74)));
  EXPECT_EQ(A >> 89, IMP(UINT64_C(0x0000007fffffffff)));
  EXPECT_EQ(A << 89, IMP(UINT64_C(0x7c82973ee8000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0xfffffffffffffffe), UINT64_C(0xabe5d3455aded54d)));
  EXPECT_EQ((T = A, T -= B), IMP(-INT64_C(5204074059281176165)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x4bd9aa3958d8aaad)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x7bdfbebf59dbbffd)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x3006148601031550)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x6bdd6a2e82cc01ef), UINT64_C(0xd47a79f4e4b92d54)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x31d69ebe414b9f74)));
  EXPECT_EQ((T = A, T >>= 89), IMP(UINT64_C(0x0000007fffffffff)));
  EXPECT_EQ((T = A, T <<= 89), IMP(UINT64_C(0x7c82973ee8000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 89), IMP(UINT64_C(0xffffff98eb4f5f20), UINT64_C(0xa5cfba7fffffffff)));
  EXPECT_EQ(rol(A, 89), IMP(UINT64_C(0x7c82973ee9ffffff), UINT64_C(0xfffffffffe63ad3d)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x31d69ebe414b9f74)));
  EXPECT_EQ(T, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x31d69ebe414b9f75)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x31d69ebe414b9f74)));
  EXPECT_EQ(T, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x31d69ebe414b9f73)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x31d69ebe414b9f75)));
  EXPECT_EQ(T, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x31d69ebe414b9f75)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x31d69ebe414b9f73)));
  EXPECT_EQ(T, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x31d69ebe414b9f73)));
}

TEST(i128, autogen_basic_115) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x31d69ebe414b9f74));
  const IMP B = IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x7a0f3487199335d9));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0xfffffffffffffffe), UINT64_C(0xabe5d3455aded54d)));
  EXPECT_EQ(A - B, IMP(INT64_C(-5204074059281176165)));
  EXPECT_EQ(A ^ B, IMP(INT64_C(5465586786071259821)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x7bdfbebf59dbbffd)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x3006148601031550)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x6bdd6a2e82cc01ef), UINT64_C(0xd47a79f4e4b92d54)));
  EXPECT_EQ(-A, IMP(UINT64_C(0x0000000000000000), UINT64_C(0xce296141beb4608c)));
  EXPECT_EQ(~A, IMP(UINT64_C(0x0000000000000000), UINT64_C(0xce296141beb4608b)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(INT64_C(1)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(INT64_C(-5204074059281176165)));
  EXPECT_EQ(A >> 89, IMP(INT64_C(-1)));
  EXPECT_EQ(A << 89, IMP(UINT64_C(0x7c82973ee8000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0xfffffffffffffffe), UINT64_C(0xabe5d3455aded54d)));
  EXPECT_EQ((T = A, T -= B), IMP(INT64_C(-5204074059281176165)));
  EXPECT_EQ((T = A, T ^= B), IMP(INT64_C(5465586786071259821)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x7bdfbebf59dbbffd)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x3006148601031550)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x6bdd6a2e82cc01ef), UINT64_C(0xd47a79f4e4b92d54)));
  EXPECT_EQ((T = A, T /= B), IMP(INT64_C(1)));
  EXPECT_EQ((T = A, T %= B), IMP(INT64_C(-5204074059281176165)));
  EXPECT_EQ((T = A, T >>= 89), IMP(INT64_C(-1)));
  EXPECT_EQ((T = A, T <<= 89), IMP(UINT64_C(0x7c82973ee8000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 89), IMP(UINT64_C(0xffffff98eb4f5f20), UINT64_C(0xa5cfba7fffffffff)));
  EXPECT_EQ(rol(A, 89), IMP(UINT64_C(0x7c82973ee9ffffff), UINT64_C(0xfffffffffe63ad3d)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x31d69ebe414b9f74)));
  EXPECT_EQ(T, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x31d69ebe414b9f75)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x31d69ebe414b9f74)));
  EXPECT_EQ(T, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x31d69ebe414b9f73)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x31d69ebe414b9f75)));
  EXPECT_EQ(T, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x31d69ebe414b9f75)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x31d69ebe414b9f73)));
  EXPECT_EQ(T, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x31d69ebe414b9f73)));
}

TEST(u128, autogen_basic_116) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x6ec187a0931bf1c6));
  const IMP B = IMP(UINT64_C(0x1197d113345114b3));
  IMP T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, IMP(-INT64_C(9198223234759326087)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x5d29b68d5ecadd13)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x7f5656b3a74ae575)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x7fd7d7b3b75bf5f7)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x0081810010111082)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0xf604b789c3e41898), UINT64_C(0x94da316ac3138572)));
  EXPECT_EQ(-A, IMP(UINT64_C(0x913e785f6ce40e3a)));
  EXPECT_EQ(~A, IMP(UINT64_C(0x913e785f6ce40e39)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x000000000000000e), UINT64_C(0x8d1c5a1338748b9d)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x081bf8e3ee090eff)));
  EXPECT_EQ(A >> 51, IMP(UINT64_C(0x0000000000001fff), UINT64_C(0xffffffffffffedd8)));
  EXPECT_EQ(A << 51, IMP(UINT64_C(0xfffb760c3d0498df), UINT64_C(0x8e30000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(-INT64_C(9198223234759326087)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x5d29b68d5ecadd13)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x7f5656b3a74ae575)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x7fd7d7b3b75bf5f7)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x0081810010111082)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0xf604b789c3e41898), UINT64_C(0x94da316ac3138572)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x000000000000000e), UINT64_C(0x8d1c5a1338748b9d)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x081bf8e3ee090eff)));
  EXPECT_EQ((T = A, T >>= 51), IMP(UINT64_C(0x0000000000001fff), UINT64_C(0xffffffffffffedd8)));
  EXPECT_EQ((T = A, T <<= 51), IMP(UINT64_C(0xfffb760c3d0498df), UINT64_C(0x8e30000000000000)));
  EXPECT_EQ(ror(A, 51), IMP(UINT64_C(0x30f412637e38dfff), UINT64_C(0xffffffffffffedd8)));
  EXPECT_EQ(rol(A, 51), IMP(UINT64_C(0xfffb760c3d0498df), UINT64_C(0x8e37ffffffffffff)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x6ec187a0931bf1c6)));
  EXPECT_EQ(T, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x6ec187a0931bf1c7)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x6ec187a0931bf1c6)));
  EXPECT_EQ(T, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x6ec187a0931bf1c5)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x6ec187a0931bf1c7)));
  EXPECT_EQ(T, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x6ec187a0931bf1c7)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x6ec187a0931bf1c5)));
  EXPECT_EQ(T, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x6ec187a0931bf1c5)));
}

TEST(i128, autogen_basic_117) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x6ec187a0931bf1c6));
  const IMP B = IMP(INT64_C(1267711700540396723));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(INT64_C(-9198223234759326087)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x5d29b68d5ecadd13)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x7f5656b3a74ae575)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x7fd7d7b3b75bf5f7)));
  EXPECT_EQ(A & B, IMP(INT64_C(36452109265211522)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0xf604b789c3e41898), UINT64_C(0x94da316ac3138572)));
  EXPECT_EQ(-A, IMP(UINT64_C(0x0000000000000000), UINT64_C(0x913e785f6ce40e3a)));
  EXPECT_EQ(~A, IMP(UINT64_C(0x0000000000000000), UINT64_C(0x913e785f6ce40e39)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(INT64_C(-8)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(INT64_C(-324241330976549026)));
  EXPECT_EQ(A >> 51, IMP(INT64_C(-4648)));
  EXPECT_EQ(A << 51, IMP(UINT64_C(0xfffb760c3d0498df), UINT64_C(0x8e30000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(INT64_C(-9198223234759326087)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x5d29b68d5ecadd13)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x7f5656b3a74ae575)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x7fd7d7b3b75bf5f7)));
  EXPECT_EQ((T = A, T &= B), IMP(INT64_C(36452109265211522)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0xf604b789c3e41898), UINT64_C(0x94da316ac3138572)));
  EXPECT_EQ((T = A, T /= B), IMP(INT64_C(-8)));
  EXPECT_EQ((T = A, T %= B), IMP(INT64_C(-324241330976549026)));
  EXPECT_EQ((T = A, T >>= 51), IMP(INT64_C(-4648)));
  EXPECT_EQ((T = A, T <<= 51), IMP(UINT64_C(0xfffb760c3d0498df), UINT64_C(0x8e30000000000000)));
  EXPECT_EQ(ror(A, 51), IMP(UINT64_C(0x30f412637e38dfff), UINT64_C(0xffffffffffffedd8)));
  EXPECT_EQ(rol(A, 51), IMP(UINT64_C(0xfffb760c3d0498df), UINT64_C(0x8e37ffffffffffff)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x6ec187a0931bf1c6)));
  EXPECT_EQ(T, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x6ec187a0931bf1c7)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x6ec187a0931bf1c6)));
  EXPECT_EQ(T, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x6ec187a0931bf1c5)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x6ec187a0931bf1c7)));
  EXPECT_EQ(T, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x6ec187a0931bf1c7)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x6ec187a0931bf1c5)));
  EXPECT_EQ(T, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x6ec187a0931bf1c5)));
}

TEST(u128, autogen_basic_118) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(UINT64_C(0xebd0ba7b1f264868));
  const IMP B = IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x38751e8c30803b1d));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x2445d9074fa68385)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x0000000000000001), UINT64_C(0xb35b9beeeea60d4b)));
  EXPECT_EQ(A ^ B, IMP(-INT64_C(3195966978986183819)));
  EXPECT_EQ(A | B, IMP(-INT64_C(291116597401715843)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x28501a0810000808)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x4830d0d8a29cfeb1), UINT64_C(0x81fa09b80e062bc8)));
  EXPECT_EQ(-A, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x142f4584e0d9b798)));
  EXPECT_EQ(~A, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x142f4584e0d9b797)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0xebd0ba7b1f264868)));
  EXPECT_EQ(A >> 29, IMP(UINT64_C(0x000000075e85d3d8)));
  EXPECT_EQ(A << 29, IMP(UINT64_C(0x000000001d7a174f), UINT64_C(0x63e4c90d00000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x2445d9074fa68385)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x0000000000000001), UINT64_C(0xb35b9beeeea60d4b)));
  EXPECT_EQ((T = A, T ^= B), IMP(-INT64_C(3195966978986183819)));
  EXPECT_EQ((T = A, T |= B), IMP(-INT64_C(291116597401715843)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x28501a0810000808)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x4830d0d8a29cfeb1), UINT64_C(0x81fa09b80e062bc8)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0xebd0ba7b1f264868)));
  EXPECT_EQ((T = A, T >>= 29), IMP(UINT64_C(0x000000075e85d3d8)));
  EXPECT_EQ((T = A, T <<= 29), IMP(UINT64_C(0x000000001d7a174f), UINT64_C(0x63e4c90d00000000)));
  EXPECT_EQ(ror(A, 29), IMP(UINT64_C(0xf932434000000000), UINT64_C(0x000000075e85d3d8)));
  EXPECT_EQ(rol(A, 29), IMP(UINT64_C(0x000000001d7a174f), UINT64_C(0x63e4c90d00000000)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0xebd0ba7b1f264868)));
  EXPECT_EQ(T, IMP(UINT64_C(0xebd0ba7b1f264869)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0xebd0ba7b1f264868)));
  EXPECT_EQ(T, IMP(UINT64_C(0xebd0ba7b1f264867)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0xebd0ba7b1f264869)));
  EXPECT_EQ(T, IMP(UINT64_C(0xebd0ba7b1f264869)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0xebd0ba7b1f264867)));
  EXPECT_EQ(T, IMP(UINT64_C(0xebd0ba7b1f264867)));
}

TEST(i128, autogen_basic_119) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(UINT64_C(0x0000000000000000), UINT64_C(0xebd0ba7b1f264868));
  const IMP B = IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x38751e8c30803b1d));
  IMP T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, IMP(INT64_C(2613733784182752133)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x0000000000000001), UINT64_C(0xb35b9beeeea60d4b)));
  EXPECT_EQ(A ^ B, IMP(INT64_C(-3195966978986183819)));
  EXPECT_EQ(A | B, IMP(INT64_C(-291116597401715843)));
  EXPECT_EQ(A & B, IMP(INT64_C(2904850381584467976)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x4830d0d8a29cfeb1), UINT64_C(0x81fa09b80e062bc8)));
  EXPECT_EQ(-A, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x142f4584e0d9b798)));
  EXPECT_EQ(~A, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x142f4584e0d9b797)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(INT64_C(-1)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(INT64_C(2613733784182752133)));
  EXPECT_EQ(A >> 29, IMP(INT64_C(31650599896)));
  EXPECT_EQ(A << 29, IMP(UINT64_C(0x000000001d7a174f), UINT64_C(0x63e4c90d00000000)));
  EXPECT_EQ((T = A, T += B), IMP(INT64_C(2613733784182752133)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x0000000000000001), UINT64_C(0xb35b9beeeea60d4b)));
  EXPECT_EQ((T = A, T ^= B), IMP(INT64_C(-3195966978986183819)));
  EXPECT_EQ((T = A, T |= B), IMP(INT64_C(-291116597401715843)));
  EXPECT_EQ((T = A, T &= B), IMP(INT64_C(2904850381584467976)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x4830d0d8a29cfeb1), UINT64_C(0x81fa09b80e062bc8)));
  EXPECT_EQ((T = A, T /= B), IMP(INT64_C(-1)));
  EXPECT_EQ((T = A, T %= B), IMP(INT64_C(2613733784182752133)));
  EXPECT_EQ((T = A, T >>= 29), IMP(INT64_C(31650599896)));
  EXPECT_EQ((T = A, T <<= 29), IMP(UINT64_C(0x000000001d7a174f), UINT64_C(0x63e4c90d00000000)));
  EXPECT_EQ(ror(A, 29), IMP(UINT64_C(0xf932434000000000), UINT64_C(0x000000075e85d3d8)));
  EXPECT_EQ(rol(A, 29), IMP(UINT64_C(0x000000001d7a174f), UINT64_C(0x63e4c90d00000000)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0x0000000000000000), UINT64_C(0xebd0ba7b1f264868)));
  EXPECT_EQ(T, IMP(UINT64_C(0x0000000000000000), UINT64_C(0xebd0ba7b1f264869)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0x0000000000000000), UINT64_C(0xebd0ba7b1f264868)));
  EXPECT_EQ(T, IMP(UINT64_C(0x0000000000000000), UINT64_C(0xebd0ba7b1f264867)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0x0000000000000000), UINT64_C(0xebd0ba7b1f264869)));
  EXPECT_EQ(T, IMP(UINT64_C(0x0000000000000000), UINT64_C(0xebd0ba7b1f264869)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0x0000000000000000), UINT64_C(0xebd0ba7b1f264867)));
  EXPECT_EQ(T, IMP(UINT64_C(0x0000000000000000), UINT64_C(0xebd0ba7b1f264867)));
}

TEST(u128, autogen_basic_120) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(UINT64_C(0xfebcfaa897989bda));
  const IMP B = IMP(UINT64_C(0xcac7b0a67395d397));
  IMP T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x0000000000000001), UINT64_C(0xc984ab4f0b2e6f71)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x33f54a022402c843)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x347b4a0ee40d484d)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0xfefffaaef79ddbdf)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0xca84b0a013909392)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0xc9c7d2776e8eaf4a), UINT64_C(0x06db8795d75a9b96)));
  EXPECT_EQ(-A, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x0143055768676426)));
  EXPECT_EQ(~A, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x0143055768676425)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x0000000000000001)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x33f54a022402c843)));
  EXPECT_EQ(A >> 23, IMP(UINT64_C(0x000001fd79f5512f)));
  EXPECT_EQ(A << 23, IMP(UINT64_C(0x00000000007f5e7d), UINT64_C(0x544bcc4ded000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x0000000000000001), UINT64_C(0xc984ab4f0b2e6f71)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x33f54a022402c843)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x347b4a0ee40d484d)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0xfefffaaef79ddbdf)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0xca84b0a013909392)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0xc9c7d2776e8eaf4a), UINT64_C(0x06db8795d75a9b96)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x33f54a022402c843)));
  EXPECT_EQ((T = A, T >>= 23), IMP(UINT64_C(0x000001fd79f5512f)));
  EXPECT_EQ((T = A, T <<= 23), IMP(UINT64_C(0x00000000007f5e7d), UINT64_C(0x544bcc4ded000000)));
  EXPECT_EQ(ror(A, 23), IMP(UINT64_C(0x3137b40000000000), UINT64_C(0x000001fd79f5512f)));
  EXPECT_EQ(rol(A, 23), IMP(UINT64_C(0x00000000007f5e7d), UINT64_C(0x544bcc4ded000000)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0xfebcfaa897989bda)));
  EXPECT_EQ(T, IMP(UINT64_C(0xfebcfaa897989bdb)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0xfebcfaa897989bda)));
  EXPECT_EQ(T, IMP(UINT64_C(0xfebcfaa897989bd9)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0xfebcfaa897989bdb)));
  EXPECT_EQ(T, IMP(UINT64_C(0xfebcfaa897989bdb)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0xfebcfaa897989bd9)));
  EXPECT_EQ(T, IMP(UINT64_C(0xfebcfaa897989bd9)));
}

TEST(i128, autogen_basic_121) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(UINT64_C(0x0000000000000000), UINT64_C(0xfebcfaa897989bda));
  const IMP B = IMP(UINT64_C(0x0000000000000000), UINT64_C(0xcac7b0a67395d397));
  IMP T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x0000000000000001), UINT64_C(0xc984ab4f0b2e6f71)));
  EXPECT_EQ(A - B, IMP(INT64_C(3743980038282987587)));
  EXPECT_EQ(A ^ B, IMP(INT64_C(3781697739923736653)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0x0000000000000000), UINT64_C(0xfefffaaef79ddbdf)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x0000000000000000), UINT64_C(0xca84b0a013909392)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0xc9c7d2776e8eaf4a), UINT64_C(0x06db8795d75a9b96)));
  EXPECT_EQ(-A, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x0143055768676426)));
  EXPECT_EQ(~A, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x0143055768676425)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(INT64_C(1)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(INT64_C(3743980038282987587)));
  EXPECT_EQ(A >> 23, IMP(INT64_C(2188184473903)));
  EXPECT_EQ(A << 23, IMP(UINT64_C(0x00000000007f5e7d), UINT64_C(0x544bcc4ded000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x0000000000000001), UINT64_C(0xc984ab4f0b2e6f71)));
  EXPECT_EQ((T = A, T -= B), IMP(INT64_C(3743980038282987587)));
  EXPECT_EQ((T = A, T ^= B), IMP(INT64_C(3781697739923736653)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0x0000000000000000), UINT64_C(0xfefffaaef79ddbdf)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x0000000000000000), UINT64_C(0xca84b0a013909392)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0xc9c7d2776e8eaf4a), UINT64_C(0x06db8795d75a9b96)));
  EXPECT_EQ((T = A, T /= B), IMP(INT64_C(1)));
  EXPECT_EQ((T = A, T %= B), IMP(INT64_C(3743980038282987587)));
  EXPECT_EQ((T = A, T >>= 23), IMP(INT64_C(2188184473903)));
  EXPECT_EQ((T = A, T <<= 23), IMP(UINT64_C(0x00000000007f5e7d), UINT64_C(0x544bcc4ded000000)));
  EXPECT_EQ(ror(A, 23), IMP(UINT64_C(0x3137b40000000000), UINT64_C(0x000001fd79f5512f)));
  EXPECT_EQ(rol(A, 23), IMP(UINT64_C(0x00000000007f5e7d), UINT64_C(0x544bcc4ded000000)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0x0000000000000000), UINT64_C(0xfebcfaa897989bda)));
  EXPECT_EQ(T, IMP(UINT64_C(0x0000000000000000), UINT64_C(0xfebcfaa897989bdb)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0x0000000000000000), UINT64_C(0xfebcfaa897989bda)));
  EXPECT_EQ(T, IMP(UINT64_C(0x0000000000000000), UINT64_C(0xfebcfaa897989bd9)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0x0000000000000000), UINT64_C(0xfebcfaa897989bdb)));
  EXPECT_EQ(T, IMP(UINT64_C(0x0000000000000000), UINT64_C(0xfebcfaa897989bdb)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0x0000000000000000), UINT64_C(0xfebcfaa897989bd9)));
  EXPECT_EQ(T, IMP(UINT64_C(0x0000000000000000), UINT64_C(0xfebcfaa897989bd9)));
}

TEST(u128, autogen_basic_122) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(UINT64_C(0x473356c488b8989c), UINT64_C(0xcc552009b65bb8bb));
  const IMP B = IMP(UINT64_C(0xe711e5bfc06e0ca1));
  IMP T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x473356c488b8989d), UINT64_C(0xb36705c976c9c55c)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x473356c488b8989b), UINT64_C(0xe5433a49f5edac1a)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x473356c488b8989c), UINT64_C(0x2b44c5b67635b41a)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0x473356c488b8989c), UINT64_C(0xef55e5bff67fbcbb)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0xc4112009804a08a1)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x9f607b1e4d3c6ff2), UINT64_C(0xa813db229cb1f19b)));
  EXPECT_EQ(-A, IMP(UINT64_C(0xb8cca93b77476763), UINT64_C(0x33aadff649a44745)));
  EXPECT_EQ(~A, IMP(UINT64_C(0xb8cca93b77476763), UINT64_C(0x33aadff649a44744)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x4ee1e20c9c185a48)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0xcd7a44e59bdf9173)));
  EXPECT_EQ(A >> 33, IMP(UINT64_C(0x000000002399ab62), UINT64_C(0x445c4c4e662a9004)));
  EXPECT_EQ(A << 33, IMP(UINT64_C(0x1171313998aa4013), UINT64_C(0x6cb7717600000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x473356c488b8989d), UINT64_C(0xb36705c976c9c55c)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x473356c488b8989b), UINT64_C(0xe5433a49f5edac1a)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x473356c488b8989c), UINT64_C(0x2b44c5b67635b41a)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0x473356c488b8989c), UINT64_C(0xef55e5bff67fbcbb)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0xc4112009804a08a1)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x9f607b1e4d3c6ff2), UINT64_C(0xa813db229cb1f19b)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x4ee1e20c9c185a48)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0xcd7a44e59bdf9173)));
  EXPECT_EQ((T = A, T >>= 33), IMP(UINT64_C(0x000000002399ab62), UINT64_C(0x445c4c4e662a9004)));
  EXPECT_EQ((T = A, T <<= 33), IMP(UINT64_C(0x1171313998aa4013), UINT64_C(0x6cb7717600000000)));
  EXPECT_EQ(ror(A, 33), IMP(UINT64_C(0xdb2ddc5da399ab62), UINT64_C(0x445c4c4e662a9004)));
  EXPECT_EQ(rol(A, 33), IMP(UINT64_C(0x1171313998aa4013), UINT64_C(0x6cb771768e66ad89)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0x473356c488b8989c), UINT64_C(0xcc552009b65bb8bb)));
  EXPECT_EQ(T, IMP(UINT64_C(0x473356c488b8989c), UINT64_C(0xcc552009b65bb8bc)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0x473356c488b8989c), UINT64_C(0xcc552009b65bb8bb)));
  EXPECT_EQ(T, IMP(UINT64_C(0x473356c488b8989c), UINT64_C(0xcc552009b65bb8ba)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0x473356c488b8989c), UINT64_C(0xcc552009b65bb8bc)));
  EXPECT_EQ(T, IMP(UINT64_C(0x473356c488b8989c), UINT64_C(0xcc552009b65bb8bc)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0x473356c488b8989c), UINT64_C(0xcc552009b65bb8ba)));
  EXPECT_EQ(T, IMP(UINT64_C(0x473356c488b8989c), UINT64_C(0xcc552009b65bb8ba)));
}

TEST(i128, autogen_basic_123) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(UINT64_C(0x473356c488b8989c), UINT64_C(0xcc552009b65bb8bb));
  const IMP B = IMP(UINT64_C(0x0000000000000000), UINT64_C(0xe711e5bfc06e0ca1));
  IMP T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x473356c488b8989d), UINT64_C(0xb36705c976c9c55c)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x473356c488b8989b), UINT64_C(0xe5433a49f5edac1a)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x473356c488b8989c), UINT64_C(0x2b44c5b67635b41a)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0x473356c488b8989c), UINT64_C(0xef55e5bff67fbcbb)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x0000000000000000), UINT64_C(0xc4112009804a08a1)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x9f607b1e4d3c6ff2), UINT64_C(0xa813db229cb1f19b)));
  EXPECT_EQ(-A, IMP(UINT64_C(0xb8cca93b77476763), UINT64_C(0x33aadff649a44745)));
  EXPECT_EQ(~A, IMP(UINT64_C(0xb8cca93b77476763), UINT64_C(0x33aadff649a44744)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(INT64_C(5684072748504603208)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x0000000000000000), UINT64_C(0xcd7a44e59bdf9173)));
  EXPECT_EQ(A >> 33, IMP(UINT64_C(0x000000002399ab62), UINT64_C(0x445c4c4e662a9004)));
  EXPECT_EQ(A << 33, IMP(UINT64_C(0x1171313998aa4013), UINT64_C(0x6cb7717600000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x473356c488b8989d), UINT64_C(0xb36705c976c9c55c)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x473356c488b8989b), UINT64_C(0xe5433a49f5edac1a)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x473356c488b8989c), UINT64_C(0x2b44c5b67635b41a)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0x473356c488b8989c), UINT64_C(0xef55e5bff67fbcbb)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x0000000000000000), UINT64_C(0xc4112009804a08a1)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x9f607b1e4d3c6ff2), UINT64_C(0xa813db229cb1f19b)));
  EXPECT_EQ((T = A, T /= B), IMP(INT64_C(5684072748504603208)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x0000000000000000), UINT64_C(0xcd7a44e59bdf9173)));
  EXPECT_EQ((T = A, T >>= 33), IMP(UINT64_C(0x000000002399ab62), UINT64_C(0x445c4c4e662a9004)));
  EXPECT_EQ((T = A, T <<= 33), IMP(UINT64_C(0x1171313998aa4013), UINT64_C(0x6cb7717600000000)));
  EXPECT_EQ(ror(A, 33), IMP(UINT64_C(0xdb2ddc5da399ab62), UINT64_C(0x445c4c4e662a9004)));
  EXPECT_EQ(rol(A, 33), IMP(UINT64_C(0x1171313998aa4013), UINT64_C(0x6cb771768e66ad89)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0x473356c488b8989c), UINT64_C(0xcc552009b65bb8bb)));
  EXPECT_EQ(T, IMP(UINT64_C(0x473356c488b8989c), UINT64_C(0xcc552009b65bb8bc)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0x473356c488b8989c), UINT64_C(0xcc552009b65bb8bb)));
  EXPECT_EQ(T, IMP(UINT64_C(0x473356c488b8989c), UINT64_C(0xcc552009b65bb8ba)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0x473356c488b8989c), UINT64_C(0xcc552009b65bb8bc)));
  EXPECT_EQ(T, IMP(UINT64_C(0x473356c488b8989c), UINT64_C(0xcc552009b65bb8bc)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0x473356c488b8989c), UINT64_C(0xcc552009b65bb8ba)));
  EXPECT_EQ(T, IMP(UINT64_C(0x473356c488b8989c), UINT64_C(0xcc552009b65bb8ba)));
}

TEST(u128, autogen_basic_124) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(UINT64_C(0xde318f00821e8410));
  const IMP B = IMP(UINT64_C(0xf70801c48f02bf2e), UINT64_C(0xea6bce6f6580ee65));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0xf70801c48f02bf2f), UINT64_C(0xc89d5d6fe79f7275)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x08f7fe3b70fd40d1), UINT64_C(0xf3c5c0911c9d95ab)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0xf70801c48f02bf2e), UINT64_C(0x345a416fe79e6a75)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0xf70801c48f02bf2e), UINT64_C(0xfe7bcf6fe79eee75)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0xca218e0000008400)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x67212e07eaf2d161), UINT64_C(0x3c4720780cd0fa50)));
  EXPECT_EQ(-A, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x21ce70ff7de17bf0)));
  EXPECT_EQ(~A, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x21ce70ff7de17bef)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0xde318f00821e8410)));
  EXPECT_EQ(A >> 101, IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A << 101, IMP(UINT64_C(0x43d0820000000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0xf70801c48f02bf2f), UINT64_C(0xc89d5d6fe79f7275)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x08f7fe3b70fd40d1), UINT64_C(0xf3c5c0911c9d95ab)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0xf70801c48f02bf2e), UINT64_C(0x345a416fe79e6a75)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0xf70801c48f02bf2e), UINT64_C(0xfe7bcf6fe79eee75)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0xca218e0000008400)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x67212e07eaf2d161), UINT64_C(0x3c4720780cd0fa50)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0xde318f00821e8410)));
  EXPECT_EQ((T = A, T >>= 101), IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T <<= 101), IMP(UINT64_C(0x43d0820000000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 101), IMP(UINT64_C(0x0000000006f18c78), UINT64_C(0x0410f42080000000)));
  EXPECT_EQ(rol(A, 101), IMP(UINT64_C(0x43d0820000000000), UINT64_C(0x0000001bc631e010)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0xde318f00821e8410)));
  EXPECT_EQ(T, IMP(UINT64_C(0xde318f00821e8411)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0xde318f00821e8410)));
  EXPECT_EQ(T, IMP(UINT64_C(0xde318f00821e840f)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0xde318f00821e8411)));
  EXPECT_EQ(T, IMP(UINT64_C(0xde318f00821e8411)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0xde318f00821e840f)));
  EXPECT_EQ(T, IMP(UINT64_C(0xde318f00821e840f)));
}

TEST(i128, autogen_basic_125) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(UINT64_C(0x0000000000000000), UINT64_C(0xde318f00821e8410));
  const IMP B = IMP(UINT64_C(0xf70801c48f02bf2e), UINT64_C(0xea6bce6f6580ee65));
  IMP T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0xf70801c48f02bf2f), UINT64_C(0xc89d5d6fe79f7275)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x08f7fe3b70fd40d1), UINT64_C(0xf3c5c0911c9d95ab)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0xf70801c48f02bf2e), UINT64_C(0x345a416fe79e6a75)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0xf70801c48f02bf2e), UINT64_C(0xfe7bcf6fe79eee75)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x0000000000000000), UINT64_C(0xca218e0000008400)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x67212e07eaf2d161), UINT64_C(0x3c4720780cd0fa50)));
  EXPECT_EQ(-A, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x21ce70ff7de17bf0)));
  EXPECT_EQ(~A, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x21ce70ff7de17bef)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(INT64_C(0)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x0000000000000000), UINT64_C(0xde318f00821e8410)));
  EXPECT_EQ(A >> 101, IMP(INT64_C(0)));
  EXPECT_EQ(A << 101, IMP(UINT64_C(0x43d0820000000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0xf70801c48f02bf2f), UINT64_C(0xc89d5d6fe79f7275)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x08f7fe3b70fd40d1), UINT64_C(0xf3c5c0911c9d95ab)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0xf70801c48f02bf2e), UINT64_C(0x345a416fe79e6a75)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0xf70801c48f02bf2e), UINT64_C(0xfe7bcf6fe79eee75)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x0000000000000000), UINT64_C(0xca218e0000008400)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x67212e07eaf2d161), UINT64_C(0x3c4720780cd0fa50)));
  EXPECT_EQ((T = A, T /= B), IMP(INT64_C(0)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x0000000000000000), UINT64_C(0xde318f00821e8410)));
  EXPECT_EQ((T = A, T >>= 101), IMP(INT64_C(0)));
  EXPECT_EQ((T = A, T <<= 101), IMP(UINT64_C(0x43d0820000000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 101), IMP(UINT64_C(0x0000000006f18c78), UINT64_C(0x0410f42080000000)));
  EXPECT_EQ(rol(A, 101), IMP(UINT64_C(0x43d0820000000000), UINT64_C(0x0000001bc631e010)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0x0000000000000000), UINT64_C(0xde318f00821e8410)));
  EXPECT_EQ(T, IMP(UINT64_C(0x0000000000000000), UINT64_C(0xde318f00821e8411)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0x0000000000000000), UINT64_C(0xde318f00821e8410)));
  EXPECT_EQ(T, IMP(UINT64_C(0x0000000000000000), UINT64_C(0xde318f00821e840f)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0x0000000000000000), UINT64_C(0xde318f00821e8411)));
  EXPECT_EQ(T, IMP(UINT64_C(0x0000000000000000), UINT64_C(0xde318f00821e8411)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0x0000000000000000), UINT64_C(0xde318f00821e840f)));
  EXPECT_EQ(T, IMP(UINT64_C(0x0000000000000000), UINT64_C(0xde318f00821e840f)));
}

TEST(u128, autogen_basic_126) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(UINT64_C(0x634b7e93b0996469), UINT64_C(0x9c5d0d9cb84b3ec4));
  const IMP B = IMP(UINT64_C(0x58e620ea9798a81f), UINT64_C(0xac3b4d2666af6fc2));
  IMP T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0xbc319f7e48320c89), UINT64_C(0x48985ac31efaae86)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x0a655da91900bc49), UINT64_C(0xf021c076519bcf02)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x3bad5e792701cc76), UINT64_C(0x306640badee45106)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0x7bef7efbb799ec7f), UINT64_C(0xbc7f4dbefeef7fc6)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x4042208290982009), UINT64_C(0x8c190d04200b2ec0)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0xf476336f43cd43ce), UINT64_C(0xbb33803649388c88)));
  EXPECT_EQ(-A, IMP(UINT64_C(0x9cb4816c4f669b96), UINT64_C(0x63a2f26347b4c13c)));
  EXPECT_EQ(~A, IMP(UINT64_C(0x9cb4816c4f669b96), UINT64_C(0x63a2f26347b4c13b)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x0000000000000001)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x0a655da91900bc49), UINT64_C(0xf021c076519bcf02)));
  EXPECT_EQ(A >> 66, IMP(UINT64_C(0x18d2dfa4ec26591a)));
  EXPECT_EQ(A << 66, IMP(UINT64_C(0x71743672e12cfb10), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0xbc319f7e48320c89), UINT64_C(0x48985ac31efaae86)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x0a655da91900bc49), UINT64_C(0xf021c076519bcf02)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x3bad5e792701cc76), UINT64_C(0x306640badee45106)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0x7bef7efbb799ec7f), UINT64_C(0xbc7f4dbefeef7fc6)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x4042208290982009), UINT64_C(0x8c190d04200b2ec0)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0xf476336f43cd43ce), UINT64_C(0xbb33803649388c88)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x0a655da91900bc49), UINT64_C(0xf021c076519bcf02)));
  EXPECT_EQ((T = A, T >>= 66), IMP(UINT64_C(0x18d2dfa4ec26591a)));
  EXPECT_EQ((T = A, T <<= 66), IMP(UINT64_C(0x71743672e12cfb10), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 66), IMP(UINT64_C(0x671743672e12cfb1), UINT64_C(0x18d2dfa4ec26591a)));
  EXPECT_EQ(rol(A, 66), IMP(UINT64_C(0x71743672e12cfb11), UINT64_C(0x8d2dfa4ec26591a6)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0x634b7e93b0996469), UINT64_C(0x9c5d0d9cb84b3ec4)));
  EXPECT_EQ(T, IMP(UINT64_C(0x634b7e93b0996469), UINT64_C(0x9c5d0d9cb84b3ec5)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0x634b7e93b0996469), UINT64_C(0x9c5d0d9cb84b3ec4)));
  EXPECT_EQ(T, IMP(UINT64_C(0x634b7e93b0996469), UINT64_C(0x9c5d0d9cb84b3ec3)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0x634b7e93b0996469), UINT64_C(0x9c5d0d9cb84b3ec5)));
  EXPECT_EQ(T, IMP(UINT64_C(0x634b7e93b0996469), UINT64_C(0x9c5d0d9cb84b3ec5)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0x634b7e93b0996469), UINT64_C(0x9c5d0d9cb84b3ec3)));
  EXPECT_EQ(T, IMP(UINT64_C(0x634b7e93b0996469), UINT64_C(0x9c5d0d9cb84b3ec3)));
}

TEST(i128, autogen_basic_127) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(UINT64_C(0x634b7e93b0996469), UINT64_C(0x9c5d0d9cb84b3ec4));
  const IMP B = IMP(UINT64_C(0x58e620ea9798a81f), UINT64_C(0xac3b4d2666af6fc2));
  IMP T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0xbc319f7e48320c89), UINT64_C(0x48985ac31efaae86)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x0a655da91900bc49), UINT64_C(0xf021c076519bcf02)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x3bad5e792701cc76), UINT64_C(0x306640badee45106)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0x7bef7efbb799ec7f), UINT64_C(0xbc7f4dbefeef7fc6)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x4042208290982009), UINT64_C(0x8c190d04200b2ec0)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0xf476336f43cd43ce), UINT64_C(0xbb33803649388c88)));
  EXPECT_EQ(-A, IMP(UINT64_C(0x9cb4816c4f669b96), UINT64_C(0x63a2f26347b4c13c)));
  EXPECT_EQ(~A, IMP(UINT64_C(0x9cb4816c4f669b96), UINT64_C(0x63a2f26347b4c13b)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(INT64_C(1)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x0a655da91900bc49), UINT64_C(0xf021c076519bcf02)));
  EXPECT_EQ(A >> 66, IMP(INT64_C(1788737901449074970)));
  EXPECT_EQ(A << 66, IMP(UINT64_C(0x71743672e12cfb10), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0xbc319f7e48320c89), UINT64_C(0x48985ac31efaae86)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x0a655da91900bc49), UINT64_C(0xf021c076519bcf02)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x3bad5e792701cc76), UINT64_C(0x306640badee45106)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0x7bef7efbb799ec7f), UINT64_C(0xbc7f4dbefeef7fc6)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x4042208290982009), UINT64_C(0x8c190d04200b2ec0)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0xf476336f43cd43ce), UINT64_C(0xbb33803649388c88)));
  EXPECT_EQ((T = A, T /= B), IMP(INT64_C(1)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x0a655da91900bc49), UINT64_C(0xf021c076519bcf02)));
  EXPECT_EQ((T = A, T >>= 66), IMP(INT64_C(1788737901449074970)));
  EXPECT_EQ((T = A, T <<= 66), IMP(UINT64_C(0x71743672e12cfb10), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 66), IMP(UINT64_C(0x671743672e12cfb1), UINT64_C(0x18d2dfa4ec26591a)));
  EXPECT_EQ(rol(A, 66), IMP(UINT64_C(0x71743672e12cfb11), UINT64_C(0x8d2dfa4ec26591a6)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0x634b7e93b0996469), UINT64_C(0x9c5d0d9cb84b3ec4)));
  EXPECT_EQ(T, IMP(UINT64_C(0x634b7e93b0996469), UINT64_C(0x9c5d0d9cb84b3ec5)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0x634b7e93b0996469), UINT64_C(0x9c5d0d9cb84b3ec4)));
  EXPECT_EQ(T, IMP(UINT64_C(0x634b7e93b0996469), UINT64_C(0x9c5d0d9cb84b3ec3)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0x634b7e93b0996469), UINT64_C(0x9c5d0d9cb84b3ec5)));
  EXPECT_EQ(T, IMP(UINT64_C(0x634b7e93b0996469), UINT64_C(0x9c5d0d9cb84b3ec5)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0x634b7e93b0996469), UINT64_C(0x9c5d0d9cb84b3ec3)));
  EXPECT_EQ(T, IMP(UINT64_C(0x634b7e93b0996469), UINT64_C(0x9c5d0d9cb84b3ec3)));
}

TEST(u128, autogen_basic_128) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(UINT64_C(0x1e801277aa9832ad), UINT64_C(0xcdc85e334ffd3cb8));
  const IMP B = IMP(UINT64_C(0x8620125a68d8c5c3), UINT64_C(0xbbce8f8eee1d0196));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0xa4a024d21370f871), UINT64_C(0x8996edc23e1a3e4e)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x9860001d41bf6cea), UINT64_C(0x11f9cea461e03b22)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x98a0002dc240f76e), UINT64_C(0x7606d1bda1e03d2e)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0x9ea0127fead8f7ef), UINT64_C(0xffcedfbfeffd3dbe)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x0600125228980081), UINT64_C(0x89c80e024e1d0090)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x3161273403bb1258), UINT64_C(0xd3655993cc764bd0)));
  EXPECT_EQ(-A, IMP(UINT64_C(0xe17fed885567cd52), UINT64_C(0x3237a1ccb002c348)));
  EXPECT_EQ(~A, IMP(UINT64_C(0xe17fed885567cd52), UINT64_C(0x3237a1ccb002c347)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x1e801277aa9832ad), UINT64_C(0xcdc85e334ffd3cb8)));
  EXPECT_EQ(A >> 22, IMP(UINT64_C(0x0000007a0049deaa), UINT64_C(0x60cab7372178cd3f)));
  EXPECT_EQ(A << 22, IMP(UINT64_C(0x9deaa60cab737217), UINT64_C(0x8cd3ff4f2e000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0xa4a024d21370f871), UINT64_C(0x8996edc23e1a3e4e)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x9860001d41bf6cea), UINT64_C(0x11f9cea461e03b22)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x98a0002dc240f76e), UINT64_C(0x7606d1bda1e03d2e)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0x9ea0127fead8f7ef), UINT64_C(0xffcedfbfeffd3dbe)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x0600125228980081), UINT64_C(0x89c80e024e1d0090)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x3161273403bb1258), UINT64_C(0xd3655993cc764bd0)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x1e801277aa9832ad), UINT64_C(0xcdc85e334ffd3cb8)));
  EXPECT_EQ((T = A, T >>= 22), IMP(UINT64_C(0x0000007a0049deaa), UINT64_C(0x60cab7372178cd3f)));
  EXPECT_EQ((T = A, T <<= 22), IMP(UINT64_C(0x9deaa60cab737217), UINT64_C(0x8cd3ff4f2e000000)));
  EXPECT_EQ(ror(A, 22), IMP(UINT64_C(0xf4f2e07a0049deaa), UINT64_C(0x60cab7372178cd3f)));
  EXPECT_EQ(rol(A, 22), IMP(UINT64_C(0x9deaa60cab737217), UINT64_C(0x8cd3ff4f2e07a004)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0x1e801277aa9832ad), UINT64_C(0xcdc85e334ffd3cb8)));
  EXPECT_EQ(T, IMP(UINT64_C(0x1e801277aa9832ad), UINT64_C(0xcdc85e334ffd3cb9)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0x1e801277aa9832ad), UINT64_C(0xcdc85e334ffd3cb8)));
  EXPECT_EQ(T, IMP(UINT64_C(0x1e801277aa9832ad), UINT64_C(0xcdc85e334ffd3cb7)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0x1e801277aa9832ad), UINT64_C(0xcdc85e334ffd3cb9)));
  EXPECT_EQ(T, IMP(UINT64_C(0x1e801277aa9832ad), UINT64_C(0xcdc85e334ffd3cb9)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0x1e801277aa9832ad), UINT64_C(0xcdc85e334ffd3cb7)));
  EXPECT_EQ(T, IMP(UINT64_C(0x1e801277aa9832ad), UINT64_C(0xcdc85e334ffd3cb7)));
}

TEST(i128, autogen_basic_129) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(UINT64_C(0x1e801277aa9832ad), UINT64_C(0xcdc85e334ffd3cb8));
  const IMP B = IMP(UINT64_C(0x8620125a68d8c5c3), UINT64_C(0xbbce8f8eee1d0196));
  IMP T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0xa4a024d21370f871), UINT64_C(0x8996edc23e1a3e4e)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x9860001d41bf6cea), UINT64_C(0x11f9cea461e03b22)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x98a0002dc240f76e), UINT64_C(0x7606d1bda1e03d2e)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0x9ea0127fead8f7ef), UINT64_C(0xffcedfbfeffd3dbe)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x0600125228980081), UINT64_C(0x89c80e024e1d0090)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x3161273403bb1258), UINT64_C(0xd3655993cc764bd0)));
  EXPECT_EQ(-A, IMP(UINT64_C(0xe17fed885567cd52), UINT64_C(0x3237a1ccb002c348)));
  EXPECT_EQ(~A, IMP(UINT64_C(0xe17fed885567cd52), UINT64_C(0x3237a1ccb002c347)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(INT64_C(0)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x1e801277aa9832ad), UINT64_C(0xcdc85e334ffd3cb8)));
  EXPECT_EQ(A >> 22, IMP(UINT64_C(0x0000007a0049deaa), UINT64_C(0x60cab7372178cd3f)));
  EXPECT_EQ(A << 22, IMP(UINT64_C(0x9deaa60cab737217), UINT64_C(0x8cd3ff4f2e000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0xa4a024d21370f871), UINT64_C(0x8996edc23e1a3e4e)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x9860001d41bf6cea), UINT64_C(0x11f9cea461e03b22)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x98a0002dc240f76e), UINT64_C(0x7606d1bda1e03d2e)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0x9ea0127fead8f7ef), UINT64_C(0xffcedfbfeffd3dbe)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x0600125228980081), UINT64_C(0x89c80e024e1d0090)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x3161273403bb1258), UINT64_C(0xd3655993cc764bd0)));
  EXPECT_EQ((T = A, T /= B), IMP(INT64_C(0)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x1e801277aa9832ad), UINT64_C(0xcdc85e334ffd3cb8)));
  EXPECT_EQ((T = A, T >>= 22), IMP(UINT64_C(0x0000007a0049deaa), UINT64_C(0x60cab7372178cd3f)));
  EXPECT_EQ((T = A, T <<= 22), IMP(UINT64_C(0x9deaa60cab737217), UINT64_C(0x8cd3ff4f2e000000)));
  EXPECT_EQ(ror(A, 22), IMP(UINT64_C(0xf4f2e07a0049deaa), UINT64_C(0x60cab7372178cd3f)));
  EXPECT_EQ(rol(A, 22), IMP(UINT64_C(0x9deaa60cab737217), UINT64_C(0x8cd3ff4f2e07a004)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0x1e801277aa9832ad), UINT64_C(0xcdc85e334ffd3cb8)));
  EXPECT_EQ(T, IMP(UINT64_C(0x1e801277aa9832ad), UINT64_C(0xcdc85e334ffd3cb9)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0x1e801277aa9832ad), UINT64_C(0xcdc85e334ffd3cb8)));
  EXPECT_EQ(T, IMP(UINT64_C(0x1e801277aa9832ad), UINT64_C(0xcdc85e334ffd3cb7)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0x1e801277aa9832ad), UINT64_C(0xcdc85e334ffd3cb9)));
  EXPECT_EQ(T, IMP(UINT64_C(0x1e801277aa9832ad), UINT64_C(0xcdc85e334ffd3cb9)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0x1e801277aa9832ad), UINT64_C(0xcdc85e334ffd3cb7)));
  EXPECT_EQ(T, IMP(UINT64_C(0x1e801277aa9832ad), UINT64_C(0xcdc85e334ffd3cb7)));
}

TEST(u128, autogen_basic_130) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(UINT64_C(0x90fa0b8d03e25d31), UINT64_C(0x0000000000000000));
  const IMP B = IMP(UINT64_C(0x9a3147f59f2275a7), UINT64_C(0xe19eaff5170708aa));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x2b2b5382a304d2d8), UINT64_C(0xe19eaff5170708aa)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0xf6c8c39764bfe789), UINT64_C(0x1e61500ae8f8f756)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x0acb4c789cc02896), UINT64_C(0xe19eaff5170708aa)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0x9afb4ffd9fe27db7), UINT64_C(0xe19eaff5170708aa)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x9030038503225521), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x1d3234389a926a8a), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(-A, IMP(UINT64_C(0x6f05f472fc1da2cf), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(~A, IMP(UINT64_C(0x6f05f472fc1da2ce), UINT64_C(0xffffffffffffffff)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x90fa0b8d03e25d31), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A >> 42, IMP(UINT64_C(0x0000000000243e82), UINT64_C(0xe340f8974c400000)));
  EXPECT_EQ(A << 42, IMP(UINT64_C(0x8974c40000000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x2b2b5382a304d2d8), UINT64_C(0xe19eaff5170708aa)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0xf6c8c39764bfe789), UINT64_C(0x1e61500ae8f8f756)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x0acb4c789cc02896), UINT64_C(0xe19eaff5170708aa)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0x9afb4ffd9fe27db7), UINT64_C(0xe19eaff5170708aa)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x9030038503225521), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x1d3234389a926a8a), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x90fa0b8d03e25d31), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T >>= 42), IMP(UINT64_C(0x0000000000243e82), UINT64_C(0xe340f8974c400000)));
  EXPECT_EQ((T = A, T <<= 42), IMP(UINT64_C(0x8974c40000000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 42), IMP(UINT64_C(0x0000000000243e82), UINT64_C(0xe340f8974c400000)));
  EXPECT_EQ(rol(A, 42), IMP(UINT64_C(0x8974c40000000000), UINT64_C(0x00000243e82e340f)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0x90fa0b8d03e25d31), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, IMP(UINT64_C(0x90fa0b8d03e25d31), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0x90fa0b8d03e25d31), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, IMP(UINT64_C(0x90fa0b8d03e25d30), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0x90fa0b8d03e25d31), UINT64_C(0x0000000000000001)));
  EXPECT_EQ(T, IMP(UINT64_C(0x90fa0b8d03e25d31), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0x90fa0b8d03e25d30), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ(T, IMP(UINT64_C(0x90fa0b8d03e25d30), UINT64_C(0xffffffffffffffff)));
}

TEST(i128, autogen_basic_131) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(UINT64_C(0x90fa0b8d03e25d31), UINT64_C(0x0000000000000000));
  const IMP B = IMP(UINT64_C(0x9a3147f59f2275a7), UINT64_C(0xe19eaff5170708aa));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x2b2b5382a304d2d8), UINT64_C(0xe19eaff5170708aa)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0xf6c8c39764bfe789), UINT64_C(0x1e61500ae8f8f756)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x0acb4c789cc02896), UINT64_C(0xe19eaff5170708aa)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0x9afb4ffd9fe27db7), UINT64_C(0xe19eaff5170708aa)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x9030038503225521), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x1d3234389a926a8a), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(-A, IMP(UINT64_C(0x6f05f472fc1da2cf), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(~A, IMP(UINT64_C(0x6f05f472fc1da2ce), UINT64_C(0xffffffffffffffff)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(INT64_C(1)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0xf6c8c39764bfe789), UINT64_C(0x1e61500ae8f8f756)));
  EXPECT_EQ(A >> 42, IMP(UINT64_C(0xffffffffffe43e82), UINT64_C(0xe340f8974c400000)));
  EXPECT_EQ(A << 42, IMP(UINT64_C(0x8974c40000000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x2b2b5382a304d2d8), UINT64_C(0xe19eaff5170708aa)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0xf6c8c39764bfe789), UINT64_C(0x1e61500ae8f8f756)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x0acb4c789cc02896), UINT64_C(0xe19eaff5170708aa)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0x9afb4ffd9fe27db7), UINT64_C(0xe19eaff5170708aa)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x9030038503225521), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x1d3234389a926a8a), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T /= B), IMP(INT64_C(1)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0xf6c8c39764bfe789), UINT64_C(0x1e61500ae8f8f756)));
  EXPECT_EQ((T = A, T >>= 42), IMP(UINT64_C(0xffffffffffe43e82), UINT64_C(0xe340f8974c400000)));
  EXPECT_EQ((T = A, T <<= 42), IMP(UINT64_C(0x8974c40000000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 42), IMP(UINT64_C(0x0000000000243e82), UINT64_C(0xe340f8974c400000)));
  EXPECT_EQ(rol(A, 42), IMP(UINT64_C(0x8974c40000000000), UINT64_C(0x00000243e82e340f)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0x90fa0b8d03e25d31), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, IMP(UINT64_C(0x90fa0b8d03e25d31), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0x90fa0b8d03e25d31), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, IMP(UINT64_C(0x90fa0b8d03e25d30), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0x90fa0b8d03e25d31), UINT64_C(0x0000000000000001)));
  EXPECT_EQ(T, IMP(UINT64_C(0x90fa0b8d03e25d31), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0x90fa0b8d03e25d30), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ(T, IMP(UINT64_C(0x90fa0b8d03e25d30), UINT64_C(0xffffffffffffffff)));
}

TEST(u128, autogen_basic_132) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(UINT64_C(0x61f7dbdb461a5bcb), UINT64_C(0x977328180eba58fe));
  const IMP B = IMP(UINT64_C(0xf60d043dbbf231ec), UINT64_C(0x0000000000000000));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x5804e019020c8db7), UINT64_C(0x977328180eba58fe)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x6bead79d8a2829df), UINT64_C(0x977328180eba58fe)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x97fadfe6fde86a27), UINT64_C(0x977328180eba58fe)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0xf7ffdffffffa7bef), UINT64_C(0x977328180eba58fe)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x60050019021211c8), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x2706c8aee8eea828), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(-A, IMP(UINT64_C(0x9e082424b9e5a434), UINT64_C(0x688cd7e7f145a702)));
  EXPECT_EQ(~A, IMP(UINT64_C(0x9e082424b9e5a434), UINT64_C(0x688cd7e7f145a701)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x61f7dbdb461a5bcb), UINT64_C(0x977328180eba58fe)));
  EXPECT_EQ(A >> 0, IMP(UINT64_C(0x61f7dbdb461a5bcb), UINT64_C(0x977328180eba58fe)));
  EXPECT_EQ(A << 0, IMP(UINT64_C(0x61f7dbdb461a5bcb), UINT64_C(0x977328180eba58fe)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x5804e019020c8db7), UINT64_C(0x977328180eba58fe)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x6bead79d8a2829df), UINT64_C(0x977328180eba58fe)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x97fadfe6fde86a27), UINT64_C(0x977328180eba58fe)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0xf7ffdffffffa7bef), UINT64_C(0x977328180eba58fe)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x60050019021211c8), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x2706c8aee8eea828), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x61f7dbdb461a5bcb), UINT64_C(0x977328180eba58fe)));
  EXPECT_EQ((T = A, T >>= 0), IMP(UINT64_C(0x61f7dbdb461a5bcb), UINT64_C(0x977328180eba58fe)));
  EXPECT_EQ((T = A, T <<= 0), IMP(UINT64_C(0x61f7dbdb461a5bcb), UINT64_C(0x977328180eba58fe)));
  EXPECT_EQ(ror(A, 0), IMP(UINT64_C(0x61f7dbdb461a5bcb), UINT64_C(0x977328180eba58fe)));
  EXPECT_EQ(rol(A, 0), IMP(UINT64_C(0x61f7dbdb461a5bcb), UINT64_C(0x977328180eba58fe)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0x61f7dbdb461a5bcb), UINT64_C(0x977328180eba58fe)));
  EXPECT_EQ(T, IMP(UINT64_C(0x61f7dbdb461a5bcb), UINT64_C(0x977328180eba58ff)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0x61f7dbdb461a5bcb), UINT64_C(0x977328180eba58fe)));
  EXPECT_EQ(T, IMP(UINT64_C(0x61f7dbdb461a5bcb), UINT64_C(0x977328180eba58fd)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0x61f7dbdb461a5bcb), UINT64_C(0x977328180eba58ff)));
  EXPECT_EQ(T, IMP(UINT64_C(0x61f7dbdb461a5bcb), UINT64_C(0x977328180eba58ff)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0x61f7dbdb461a5bcb), UINT64_C(0x977328180eba58fd)));
  EXPECT_EQ(T, IMP(UINT64_C(0x61f7dbdb461a5bcb), UINT64_C(0x977328180eba58fd)));
}

TEST(i128, autogen_basic_133) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(UINT64_C(0x61f7dbdb461a5bcb), UINT64_C(0x977328180eba58fe));
  const IMP B = IMP(UINT64_C(0xf60d043dbbf231ec), UINT64_C(0x0000000000000000));
  IMP T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x5804e019020c8db7), UINT64_C(0x977328180eba58fe)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x6bead79d8a2829df), UINT64_C(0x977328180eba58fe)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x97fadfe6fde86a27), UINT64_C(0x977328180eba58fe)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0xf7ffdffffffa7bef), UINT64_C(0x977328180eba58fe)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x60050019021211c8), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x2706c8aee8eea828), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(-A, IMP(UINT64_C(0x9e082424b9e5a434), UINT64_C(0x688cd7e7f145a702)));
  EXPECT_EQ(~A, IMP(UINT64_C(0x9e082424b9e5a434), UINT64_C(0x688cd7e7f145a701)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(INT64_C(-9)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x086d0206e19e1d17), UINT64_C(0x977328180eba58fe)));
  EXPECT_EQ(A >> 0, IMP(UINT64_C(0x61f7dbdb461a5bcb), UINT64_C(0x977328180eba58fe)));
  EXPECT_EQ(A << 0, IMP(UINT64_C(0x61f7dbdb461a5bcb), UINT64_C(0x977328180eba58fe)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x5804e019020c8db7), UINT64_C(0x977328180eba58fe)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x6bead79d8a2829df), UINT64_C(0x977328180eba58fe)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x97fadfe6fde86a27), UINT64_C(0x977328180eba58fe)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0xf7ffdffffffa7bef), UINT64_C(0x977328180eba58fe)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x60050019021211c8), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x2706c8aee8eea828), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T /= B), IMP(INT64_C(-9)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x086d0206e19e1d17), UINT64_C(0x977328180eba58fe)));
  EXPECT_EQ((T = A, T >>= 0), IMP(UINT64_C(0x61f7dbdb461a5bcb), UINT64_C(0x977328180eba58fe)));
  EXPECT_EQ((T = A, T <<= 0), IMP(UINT64_C(0x61f7dbdb461a5bcb), UINT64_C(0x977328180eba58fe)));
  EXPECT_EQ(ror(A, 0), IMP(UINT64_C(0x61f7dbdb461a5bcb), UINT64_C(0x977328180eba58fe)));
  EXPECT_EQ(rol(A, 0), IMP(UINT64_C(0x61f7dbdb461a5bcb), UINT64_C(0x977328180eba58fe)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0x61f7dbdb461a5bcb), UINT64_C(0x977328180eba58fe)));
  EXPECT_EQ(T, IMP(UINT64_C(0x61f7dbdb461a5bcb), UINT64_C(0x977328180eba58ff)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0x61f7dbdb461a5bcb), UINT64_C(0x977328180eba58fe)));
  EXPECT_EQ(T, IMP(UINT64_C(0x61f7dbdb461a5bcb), UINT64_C(0x977328180eba58fd)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0x61f7dbdb461a5bcb), UINT64_C(0x977328180eba58ff)));
  EXPECT_EQ(T, IMP(UINT64_C(0x61f7dbdb461a5bcb), UINT64_C(0x977328180eba58ff)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0x61f7dbdb461a5bcb), UINT64_C(0x977328180eba58fd)));
  EXPECT_EQ(T, IMP(UINT64_C(0x61f7dbdb461a5bcb), UINT64_C(0x977328180eba58fd)));
}

TEST(u128, autogen_basic_134) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(UINT64_C(0x6e74c3178e5b1260), UINT64_C(0x0000000000000000));
  const IMP B = IMP(UINT64_C(0xfa79188f342527f5), UINT64_C(0x0000000000000000));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x68eddba6c2803a55), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x73fbaa885a35ea6b), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x940ddb98ba7e3595), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0xfe7ddb9fbe7f37f5), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x6a70000704010260), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(-A, IMP(UINT64_C(0x918b3ce871a4eda0), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(~A, IMP(UINT64_C(0x918b3ce871a4ed9f), UINT64_C(0xffffffffffffffff)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x6e74c3178e5b1260), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A >> 0, IMP(UINT64_C(0x6e74c3178e5b1260), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A << 0, IMP(UINT64_C(0x6e74c3178e5b1260), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x68eddba6c2803a55), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x73fbaa885a35ea6b), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x940ddb98ba7e3595), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0xfe7ddb9fbe7f37f5), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x6a70000704010260), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x6e74c3178e5b1260), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T >>= 0), IMP(UINT64_C(0x6e74c3178e5b1260), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T <<= 0), IMP(UINT64_C(0x6e74c3178e5b1260), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 0), IMP(UINT64_C(0x6e74c3178e5b1260), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(rol(A, 0), IMP(UINT64_C(0x6e74c3178e5b1260), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0x6e74c3178e5b1260), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, IMP(UINT64_C(0x6e74c3178e5b1260), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0x6e74c3178e5b1260), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, IMP(UINT64_C(0x6e74c3178e5b125f), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0x6e74c3178e5b1260), UINT64_C(0x0000000000000001)));
  EXPECT_EQ(T, IMP(UINT64_C(0x6e74c3178e5b1260), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0x6e74c3178e5b125f), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ(T, IMP(UINT64_C(0x6e74c3178e5b125f), UINT64_C(0xffffffffffffffff)));
}

TEST(i128, autogen_basic_135) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(UINT64_C(0x6e74c3178e5b1260), UINT64_C(0x0000000000000000));
  const IMP B = IMP(UINT64_C(0xfa79188f342527f5), UINT64_C(0x0000000000000000));
  IMP T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x68eddba6c2803a55), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x73fbaa885a35ea6b), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x940ddb98ba7e3595), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0xfe7ddb9fbe7f37f5), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x6a70000704010260), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A * B, IMP(INT64_C(0)));
  EXPECT_EQ(-A, IMP(UINT64_C(0x918b3ce871a4eda0), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(~A, IMP(UINT64_C(0x918b3ce871a4ed9f), UINT64_C(0xffffffffffffffff)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(INT64_C(-19)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x057195b86d1d098f), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A >> 0, IMP(UINT64_C(0x6e74c3178e5b1260), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A << 0, IMP(UINT64_C(0x6e74c3178e5b1260), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x68eddba6c2803a55), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x73fbaa885a35ea6b), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x940ddb98ba7e3595), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0xfe7ddb9fbe7f37f5), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x6a70000704010260), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T *= B), IMP(INT64_C(0)));
  EXPECT_EQ((T = A, T /= B), IMP(INT64_C(-19)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x057195b86d1d098f), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T >>= 0), IMP(UINT64_C(0x6e74c3178e5b1260), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T <<= 0), IMP(UINT64_C(0x6e74c3178e5b1260), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 0), IMP(UINT64_C(0x6e74c3178e5b1260), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(rol(A, 0), IMP(UINT64_C(0x6e74c3178e5b1260), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0x6e74c3178e5b1260), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, IMP(UINT64_C(0x6e74c3178e5b1260), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0x6e74c3178e5b1260), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, IMP(UINT64_C(0x6e74c3178e5b125f), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0x6e74c3178e5b1260), UINT64_C(0x0000000000000001)));
  EXPECT_EQ(T, IMP(UINT64_C(0x6e74c3178e5b1260), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0x6e74c3178e5b125f), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ(T, IMP(UINT64_C(0x6e74c3178e5b125f), UINT64_C(0xffffffffffffffff)));
}

TEST(u128, autogen_basic_136) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(UINT64_C(0x9606ea6744a90692), UINT64_C(0x0000000000000000));
  const IMP B = IMP(UINT64_C(0x9a3315985d675c2f));
  IMP T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x9606ea6744a90692), UINT64_C(0x9a3315985d675c2f)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x9606ea6744a90691), UINT64_C(0x65ccea67a298a3d1)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x9606ea6744a90692), UINT64_C(0x9a3315985d675c2f)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0x9606ea6744a90692), UINT64_C(0x9a3315985d675c2f)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x9ffc0db70822acce), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(-A, IMP(UINT64_C(0x69f91598bb56f96e), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(~A, IMP(UINT64_C(0x69f91598bb56f96d), UINT64_C(0xffffffffffffffff)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0xf912a409abc6483c)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x51b973d9587f2cfc)));
  EXPECT_EQ(A >> 47, IMP(UINT64_C(0x0000000000012c0d), UINT64_C(0xd4ce89520d240000)));
  EXPECT_EQ(A << 47, IMP(UINT64_C(0x8349000000000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x9606ea6744a90692), UINT64_C(0x9a3315985d675c2f)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x9606ea6744a90691), UINT64_C(0x65ccea67a298a3d1)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x9606ea6744a90692), UINT64_C(0x9a3315985d675c2f)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0x9606ea6744a90692), UINT64_C(0x9a3315985d675c2f)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x9ffc0db70822acce), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0xf912a409abc6483c)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x51b973d9587f2cfc)));
  EXPECT_EQ((T = A, T >>= 47), IMP(UINT64_C(0x0000000000012c0d), UINT64_C(0xd4ce89520d240000)));
  EXPECT_EQ((T = A, T <<= 47), IMP(UINT64_C(0x8349000000000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 47), IMP(UINT64_C(0x0000000000012c0d), UINT64_C(0xd4ce89520d240000)));
  EXPECT_EQ(rol(A, 47), IMP(UINT64_C(0x8349000000000000), UINT64_C(0x00004b037533a254)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0x9606ea6744a90692), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, IMP(UINT64_C(0x9606ea6744a90692), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0x9606ea6744a90692), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, IMP(UINT64_C(0x9606ea6744a90691), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0x9606ea6744a90692), UINT64_C(0x0000000000000001)));
  EXPECT_EQ(T, IMP(UINT64_C(0x9606ea6744a90692), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0x9606ea6744a90691), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ(T, IMP(UINT64_C(0x9606ea6744a90691), UINT64_C(0xffffffffffffffff)));
}

TEST(i128, autogen_basic_137) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(UINT64_C(0x9606ea6744a90692), UINT64_C(0x0000000000000000));
  const IMP B = IMP(UINT64_C(0x0000000000000000), UINT64_C(0x9a3315985d675c2f));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x9606ea6744a90692), UINT64_C(0x9a3315985d675c2f)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x9606ea6744a90691), UINT64_C(0x65ccea67a298a3d1)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x9606ea6744a90692), UINT64_C(0x9a3315985d675c2f)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0x9606ea6744a90692), UINT64_C(0x9a3315985d675c2f)));
  EXPECT_EQ(A & B, IMP(INT64_C(0)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x9ffc0db70822acce), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(-A, IMP(UINT64_C(0x69f91598bb56f96e), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(~A, IMP(UINT64_C(0x69f91598bb56f96d), UINT64_C(0xffffffffffffffff)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x5010a96f246f6cde)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(INT64_C(-4483344085648065730)));
  EXPECT_EQ(A >> 47, IMP(UINT64_C(0xffffffffffff2c0d), UINT64_C(0xd4ce89520d240000)));
  EXPECT_EQ(A << 47, IMP(UINT64_C(0x8349000000000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x9606ea6744a90692), UINT64_C(0x9a3315985d675c2f)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x9606ea6744a90691), UINT64_C(0x65ccea67a298a3d1)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x9606ea6744a90692), UINT64_C(0x9a3315985d675c2f)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0x9606ea6744a90692), UINT64_C(0x9a3315985d675c2f)));
  EXPECT_EQ((T = A, T &= B), IMP(INT64_C(0)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x9ffc0db70822acce), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x5010a96f246f6cde)));
  EXPECT_EQ((T = A, T %= B), IMP(INT64_C(-4483344085648065730)));
  EXPECT_EQ((T = A, T >>= 47), IMP(UINT64_C(0xffffffffffff2c0d), UINT64_C(0xd4ce89520d240000)));
  EXPECT_EQ((T = A, T <<= 47), IMP(UINT64_C(0x8349000000000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 47), IMP(UINT64_C(0x0000000000012c0d), UINT64_C(0xd4ce89520d240000)));
  EXPECT_EQ(rol(A, 47), IMP(UINT64_C(0x8349000000000000), UINT64_C(0x00004b037533a254)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0x9606ea6744a90692), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, IMP(UINT64_C(0x9606ea6744a90692), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0x9606ea6744a90692), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(T, IMP(UINT64_C(0x9606ea6744a90691), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0x9606ea6744a90692), UINT64_C(0x0000000000000001)));
  EXPECT_EQ(T, IMP(UINT64_C(0x9606ea6744a90692), UINT64_C(0x0000000000000001)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0x9606ea6744a90691), UINT64_C(0xffffffffffffffff)));
  EXPECT_EQ(T, IMP(UINT64_C(0x9606ea6744a90691), UINT64_C(0xffffffffffffffff)));
}

TEST(u128, autogen_basic_138) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(UINT64_C(0x38baeb4a79901214));
  const IMP B = IMP(UINT64_C(0x682e5eb40e5a16f9), UINT64_C(0x0000000000000000));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x682e5eb40e5a16f9), UINT64_C(0x38baeb4a79901214)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x97d1a14bf1a5e907), UINT64_C(0x38baeb4a79901214)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x682e5eb40e5a16f9), UINT64_C(0x38baeb4a79901214)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0x682e5eb40e5a16f9), UINT64_C(0x38baeb4a79901214)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0xc863ed9611b74d74), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(-A, IMP(-INT64_C(4087838316891738644)));
  EXPECT_EQ(~A, IMP(-INT64_C(4087838316891738645)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x38baeb4a79901214)));
  EXPECT_EQ(A >> 0, IMP(UINT64_C(0x38baeb4a79901214)));
  EXPECT_EQ(A << 0, IMP(UINT64_C(0x38baeb4a79901214)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x682e5eb40e5a16f9), UINT64_C(0x38baeb4a79901214)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x97d1a14bf1a5e907), UINT64_C(0x38baeb4a79901214)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x682e5eb40e5a16f9), UINT64_C(0x38baeb4a79901214)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0x682e5eb40e5a16f9), UINT64_C(0x38baeb4a79901214)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0xc863ed9611b74d74), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x38baeb4a79901214)));
  EXPECT_EQ((T = A, T >>= 0), IMP(UINT64_C(0x38baeb4a79901214)));
  EXPECT_EQ((T = A, T <<= 0), IMP(UINT64_C(0x38baeb4a79901214)));
  EXPECT_EQ(ror(A, 0), IMP(UINT64_C(0x38baeb4a79901214)));
  EXPECT_EQ(rol(A, 0), IMP(UINT64_C(0x38baeb4a79901214)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0x38baeb4a79901214)));
  EXPECT_EQ(T, IMP(UINT64_C(0x38baeb4a79901215)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0x38baeb4a79901214)));
  EXPECT_EQ(T, IMP(UINT64_C(0x38baeb4a79901213)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0x38baeb4a79901215)));
  EXPECT_EQ(T, IMP(UINT64_C(0x38baeb4a79901215)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0x38baeb4a79901213)));
  EXPECT_EQ(T, IMP(UINT64_C(0x38baeb4a79901213)));
}

TEST(i128, autogen_basic_139) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(INT64_C(4087838316891738644));
  const IMP B = IMP(UINT64_C(0x682e5eb40e5a16f9), UINT64_C(0x0000000000000000));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x682e5eb40e5a16f9), UINT64_C(0x38baeb4a79901214)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x97d1a14bf1a5e907), UINT64_C(0x38baeb4a79901214)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x682e5eb40e5a16f9), UINT64_C(0x38baeb4a79901214)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0x682e5eb40e5a16f9), UINT64_C(0x38baeb4a79901214)));
  EXPECT_EQ(A & B, IMP(INT64_C(0)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0xc863ed9611b74d74), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(-A, IMP(INT64_C(-4087838316891738644)));
  EXPECT_EQ(~A, IMP(INT64_C(-4087838316891738645)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(INT64_C(0)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(INT64_C(4087838316891738644)));
  EXPECT_EQ(A >> 0, IMP(INT64_C(4087838316891738644)));
  EXPECT_EQ(A << 0, IMP(INT64_C(4087838316891738644)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x682e5eb40e5a16f9), UINT64_C(0x38baeb4a79901214)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x97d1a14bf1a5e907), UINT64_C(0x38baeb4a79901214)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x682e5eb40e5a16f9), UINT64_C(0x38baeb4a79901214)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0x682e5eb40e5a16f9), UINT64_C(0x38baeb4a79901214)));
  EXPECT_EQ((T = A, T &= B), IMP(INT64_C(0)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0xc863ed9611b74d74), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T /= B), IMP(INT64_C(0)));
  EXPECT_EQ((T = A, T %= B), IMP(INT64_C(4087838316891738644)));
  EXPECT_EQ((T = A, T >>= 0), IMP(INT64_C(4087838316891738644)));
  EXPECT_EQ((T = A, T <<= 0), IMP(INT64_C(4087838316891738644)));
  EXPECT_EQ(ror(A, 0), IMP(INT64_C(4087838316891738644)));
  EXPECT_EQ(rol(A, 0), IMP(INT64_C(4087838316891738644)));
  EXPECT_EQ((T = A, T++), IMP(INT64_C(4087838316891738644)));
  EXPECT_EQ(T, IMP(INT64_C(4087838316891738645)));
  EXPECT_EQ((T = A, T--), IMP(INT64_C(4087838316891738644)));
  EXPECT_EQ(T, IMP(INT64_C(4087838316891738643)));
  EXPECT_EQ((T = A, ++T), IMP(INT64_C(4087838316891738645)));
  EXPECT_EQ(T, IMP(INT64_C(4087838316891738645)));
  EXPECT_EQ((T = A, --T), IMP(INT64_C(4087838316891738643)));
  EXPECT_EQ(T, IMP(INT64_C(4087838316891738643)));
}

TEST(u128, autogen_basic_140) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(-INT64_C(4076437673986036163));
  const IMP B = IMP(UINT64_C(0x1dec8da144569ad3), UINT64_C(0x13913134b23e6566));
  IMP T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x1dec8da144569ad2), UINT64_C(0xdafec6bd3f4953a3)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0xe213725ebba9652c), UINT64_C(0xb3dc6453dacc88d7)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0xe213725ebba9652c), UINT64_C(0xd4fca4bc3f348b5b)));
  EXPECT_EQ(A | B, IMP(-INT64_C(2882948364180197505)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x1dec8da144569ad3), UINT64_C(0x03011100800a6424)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x0a9d2701391eabfd), UINT64_C(0x102b47bd9f1efd4e)));
  EXPECT_EQ(-A, IMP(UINT64_C(0x38926a7772f511c3)));
  EXPECT_EQ(~A, IMP(UINT64_C(0x38926a7772f511c2)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x0000000000000008)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x109b92f5dd4b2967), UINT64_C(0x2ae40be2fb17c30d)));
  EXPECT_EQ(A >> 102, IMP(UINT64_C(0x0000000003ffffff)));
  EXPECT_EQ(A << 102, IMP(UINT64_C(0x42bb8f4000000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x1dec8da144569ad2), UINT64_C(0xdafec6bd3f4953a3)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0xe213725ebba9652c), UINT64_C(0xb3dc6453dacc88d7)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0xe213725ebba9652c), UINT64_C(0xd4fca4bc3f348b5b)));
  EXPECT_EQ((T = A, T |= B), IMP(-INT64_C(2882948364180197505)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x1dec8da144569ad3), UINT64_C(0x03011100800a6424)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x0a9d2701391eabfd), UINT64_C(0x102b47bd9f1efd4e)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x0000000000000008)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x109b92f5dd4b2967), UINT64_C(0x2ae40be2fb17c30d)));
  EXPECT_EQ((T = A, T >>= 102), IMP(UINT64_C(0x0000000003ffffff)));
  EXPECT_EQ((T = A, T <<= 102), IMP(UINT64_C(0x42bb8f4000000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 102), IMP(UINT64_C(0xffffffffff1db656), UINT64_C(0x22342bb8f7ffffff)));
  EXPECT_EQ(rol(A, 102), IMP(UINT64_C(0x42bb8f7fffffffff), UINT64_C(0xfffffff1db656223)));
  EXPECT_EQ((T = A, T++), IMP(-INT64_C(4076437673986036163)));
  EXPECT_EQ(T, IMP(-INT64_C(4076437673986036162)));
  EXPECT_EQ((T = A, T--), IMP(-INT64_C(4076437673986036163)));
  EXPECT_EQ(T, IMP(-INT64_C(4076437673986036164)));
  EXPECT_EQ((T = A, ++T), IMP(-INT64_C(4076437673986036162)));
  EXPECT_EQ(T, IMP(-INT64_C(4076437673986036162)));
  EXPECT_EQ((T = A, --T), IMP(-INT64_C(4076437673986036164)));
  EXPECT_EQ(T, IMP(-INT64_C(4076437673986036164)));
}

TEST(i128, autogen_basic_141) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(INT64_C(-4076437673986036163));
  const IMP B = IMP(UINT64_C(0x1dec8da144569ad3), UINT64_C(0x13913134b23e6566));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0x1dec8da144569ad2), UINT64_C(0xdafec6bd3f4953a3)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0xe213725ebba9652c), UINT64_C(0xb3dc6453dacc88d7)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0xe213725ebba9652c), UINT64_C(0xd4fca4bc3f348b5b)));
  EXPECT_EQ(A | B, IMP(INT64_C(-2882948364180197505)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x1dec8da144569ad3), UINT64_C(0x03011100800a6424)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x0a9d2701391eabfd), UINT64_C(0x102b47bd9f1efd4e)));
  EXPECT_EQ(-A, IMP(INT64_C(4076437673986036163)));
  EXPECT_EQ(~A, IMP(INT64_C(4076437673986036162)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(INT64_C(0)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(INT64_C(-4076437673986036163)));
  EXPECT_EQ(A >> 102, IMP(INT64_C(-1)));
  EXPECT_EQ(A << 102, IMP(UINT64_C(0x42bb8f4000000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0x1dec8da144569ad2), UINT64_C(0xdafec6bd3f4953a3)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0xe213725ebba9652c), UINT64_C(0xb3dc6453dacc88d7)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0xe213725ebba9652c), UINT64_C(0xd4fca4bc3f348b5b)));
  EXPECT_EQ((T = A, T |= B), IMP(INT64_C(-2882948364180197505)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x1dec8da144569ad3), UINT64_C(0x03011100800a6424)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x0a9d2701391eabfd), UINT64_C(0x102b47bd9f1efd4e)));
  EXPECT_EQ((T = A, T /= B), IMP(INT64_C(0)));
  EXPECT_EQ((T = A, T %= B), IMP(INT64_C(-4076437673986036163)));
  EXPECT_EQ((T = A, T >>= 102), IMP(INT64_C(-1)));
  EXPECT_EQ((T = A, T <<= 102), IMP(UINT64_C(0x42bb8f4000000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 102), IMP(UINT64_C(0xffffffffff1db656), UINT64_C(0x22342bb8f7ffffff)));
  EXPECT_EQ(rol(A, 102), IMP(UINT64_C(0x42bb8f7fffffffff), UINT64_C(0xfffffff1db656223)));
  EXPECT_EQ((T = A, T++), IMP(INT64_C(-4076437673986036163)));
  EXPECT_EQ(T, IMP(INT64_C(-4076437673986036162)));
  EXPECT_EQ((T = A, T--), IMP(INT64_C(-4076437673986036163)));
  EXPECT_EQ(T, IMP(INT64_C(-4076437673986036164)));
  EXPECT_EQ((T = A, ++T), IMP(INT64_C(-4076437673986036162)));
  EXPECT_EQ(T, IMP(INT64_C(-4076437673986036162)));
  EXPECT_EQ((T = A, --T), IMP(INT64_C(-4076437673986036164)));
  EXPECT_EQ(T, IMP(INT64_C(-4076437673986036164)));
}

TEST(u128, autogen_basic_142) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(UINT64_C(0xa9a91d4d97bf7bb7), UINT64_C(0x1ef976c2f7f3097a));
  const IMP B = IMP(-INT64_C(6837628308125604600));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0xa9a91d4d97bf7bb6), UINT64_C(0xc015540aebf7ae82)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0xa9a91d4d97bf7bb7), UINT64_C(0x7ddd997b03ee6472)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x5656e2b268408448), UINT64_C(0xbfe2ab8503f7ac72)));
  EXPECT_EQ(A | B, IMP(-INT64_C(4612812158987162246)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0xa9a91d4d97bf7bb7), UINT64_C(0x00195442f4000108)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x32bee4e7c05e5c04), UINT64_C(0xbe2ad791d29bedd0)));
  EXPECT_EQ(-A, IMP(UINT64_C(0x5656e2b268408448), UINT64_C(0xe106893d080cf686)));
  EXPECT_EQ(~A, IMP(UINT64_C(0x5656e2b268408448), UINT64_C(0xe106893d080cf685)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0xa9a91d4d97bf7bb7), UINT64_C(0x1ef976c2f7f3097a)));
  EXPECT_EQ(A >> 8, IMP(UINT64_C(0x00a9a91d4d97bf7b), UINT64_C(0xb71ef976c2f7f309)));
  EXPECT_EQ(A << 8, IMP(UINT64_C(0xa91d4d97bf7bb71e), UINT64_C(0xf976c2f7f3097a00)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0xa9a91d4d97bf7bb6), UINT64_C(0xc015540aebf7ae82)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0xa9a91d4d97bf7bb7), UINT64_C(0x7ddd997b03ee6472)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x5656e2b268408448), UINT64_C(0xbfe2ab8503f7ac72)));
  EXPECT_EQ((T = A, T |= B), IMP(-INT64_C(4612812158987162246)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0xa9a91d4d97bf7bb7), UINT64_C(0x00195442f4000108)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x32bee4e7c05e5c04), UINT64_C(0xbe2ad791d29bedd0)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0xa9a91d4d97bf7bb7), UINT64_C(0x1ef976c2f7f3097a)));
  EXPECT_EQ((T = A, T >>= 8), IMP(UINT64_C(0x00a9a91d4d97bf7b), UINT64_C(0xb71ef976c2f7f309)));
  EXPECT_EQ((T = A, T <<= 8), IMP(UINT64_C(0xa91d4d97bf7bb71e), UINT64_C(0xf976c2f7f3097a00)));
  EXPECT_EQ(ror(A, 8), IMP(UINT64_C(0x7aa9a91d4d97bf7b), UINT64_C(0xb71ef976c2f7f309)));
  EXPECT_EQ(rol(A, 8), IMP(UINT64_C(0xa91d4d97bf7bb71e), UINT64_C(0xf976c2f7f3097aa9)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0xa9a91d4d97bf7bb7), UINT64_C(0x1ef976c2f7f3097a)));
  EXPECT_EQ(T, IMP(UINT64_C(0xa9a91d4d97bf7bb7), UINT64_C(0x1ef976c2f7f3097b)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0xa9a91d4d97bf7bb7), UINT64_C(0x1ef976c2f7f3097a)));
  EXPECT_EQ(T, IMP(UINT64_C(0xa9a91d4d97bf7bb7), UINT64_C(0x1ef976c2f7f30979)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0xa9a91d4d97bf7bb7), UINT64_C(0x1ef976c2f7f3097b)));
  EXPECT_EQ(T, IMP(UINT64_C(0xa9a91d4d97bf7bb7), UINT64_C(0x1ef976c2f7f3097b)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0xa9a91d4d97bf7bb7), UINT64_C(0x1ef976c2f7f30979)));
  EXPECT_EQ(T, IMP(UINT64_C(0xa9a91d4d97bf7bb7), UINT64_C(0x1ef976c2f7f30979)));
}

TEST(i128, autogen_basic_143) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(UINT64_C(0xa9a91d4d97bf7bb7), UINT64_C(0x1ef976c2f7f3097a));
  const IMP B = IMP(INT64_C(-6837628308125604600));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0xa9a91d4d97bf7bb6), UINT64_C(0xc015540aebf7ae82)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0xa9a91d4d97bf7bb7), UINT64_C(0x7ddd997b03ee6472)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x5656e2b268408448), UINT64_C(0xbfe2ab8503f7ac72)));
  EXPECT_EQ(A | B, IMP(INT64_C(-4612812158987162246)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0xa9a91d4d97bf7bb7), UINT64_C(0x00195442f4000108)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x32bee4e7c05e5c04), UINT64_C(0xbe2ad791d29bedd0)));
  EXPECT_EQ(-A, IMP(UINT64_C(0x5656e2b268408448), UINT64_C(0xe106893d080cf686)));
  EXPECT_EQ(~A, IMP(UINT64_C(0x5656e2b268408448), UINT64_C(0xe106893d080cf685)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x0000000000000000), UINT64_C(0xe8edc7b7cf8fbc31)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(INT64_C(-819932173906373902)));
  EXPECT_EQ(A >> 8, IMP(UINT64_C(0xffa9a91d4d97bf7b), UINT64_C(0xb71ef976c2f7f309)));
  EXPECT_EQ(A << 8, IMP(UINT64_C(0xa91d4d97bf7bb71e), UINT64_C(0xf976c2f7f3097a00)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0xa9a91d4d97bf7bb6), UINT64_C(0xc015540aebf7ae82)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0xa9a91d4d97bf7bb7), UINT64_C(0x7ddd997b03ee6472)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x5656e2b268408448), UINT64_C(0xbfe2ab8503f7ac72)));
  EXPECT_EQ((T = A, T |= B), IMP(INT64_C(-4612812158987162246)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0xa9a91d4d97bf7bb7), UINT64_C(0x00195442f4000108)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x32bee4e7c05e5c04), UINT64_C(0xbe2ad791d29bedd0)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x0000000000000000), UINT64_C(0xe8edc7b7cf8fbc31)));
  EXPECT_EQ((T = A, T %= B), IMP(INT64_C(-819932173906373902)));
  EXPECT_EQ((T = A, T >>= 8), IMP(UINT64_C(0xffa9a91d4d97bf7b), UINT64_C(0xb71ef976c2f7f309)));
  EXPECT_EQ((T = A, T <<= 8), IMP(UINT64_C(0xa91d4d97bf7bb71e), UINT64_C(0xf976c2f7f3097a00)));
  EXPECT_EQ(ror(A, 8), IMP(UINT64_C(0x7aa9a91d4d97bf7b), UINT64_C(0xb71ef976c2f7f309)));
  EXPECT_EQ(rol(A, 8), IMP(UINT64_C(0xa91d4d97bf7bb71e), UINT64_C(0xf976c2f7f3097aa9)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0xa9a91d4d97bf7bb7), UINT64_C(0x1ef976c2f7f3097a)));
  EXPECT_EQ(T, IMP(UINT64_C(0xa9a91d4d97bf7bb7), UINT64_C(0x1ef976c2f7f3097b)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0xa9a91d4d97bf7bb7), UINT64_C(0x1ef976c2f7f3097a)));
  EXPECT_EQ(T, IMP(UINT64_C(0xa9a91d4d97bf7bb7), UINT64_C(0x1ef976c2f7f30979)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0xa9a91d4d97bf7bb7), UINT64_C(0x1ef976c2f7f3097b)));
  EXPECT_EQ(T, IMP(UINT64_C(0xa9a91d4d97bf7bb7), UINT64_C(0x1ef976c2f7f3097b)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0xa9a91d4d97bf7bb7), UINT64_C(0x1ef976c2f7f30979)));
  EXPECT_EQ(T, IMP(UINT64_C(0xa9a91d4d97bf7bb7), UINT64_C(0x1ef976c2f7f30979)));
}

TEST(u128, autogen_basic_144) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x43eaaa14337b7f3c));
  const IMP B = IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x733b7e7cdad5b1c1));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0xfffffffffffffffe), UINT64_C(0xb72628910e5130fd)));
  EXPECT_EQ(A - B, IMP(-INT64_C(3409458463868859013)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0x30d1d468e9aecefd)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x73fbfe7cfbfffffd)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x432a2a1412513100)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x676c0a79d6e5fffe), UINT64_C(0x296d59fd27ff683c)));
  EXPECT_EQ(-A, IMP(UINT64_C(0xbc1555ebcc8480c4)));
  EXPECT_EQ(~A, IMP(UINT64_C(0xbc1555ebcc8480c3)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x43eaaa14337b7f3c)));
  EXPECT_EQ(A >> 65, IMP(UINT64_C(0x7fffffffffffffff)));
  EXPECT_EQ(A << 65, IMP(UINT64_C(0x87d5542866f6fe78), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0xfffffffffffffffe), UINT64_C(0xb72628910e5130fd)));
  EXPECT_EQ((T = A, T -= B), IMP(-INT64_C(3409458463868859013)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0x30d1d468e9aecefd)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x73fbfe7cfbfffffd)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x432a2a1412513100)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x676c0a79d6e5fffe), UINT64_C(0x296d59fd27ff683c)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x43eaaa14337b7f3c)));
  EXPECT_EQ((T = A, T >>= 65), IMP(UINT64_C(0x7fffffffffffffff)));
  EXPECT_EQ((T = A, T <<= 65), IMP(UINT64_C(0x87d5542866f6fe78), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 65), IMP(UINT64_C(0xa1f5550a19bdbf9e), UINT64_C(0x7fffffffffffffff)));
  EXPECT_EQ(rol(A, 65), IMP(UINT64_C(0x87d5542866f6fe79), UINT64_C(0xfffffffffffffffe)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x43eaaa14337b7f3c)));
  EXPECT_EQ(T, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x43eaaa14337b7f3d)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x43eaaa14337b7f3c)));
  EXPECT_EQ(T, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x43eaaa14337b7f3b)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x43eaaa14337b7f3d)));
  EXPECT_EQ(T, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x43eaaa14337b7f3d)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x43eaaa14337b7f3b)));
  EXPECT_EQ(T, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x43eaaa14337b7f3b)));
}

TEST(i128, autogen_basic_145) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x43eaaa14337b7f3c));
  const IMP B = IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x733b7e7cdad5b1c1));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0xfffffffffffffffe), UINT64_C(0xb72628910e5130fd)));
  EXPECT_EQ(A - B, IMP(INT64_C(-3409458463868859013)));
  EXPECT_EQ(A ^ B, IMP(INT64_C(3517826331015302909)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x73fbfe7cfbfffffd)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x432a2a1412513100)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0x676c0a79d6e5fffe), UINT64_C(0x296d59fd27ff683c)));
  EXPECT_EQ(-A, IMP(UINT64_C(0x0000000000000000), UINT64_C(0xbc1555ebcc8480c4)));
  EXPECT_EQ(~A, IMP(UINT64_C(0x0000000000000000), UINT64_C(0xbc1555ebcc8480c3)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(INT64_C(1)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(INT64_C(-3409458463868859013)));
  EXPECT_EQ(A >> 65, IMP(INT64_C(-1)));
  EXPECT_EQ(A << 65, IMP(UINT64_C(0x87d5542866f6fe78), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0xfffffffffffffffe), UINT64_C(0xb72628910e5130fd)));
  EXPECT_EQ((T = A, T -= B), IMP(INT64_C(-3409458463868859013)));
  EXPECT_EQ((T = A, T ^= B), IMP(INT64_C(3517826331015302909)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x73fbfe7cfbfffffd)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x432a2a1412513100)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0x676c0a79d6e5fffe), UINT64_C(0x296d59fd27ff683c)));
  EXPECT_EQ((T = A, T /= B), IMP(INT64_C(1)));
  EXPECT_EQ((T = A, T %= B), IMP(INT64_C(-3409458463868859013)));
  EXPECT_EQ((T = A, T >>= 65), IMP(INT64_C(-1)));
  EXPECT_EQ((T = A, T <<= 65), IMP(UINT64_C(0x87d5542866f6fe78), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 65), IMP(UINT64_C(0xa1f5550a19bdbf9e), UINT64_C(0x7fffffffffffffff)));
  EXPECT_EQ(rol(A, 65), IMP(UINT64_C(0x87d5542866f6fe79), UINT64_C(0xfffffffffffffffe)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x43eaaa14337b7f3c)));
  EXPECT_EQ(T, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x43eaaa14337b7f3d)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x43eaaa14337b7f3c)));
  EXPECT_EQ(T, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x43eaaa14337b7f3b)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x43eaaa14337b7f3d)));
  EXPECT_EQ(T, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x43eaaa14337b7f3d)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x43eaaa14337b7f3b)));
  EXPECT_EQ(T, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x43eaaa14337b7f3b)));
}

TEST(u128, autogen_basic_146) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x13ffc2b223a0c6ce));
  const IMP B = IMP(UINT64_C(0x0fa694c92627a2db));
  IMP T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x23a6577b49c869a9)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x04592de8fd7923f3)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x1c59567b05876415)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x1fffd6fb27a7e6df)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x03a68080222082ca)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0xf1926b171ccbcd18), UINT64_C(0xf72cc3af15ba6e3a)));
  EXPECT_EQ(-A, IMP(UINT64_C(0xec003d4ddc5f3932)));
  EXPECT_EQ(~A, IMP(UINT64_C(0xec003d4ddc5f3931)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x0000000000000010), UINT64_C(0x5b6a19971ed4c859)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x0dd632df614210ab)));
  EXPECT_EQ(A >> 91, IMP(UINT64_C(0x0000001fffffffff)));
  EXPECT_EQ(A << 91, IMP(UINT64_C(0x911d063670000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x23a6577b49c869a9)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x04592de8fd7923f3)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x1c59567b05876415)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x1fffd6fb27a7e6df)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x03a68080222082ca)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0xf1926b171ccbcd18), UINT64_C(0xf72cc3af15ba6e3a)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x0000000000000010), UINT64_C(0x5b6a19971ed4c859)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x0dd632df614210ab)));
  EXPECT_EQ((T = A, T >>= 91), IMP(UINT64_C(0x0000001fffffffff)));
  EXPECT_EQ((T = A, T <<= 91), IMP(UINT64_C(0x911d063670000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 91), IMP(UINT64_C(0xffffffe27ff85644), UINT64_C(0x7418d9dfffffffff)));
  EXPECT_EQ(rol(A, 91), IMP(UINT64_C(0x911d063677ffffff), UINT64_C(0xfffffffff89ffe15)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x13ffc2b223a0c6ce)));
  EXPECT_EQ(T, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x13ffc2b223a0c6cf)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x13ffc2b223a0c6ce)));
  EXPECT_EQ(T, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x13ffc2b223a0c6cd)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x13ffc2b223a0c6cf)));
  EXPECT_EQ(T, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x13ffc2b223a0c6cf)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x13ffc2b223a0c6cd)));
  EXPECT_EQ(T, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x13ffc2b223a0c6cd)));
}

TEST(i128, autogen_basic_147) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x13ffc2b223a0c6ce));
  const IMP B = IMP(INT64_C(1127752348352357083));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x23a6577b49c869a9)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x04592de8fd7923f3)));
  EXPECT_EQ(A ^ B, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x1c59567b05876415)));
  EXPECT_EQ(A | B, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x1fffd6fb27a7e6df)));
  EXPECT_EQ(A & B, IMP(INT64_C(263038916064477898)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0xf1926b171ccbcd18), UINT64_C(0xf72cc3af15ba6e3a)));
  EXPECT_EQ(-A, IMP(UINT64_C(0x0000000000000000), UINT64_C(0xec003d4ddc5f3932)));
  EXPECT_EQ(~A, IMP(UINT64_C(0x0000000000000000), UINT64_C(0xec003d4ddc5f3931)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(INT64_C(-15)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(INT64_C(-89374372284640861)));
  EXPECT_EQ(A >> 91, IMP(INT64_C(-1)));
  EXPECT_EQ(A << 91, IMP(UINT64_C(0x911d063670000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T += B), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x23a6577b49c869a9)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x04592de8fd7923f3)));
  EXPECT_EQ((T = A, T ^= B), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x1c59567b05876415)));
  EXPECT_EQ((T = A, T |= B), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x1fffd6fb27a7e6df)));
  EXPECT_EQ((T = A, T &= B), IMP(INT64_C(263038916064477898)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0xf1926b171ccbcd18), UINT64_C(0xf72cc3af15ba6e3a)));
  EXPECT_EQ((T = A, T /= B), IMP(INT64_C(-15)));
  EXPECT_EQ((T = A, T %= B), IMP(INT64_C(-89374372284640861)));
  EXPECT_EQ((T = A, T >>= 91), IMP(INT64_C(-1)));
  EXPECT_EQ((T = A, T <<= 91), IMP(UINT64_C(0x911d063670000000), UINT64_C(0x0000000000000000)));
  EXPECT_EQ(ror(A, 91), IMP(UINT64_C(0xffffffe27ff85644), UINT64_C(0x7418d9dfffffffff)));
  EXPECT_EQ(rol(A, 91), IMP(UINT64_C(0x911d063677ffffff), UINT64_C(0xfffffffff89ffe15)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x13ffc2b223a0c6ce)));
  EXPECT_EQ(T, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x13ffc2b223a0c6cf)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x13ffc2b223a0c6ce)));
  EXPECT_EQ(T, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x13ffc2b223a0c6cd)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x13ffc2b223a0c6cf)));
  EXPECT_EQ(T, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x13ffc2b223a0c6cf)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x13ffc2b223a0c6cd)));
  EXPECT_EQ(T, IMP(UINT64_C(0xffffffffffffffff), UINT64_C(0x13ffc2b223a0c6cd)));
}

TEST(u128, autogen_basic_148) {
  using IMP = erthink::uint128_t;
  const IMP A = IMP(UINT64_C(0x10432a39737a94b0));
  const IMP B = IMP(-INT64_C(1891276226502285947));
  IMP T;
  EXPECT_FALSE(A > B);
  EXPECT_FALSE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_TRUE(A < B);
  EXPECT_TRUE(A <= B);
  EXPECT_EQ(A + B, IMP(-INT64_C(719449472216909259)));
  EXPECT_EQ(A - B, IMP(UINT64_C(0x2a8253ee9849ef2b)));
  EXPECT_EQ(A ^ B, IMP(-INT64_C(755482738793238219)));
  EXPECT_EQ(A | B, IMP(-INT64_C(737466105505073739)));
  EXPECT_EQ(A & B, IMP(UINT64_C(0x0040020853308480)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0xfe552a88828b759f), UINT64_C(0x9b6596557184af70)));
  EXPECT_EQ(-A, IMP(-INT64_C(1171826754285376688)));
  EXPECT_EQ(~A, IMP(-INT64_C(1171826754285376689)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(UINT64_C(0x10432a39737a94b0)));
  EXPECT_EQ(A >> 5, IMP(UINT64_C(0x00821951cb9bd4a5)));
  EXPECT_EQ(A << 5, IMP(UINT64_C(0x0000000000000002), UINT64_C(0x0865472e6f529600)));
  EXPECT_EQ((T = A, T += B), IMP(-INT64_C(719449472216909259)));
  EXPECT_EQ((T = A, T -= B), IMP(UINT64_C(0x2a8253ee9849ef2b)));
  EXPECT_EQ((T = A, T ^= B), IMP(-INT64_C(755482738793238219)));
  EXPECT_EQ((T = A, T |= B), IMP(-INT64_C(737466105505073739)));
  EXPECT_EQ((T = A, T &= B), IMP(UINT64_C(0x0040020853308480)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0xfe552a88828b759f), UINT64_C(0x9b6596557184af70)));
  EXPECT_EQ((T = A, T /= B), IMP(UINT64_C(0x0000000000000000)));
  EXPECT_EQ((T = A, T %= B), IMP(UINT64_C(0x10432a39737a94b0)));
  EXPECT_EQ((T = A, T >>= 5), IMP(UINT64_C(0x00821951cb9bd4a5)));
  EXPECT_EQ((T = A, T <<= 5), IMP(UINT64_C(0x0000000000000002), UINT64_C(0x0865472e6f529600)));
  EXPECT_EQ(ror(A, 5), IMP(UINT64_C(0x8000000000000000), UINT64_C(0x00821951cb9bd4a5)));
  EXPECT_EQ(rol(A, 5), IMP(UINT64_C(0x0000000000000002), UINT64_C(0x0865472e6f529600)));
  EXPECT_EQ((T = A, T++), IMP(UINT64_C(0x10432a39737a94b0)));
  EXPECT_EQ(T, IMP(UINT64_C(0x10432a39737a94b1)));
  EXPECT_EQ((T = A, T--), IMP(UINT64_C(0x10432a39737a94b0)));
  EXPECT_EQ(T, IMP(UINT64_C(0x10432a39737a94af)));
  EXPECT_EQ((T = A, ++T), IMP(UINT64_C(0x10432a39737a94b1)));
  EXPECT_EQ(T, IMP(UINT64_C(0x10432a39737a94b1)));
  EXPECT_EQ((T = A, --T), IMP(UINT64_C(0x10432a39737a94af)));
  EXPECT_EQ(T, IMP(UINT64_C(0x10432a39737a94af)));
}

TEST(i128, autogen_basic_149) {
  using IMP = erthink::int128_t;
  const IMP A = IMP(INT64_C(1171826754285376688));
  const IMP B = IMP(INT64_C(-1891276226502285947));
  IMP T;
  EXPECT_TRUE(A > B);
  EXPECT_TRUE(A >= B);
  EXPECT_FALSE(A == B);
  EXPECT_TRUE(A != B);
  EXPECT_FALSE(A < B);
  EXPECT_FALSE(A <= B);
  EXPECT_EQ(A + B, IMP(INT64_C(-719449472216909259)));
  EXPECT_EQ(A - B, IMP(INT64_C(3063102980787662635)));
  EXPECT_EQ(A ^ B, IMP(INT64_C(-755482738793238219)));
  EXPECT_EQ(A | B, IMP(INT64_C(-737466105505073739)));
  EXPECT_EQ(A & B, IMP(INT64_C(18016633288164480)));
  EXPECT_EQ(A * B, IMP(UINT64_C(0xfe552a88828b759f), UINT64_C(0x9b6596557184af70)));
  EXPECT_EQ(-A, IMP(INT64_C(-1171826754285376688)));
  EXPECT_EQ(~A, IMP(INT64_C(-1171826754285376689)));
  EXPECT_TRUE(A);
  EXPECT_EQ(IMP::divmod(A, B).quotient, IMP(INT64_C(0)));
  EXPECT_EQ(IMP::divmod(A, B).remainder, IMP(INT64_C(1171826754285376688)));
  EXPECT_EQ(A >> 5, IMP(INT64_C(36619586071418021)));
  EXPECT_EQ(A << 5, IMP(UINT64_C(0x0000000000000002), UINT64_C(0x0865472e6f529600)));
  EXPECT_EQ((T = A, T += B), IMP(INT64_C(-719449472216909259)));
  EXPECT_EQ((T = A, T -= B), IMP(INT64_C(3063102980787662635)));
  EXPECT_EQ((T = A, T ^= B), IMP(INT64_C(-755482738793238219)));
  EXPECT_EQ((T = A, T |= B), IMP(INT64_C(-737466105505073739)));
  EXPECT_EQ((T = A, T &= B), IMP(INT64_C(18016633288164480)));
  EXPECT_EQ((T = A, T *= B), IMP(UINT64_C(0xfe552a88828b759f), UINT64_C(0x9b6596557184af70)));
  EXPECT_EQ((T = A, T /= B), IMP(INT64_C(0)));
  EXPECT_EQ((T = A, T %= B), IMP(INT64_C(1171826754285376688)));
  EXPECT_EQ((T = A, T >>= 5), IMP(INT64_C(36619586071418021)));
  EXPECT_EQ((T = A, T <<= 5), IMP(UINT64_C(0x0000000000000002), UINT64_C(0x0865472e6f529600)));
  EXPECT_EQ(ror(A, 5), IMP(UINT64_C(0x8000000000000000), UINT64_C(0x00821951cb9bd4a5)));
  EXPECT_EQ(rol(A, 5), IMP(UINT64_C(0x0000000000000002), UINT64_C(0x0865472e6f529600)));
  EXPECT_EQ((T = A, T++), IMP(INT64_C(1171826754285376688)));
  EXPECT_EQ(T, IMP(INT64_C(1171826754285376689)));
  EXPECT_EQ((T = A, T--), IMP(INT64_C(1171826754285376688)));
  EXPECT_EQ(T, IMP(INT64_C(1171826754285376687)));
  EXPECT_EQ((T = A, ++T), IMP(INT64_C(1171826754285376689)));
  EXPECT_EQ(T, IMP(INT64_C(1171826754285376689)));
  EXPECT_EQ((T = A, --T), IMP(INT64_C(1171826754285376687)));
  EXPECT_EQ(T, IMP(INT64_C(1171826754285376687)));
}
